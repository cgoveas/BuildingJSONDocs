{
  "info": {
    "description": "Endpoints for OpenManage Enterprise 3.8",
    "version": "",
    "contact": {
      "url": "https://www.dell.com/support/article/us/en/04/sln310714/support-for-openmanage-enterprise?lang=en",
      "name": "Dell Support"
    },
    "title": "OData Endpoints for OpenManage Services"
  },
  "paths": {
    "/AutoDeployService": {
      "get": {
        "description": "Gets all the endpoints for AutoDeploy service.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for AutoDeploy service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AutoDeployService"
        ],
        "operationId": "1_AutoDeployService_5211"
      }
    },
    "/AutoDeployService/Targets": {
      "get": {
        "description": "Gets all the AutoDeploy targets as specified by the request arguments (top, skip, and filtering arguments).\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Identifier,TemplateName,TemplateTypeId,TaskLastRunStatusId,IsBootToNetworkIso",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Identifier",
                "Identifier desc",
                "TemplateName",
                "TemplateName desc",
                "TemplateTypeId",
                "TemplateTypeId desc",
                "TaskLastRunStatusId",
                "TaskLastRunStatusId desc",
                "IsBootToNetworkIso",
                "IsBootToNetworkIso desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "AutoDeployService"
        ],
        "summary": "Gets all the AutoDeploy targets as specified by the request arguments",
        "operationId": "2_AutoDeployService_3149",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAutoDeployProfilesExample": {
                    "value": [
                      {
                        "@odata.type": "#AutoDeployService.AutoDeployTarget",
                        "ShareIp": null,
                        "IsoPath": null,
                        "TemplateName": "Template-70260",
                        "ShareType": null,
                        "CreatedOn": "2020-10-09 20:21:30.524813",
                        "AutoDeployDeviceId": 10387,
                        "@odata.id": "/api/AutoDeployService/Targets(10387)",
                        "GroupName": null,
                        "TemplateTypeId": 2,
                        "IsBootToNetworkIso": false,
                        "TaskId": 0,
                        "TemplateId": 11,
                        "TaskLastRunStatusId": 2200,
                        "CreatedBy": "admin",
                        "Identifier": "4DP7DV2"
                      },
                      {
                        "@odata.type": "#AutoDeployService.AutoDeployTarget",
                        "ShareIp": null,
                        "IsoPath": null,
                        "TemplateName": "Template-70260",
                        "ShareType": null,
                        "CreatedOn": "2020-10-09 20:21:30.523385",
                        "AutoDeployDeviceId": 10386,
                        "@odata.id": "/api/AutoDeployService/Targets(10386)",
                        "GroupName": null,
                        "TemplateTypeId": 2,
                        "IsBootToNetworkIso": false,
                        "TaskId": 0,
                        "TemplateId": 11,
                        "TaskLastRunStatusId": 2200,
                        "CreatedBy": "admin",
                        "Identifier": "D9WT753"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AutoDeployTargetModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AutoDeployService/Actions/AutoDeployService.Verify": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAutoDeployDeviceRequest"
              }
            }
          },
          "required": true,
          "description": "update AddAutoDeployDeviceRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "verifyIdentifierExample": {
                    "value": {
                      "AutoDeployDevices": [
                        {
                          "BaseEntityId": 0,
                          "ResultCode": 1,
                          "Identifier": "DSF346FAD"
                        },
                        {
                          "BaseEntityId": 10393,
                          "ResultCode": 0,
                          "Identifier": "AAD6AAA"
                        },
                        {
                          "BaseEntityId": 10394,
                          "ResultCode": 0,
                          "Identifier": "SR346HCF"
                        }
                      ],
                      "AutoDeployId": 6
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AutoDeployModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Validates the identifiers.\n\n__Privilege__: AUTO_DEPLOY_MANAGEMENT",
        "tags": [
          "AutoDeployService"
        ],
        "operationId": "3_AutoDeployService_2185",
        "summary": "Validates the identifiers."
      }
    },
    "/AutoDeployService/AutoDeploy": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutoDeployRequest"
              }
            }
          },
          "required": true,
          "description": "update AutoDeployRequest object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates AutoDeploy targets as specified in the request payload.\n\nPrivilege: AUTO_DEPLOY_MANAGEMENT",
        "tags": [
          "AutoDeployService"
        ],
        "operationId": "4_AutoDeployService_434",
        "summary": "Creates AutoDeploy targets as specified in the request payload."
      }
    },
    "/AutoDeployService/AutoDeploy({autoDeployId})": {
      "delete": {
        "description": "Deletes a AutoDeploy target.\n\nPrivilege: AUTO_DEPLOY_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:autoDeployId",
            "required": true,
            "name": "autoDeployId",
            "in": "path"
          }
        ],
        "tags": [
          "AutoDeployService"
        ],
        "summary": "Deletes an AutoDeploy target.",
        "operationId": "5_AutoDeployService_7548",
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AutoDeployService/Actions/AutoDeployService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAutoDeployDeviceRequest"
              }
            }
          },
          "required": true,
          "description": "update DeleteAutoDeployDeviceRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes a list of AutoDeploy targets specified in the request payload.\n\nPrivilege: AUTO_DEPLOY_MANAGEMENT",
        "tags": [
          "AutoDeployService"
        ],
        "operationId": "6_AutoDeployService_38",
        "summary": "Deletes a list of AutoDeploy targets specified in the request payload."
      }
    },
    "/IdentityPoolService": {
      "get": {
        "description": "This is a root service. It gets all the endpoints for Identity Pool Services.\n\nPrivilege: VIEW",
        "summary": "This is a root service. It gets all the endpoints for Identity Pool Services.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "IdentityPoolService"
        ],
        "operationId": "1_IdentityPoolService_7221"
      }
    },
    "/IdentityPoolService/IdentityPools": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityPool"
              }
            }
          },
          "required": true,
          "description": "update IdentityPool object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/IdentityPoolAddUpdReply"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates an Identity Pool.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "IdentityPoolService"
        ],
        "operationId": "4_IdentityPoolService_123",
        "summary": "Creates an Identity Pool."
      },
      "get": {
        "description": "Gets all the Identity Pools in the appliance.\n\nPrivilege: VIEW",
        "summary": "Gets all the Identity Pools in the appliance.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentityPool"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "IdentityPoolService"
        ],
        "operationId": "2_IdentityPoolService_7389"
      }
    },
    "/IdentityPoolService/IdentityPools({id})": {
      "put": {
        "description": "Updates an Identity Pool.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "id that need to be updated",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Updates a specific Identity Pool.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityPool"
              }
            }
          },
          "required": true,
          "description": "update IdentityPool object"
        },
        "operationId": "5_IdentityPoolService_578",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "description": "Deletes an Identity Pool.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Deletes an Identity Pool.",
        "operationId": "6_IdentityPoolService_6337",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Gets details for a Identity Pool specified by Identity Pool Id.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets details for a Identity Pool specified by Identity Pool Id.",
        "operationId": "3_IdentityPoolService_474",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/IdentityPool"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/IdentityPoolService/Actions/IdentityPoolService.DeleteIdentityPools": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteIdentityPoolsPayload"
              }
            }
          },
          "required": true,
          "description": "update DeleteIdentityPoolsPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes the Identity Pool identified by Identity Pool ID\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "IdentityPoolService"
        ],
        "operationId": "7_IdentityPoolService_1520",
        "summary": "Deletes the Identity Pool identified by Identity Pool ID"
      }
    },
    "/IdentityPoolService/IdentityStates": {
      "get": {
        "description": "Gets the identity states for the identities in an Identity Pool.\n\nPrivilege: VIEW",
        "summary": "Gets the identity states for the identities in an Identity Pool.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentityState"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "IdentityPoolService"
        ],
        "operationId": "8_IdentityPoolService_1523"
      }
    },
    "/IdentityPoolService/IdentityStates({id})": {
      "get": {
        "description": "Gets the details of a specific identity state.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets the details of a specific identity state.",
        "operationId": "9_IdentityPoolService_782",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/IdentityState"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/IdentityPoolService/IdentityPools({identityPoolId})/UsageCounts": {
      "get": {
        "description": "Gets identity usage count info for a specified Identity Pool\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identityPoolId",
            "required": true,
            "name": "identityPoolId",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets identity usage count info for a specified Identity Pool",
        "operationId": "10_IdentityPoolService_3935",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/UsageCounts"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/IdentityPoolService/IdentityPools({identityPoolId})/UsageIdentitySets": {
      "get": {
        "description": "Gets usage identity sets for a specified Identity Pool. Every Identity Pool has the same Identity Sets: Ethernet, iSCSI, FCoE, and FC\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identityPoolId",
            "required": true,
            "name": "identityPoolId",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets usage identity sets for a specified Identity Pool.",
        "operationId": "11_IdentityPoolService_741",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllUsageIdentitySetsExample": {
                    "value": [
                      {
                        "@odata.type": "#IdentityPoolService.UsageIdentitySet",
                        "IdentitySetId": 1,
                        "Details@odata.navigationLink": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(1)/Details",
                        "@odata.id": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(1)",
                        "Name": "Ethernet"
                      },
                      {
                        "@odata.type": "#IdentityPoolService.UsageIdentitySet",
                        "IdentitySetId": 2,
                        "Details@odata.navigationLink": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(2)/Details",
                        "@odata.id": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(2)",
                        "Name": "iSCSI"
                      },
                      {
                        "@odata.type": "#IdentityPoolService.UsageIdentitySet",
                        "IdentitySetId": 3,
                        "Details@odata.navigationLink": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(3)/Details",
                        "@odata.id": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(3)",
                        "Name": "FCoE"
                      },
                      {
                        "@odata.type": "#IdentityPoolService.UsageIdentitySet",
                        "IdentitySetId": 4,
                        "Details@odata.navigationLink": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(4)/Details",
                        "@odata.id": "/api/IdentityPoolService/IdentityPools(1)/UsageIdentitySets(4)",
                        "Name": "FC"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UsageIdentitySet"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/IdentityPoolService/IdentityPools({identityPoolId})/UsageIdentitySets({identitySetId})": {
      "get": {
        "description": "Gets a specific usage identity set for a specified Identity Pool.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identityPoolId",
            "required": true,
            "name": "identityPoolId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identitySetId",
            "required": true,
            "name": "identitySetId",
            "in": "path"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets a specific usage identity set for a specified Identity Pool.",
        "operationId": "12_IdentityPoolService_2042",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/UsageIdentitySet"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/IdentityPoolService/IdentityPools({identityPoolId})/UsageIdentitySets({identitySetId})/Details": {
      "get": {
        "description": "Gets identity details for a specified Identity Pool and Identity Set.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identityPoolId",
            "required": true,
            "name": "identityPoolId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:identitySetId",
            "required": true,
            "name": "identitySetId",
            "in": "path"
          },
          {
            "schema": {
              "enum": [
                "Status",
                "Status desc",
                "MacAddress",
                "MacAddress desc",
                "MacAddressState",
                "MacAddressState desc",
                "IscsiIqn",
                "IscsiIqn desc",
                "IscsiInitiatorIp",
                "IscsiInitiatorIp desc",
                "IscsiIqnState",
                "IscsiIqnState desc",
                "IscsiInitiatorIpState",
                "IscsiInitiatorIpState desc",
                "Wwnn",
                "Wwnn desc",
                "Wwpn",
                "Wwpn desc",
                "WwnnState",
                "WwnnState desc",
                "WwpnState",
                "WwpnState desc",
                "DeviceInfo/ChassisName",
                "DeviceInfo/ChassisName desc",
                "DeviceInfo/SlotNumber",
                "DeviceInfo/SlotNumber desc",
                "DeviceInfo/ServerName",
                "DeviceInfo/ServerName desc",
                "DeviceInfo/ManagementIp",
                "DeviceInfo/ManagementIp desc",
                "NicIdentifier",
                "NicIdentifier desc",
                "ProfileName",
                "ProfileName desc",
                "HasConflict",
                "HasConflict desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "IdentityPoolService"
        ],
        "summary": "Gets identity details for a specified Identity Pool and Identity Set.",
        "operationId": "13_IdentityPoolService_8226",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getUsageIdentitySetDetailsExample": {
                    "value": [
                      {
                        "Wwnn": null,
                        "MacAddressConflict": false,
                        "IdentitySetId": 1,
                        "NicIdentifier": "NIC Mezzanine 1A Port 1 Partition 2",
                        "ProfileId": 10149,
                        "@odata.type": "#IdentityPoolService.UsageDetail",
                        "MacAddress": "AA:BB:CC:DD:EE:FF",
                        "WwpnConflict": false,
                        "IscsiIqnState": 0,
                        "IscsiIqnConflict": false,
                        "BaseEntityId": 0,
                        "TypeofDataSchemaFunction": 1,
                        "WwpnState": 0,
                        "Status": 1,
                        "WwnnState": 0,
                        "HasConflict": false,
                        "WwnnConflict": false,
                        "IscsiInitiatorIpState": 0,
                        "Wwpn": null,
                        "IscsiInitiatorIp": null,
                        "MacAddressState": 1,
                        "IscsiInitiatorIpConflict": false,
                        "DeviceInfo": {
                          "ServerName": null,
                          "ManagementIp": null,
                          "SlotNumber": null,
                          "ChassisName": null
                        },
                        "IscsiIqn": null,
                        "ProfileName": "Profile 00002",
                        "UsageTypeId": 0
                      },
                      {
                        "Wwnn": null,
                        "MacAddressConflict": false,
                        "IdentitySetId": 1,
                        "NicIdentifier": "NIC Mezzanine 1A Port 1 Partition 3",
                        "ProfileId": 10149,
                        "@odata.type": "#IdentityPoolService.UsageDetail",
                        "MacAddress": "AA:BB:CC:DD:EF:00",
                        "WwpnConflict": false,
                        "IscsiIqnState": 0,
                        "IscsiIqnConflict": false,
                        "BaseEntityId": 0,
                        "TypeofDataSchemaFunction": 1,
                        "WwpnState": 0,
                        "Status": 1,
                        "WwnnState": 0,
                        "HasConflict": false,
                        "WwnnConflict": false,
                        "IscsiInitiatorIpState": 0,
                        "Wwpn": null,
                        "IscsiInitiatorIp": null,
                        "MacAddressState": 1,
                        "IscsiInitiatorIpConflict": false,
                        "DeviceInfo": {
                          "ServerName": null,
                          "ManagementIp": null,
                          "SlotNumber": null,
                          "ChassisName": null
                        },
                        "IscsiIqn": null,
                        "ProfileName": "Profile 00002",
                        "UsageTypeId": 0
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UsageDetail"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountService"
              }
            }
          },
          "required": true,
          "description": "update AccountService object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountService"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Updates account-level configurations for the accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "2_AccountService_2789",
        "summary": "Updates account-level configurations for the accounts"
      },
      "get": {
        "description": "Returns the account level configuration for the user accounts\n\nPrivilege: VIEW",
        "summary": "This is a root service. It gets all the endpoints for user accounts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountService"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "1_AccountService_4362"
      }
    },
    "/AccountService/Accounts": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Creates an account\n\nNote: Poweredge Servers have a limit of 64 user accounts.\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "6_AccountService_3228",
        "summary": "URI to create an account"
      },
      "get": {
        "description": "Returns the collection of accounts\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-UserName,IsVisible",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "Returns the collection of accounts",
        "operationId": "3_AccountService_3156",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/Accounts({id})": {
      "delete": {
        "description": "Deletes an account\n\nPrivilege: SECURITY_SETUP",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "URI to delete an account",
        "operationId": "8_AccountService_2460",
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Returns the details of a specific account\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "Returns the details of a specific account",
        "operationId": "4_AccountService_1526",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/Accounts({permissionId})/Permissions": {
      "get": {
        "description": "Lists the permissions for an account\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:permissionId",
            "required": true,
            "name": "permissionId",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "Lists the permissions for an account",
        "operationId": "5_AccountService_6254",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PermissionResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/Accounts(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Updates the settings for an account\n\nPrivilege: VIEW",
        "tags": [
          "AccountService"
        ],
        "operationId": "7_AccountService_4501",
        "summary": "URI to update the account settings"
      }
    },
    "/AccountService/Actions/EID_674AccountService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "9_AccountService_2118",
        "summary": "URI to Delete multiple accounts"
      }
    },
    "/AccountService/Actions/AccountService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "10_AccountService_7381",
        "summary": "URI to delete multiple accounts"
      }
    },
    "/AccountService/Actions/EID_674AccountService.Enable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Enables multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "11_AccountService_1803",
        "summary": "URI to enable multiple accounts"
      }
    },
    "/AccountService/Actions/AccountService.Enable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Enables multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "12_AccountService_5825",
        "summary": "URI to enable multiple accounts"
      }
    },
    "/AccountService/Actions/EID_674AccountService.Disable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Disables multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "13_AccountService_5304",
        "summary": "URI to disable multiple accounts"
      }
    },
    "/AccountService/Actions/AccountService.Disable": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountListModel"
              }
            }
          },
          "required": true,
          "description": "update AccountListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Disables multiple accounts\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "14_AccountService_6282",
        "summary": "POST call for AccountService"
      }
    },
    "/AccountService/Actions/EID_674AccountService.GetPrivileges": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivilegeRequest"
              }
            }
          },
          "required": true,
          "description": "update PrivilegeRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PrivilegeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets the account privileges\n\nPrivilege: VIEW",
        "tags": [
          "AccountService"
        ],
        "operationId": "15_AccountService_9362",
        "summary": "URI to disable multiple accounts"
      }
    },
    "/AccountService/Actions/AccountService.GetPrivileges": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrivilegeRequest"
              }
            }
          },
          "required": true,
          "description": "update PrivilegeRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PrivilegeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets the account privileges\n\nPrivilege: VIEW",
        "tags": [
          "AccountService"
        ],
        "operationId": "16_AccountService_7410",
        "summary": "URI to get the account privileges"
      }
    },
    "/AccountService/Actions/EID_674AccountService.GetPrivilegesForUser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPrivilegeRequest"
              }
            }
          },
          "required": true,
          "description": "update UserPrivilegeRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PrivilegeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets the user privileges\n\nPrivilege: VIEW",
        "tags": [
          "AccountService"
        ],
        "operationId": "17_AccountService_9603",
        "summary": "URI to get the account privileges"
      }
    },
    "/AccountService/Actions/AccountService.GetPrivilegesForUser": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPrivilegeRequest"
              }
            }
          },
          "required": true,
          "description": "update UserPrivilegeRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PrivilegeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets the user privileges\n\nPrivilege: VIEW",
        "tags": [
          "AccountService"
        ],
        "operationId": "18_AccountService_1008",
        "summary": "URI to get the user privileges"
      }
    },
    "/AccountService/Actions/EID_674AccountService.ImportExternalAccountProvider": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountList": {
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This method imports a Group and adds to the user list\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "19_AccountService_1139",
        "summary": "URI to import a group and add to the user list"
      }
    },
    "/AccountService/Actions/AccountService.ImportExternalAccountProvider": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "accountList": {
                    "items": {
                      "$ref": "#/components/schemas/Account"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This method imports a Group and adds to the user list\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "20_AccountService_3932",
        "summary": "URI to import a group and add to the user list"
      }
    },
    "/AccountService/Actions/AccountService.GetUserDetail": {
      "post": {
        "description": "Returns the details of the user\n\nPrivilege: VIEW",
        "summary": "URI to get the details of a User",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountBasicResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "21_AccountService_8629"
      }
    },
    "/AccountService/Roles": {
      "get": {
        "description": "Returns a list of user roles and respective privileges\n\nPrivilege: VIEW",
        "summary": "URI to get the list of user roles and respective privileges",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "22_AccountService_9598"
      }
    },
    "/AccountService/Roles({id})": {
      "get": {
        "description": "This URI represents the details of a user role\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "URI to get the details of a user role",
        "operationId": "23_AccountService_1186",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/Accounts({userId})/Scope": {
      "get": {
        "description": "Returns all groups within the scope of the specific user\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:userId",
            "required": true,
            "name": "userId",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "24_AccountService_965",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GetScopeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Unauthorized User for this API"
          },
          "404": {
            "content": {},
            "description": "Invalid User Id"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/AccountService/Actions/AccountService.SetScope": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScopeRequest"
              }
            }
          },
          "required": true,
          "description": "update ScopeRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Unauthorized User for this API"
          },
          "404": {
            "content": {},
            "description": "Invalid User Id"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "description": "Sets the scope for a scope capable user.\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "25_AccountService_9332",
        "summary": "POST call for AccountService"
      }
    },
    "/AccountService/Actions/AccountService.GetUsersForOwnershipTransfer": {
      "post": {
        "description": "Gets the list of users for the ownership transfer.\n\nPrivilege: SECURITY_SETUP",
        "summary": "POST call for AccountService",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UsersForOwnershipTransferResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Unauthorized User for this API"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "26_AccountService_5721"
      }
    },
    "/AccountService/Actions/AccountService.TransferOwnership": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferEntityOwnershipRequest"
              }
            }
          },
          "required": true,
          "description": "update TransferEntityOwnershipRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Unauthorized User for this API"
          },
          "404": {
            "content": {},
            "description": "Invalid User Id"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "description": "Transfers the entities from source user to target user.\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "27_AccountService_7373",
        "summary": "POST call for AccountService"
      }
    },
    "/RedfishAccountService": {
      "get": {
        "description": "GET call for AccountService",
        "summary": "GET call for AccountService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "29_AccountService_7091"
      }
    },
    "/RedfishAccountService/Accounts": {
      "get": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Members"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "31_AccountService_7007",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/RedfishAccountService/Accounts/Members": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Creates an account\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "34_AccountService_6317",
        "summary": "POST call for AccountService"
      },
      "get": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-UserName,IsVisible",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "32_AccountService_4713",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/RedfishAccountService/Accounts/Members({id})": {
      "delete": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "DELETE call for AccountService",
        "operationId": "36_AccountService_8970",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Returns the details of a specific account\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "33_AccountService_4818",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/RedfishAccountService/Accounts/Members(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          },
          "required": true,
          "description": "update Account object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "AccountService"
        ],
        "operationId": "35_AccountService_6943",
        "summary": "PUT call for AccountService"
      }
    },
    "/RedfishAccountService/Roles": {
      "get": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Members"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "37_AccountService_6026",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/RedfishAccountService/Roles/Members": {
      "get": {
        "description": "Dummy_Description",
        "summary": "GET call for AccountService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "38_AccountService_7337"
      }
    },
    "/RedfishAccountService/Roles/Members({id})": {
      "get": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "GET call for AccountService",
        "operationId": "39_AccountService_5659",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/ExternalAccountProvider/OpenIDConnectProvider": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServer"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServer object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "createOIDCProviderExample": {
                    "value": [
                      {
                        "DiscoveryURI": "Discovery URI of OpenID Server",
                        "UserName": "username",
                        "AuthType": "USERNAME",
                        "Name": "OpenID Provider Name",
                        "Enabled": true,
                        "Password": "password",
                        "CertificateFile": "Content of TrustStore File"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServer"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Create a new OpenID Provider\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "42_AccountService_3466",
        "summary": "Create a new OpenID Provider"
      },
      "get": {
        "description": "Returns all the OpenID Providers that are created in the appliance.\n\nPrivilege: VIEW",
        "summary": "Returns all the OpenID Providers that are created in the appliance.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllOIDCProvidersExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "@odata.type": "#ExternalAccountProvider.OIDCAuthorizationServer",
                          "DiscoveryURI": "Discovery URI of OpenID Server",
                          "AuthType": "USERNAME",
                          "Name": "Test-OIDC",
                          "RegisteredBy": "9cf4a8ee-b48b-449c-b7f2-5d6885ab0a4d",
                          "Enabled": true,
                          "@odata.id": "/api/AccountService/ExternalAccountProvider/OpenIDConnectProvider(63)",
                          "UserName": null,
                          "Token": null,
                          "RegistrationStatus": "SUCCESSFUL",
                          "ClientId": "0c49faa4-7767-4bb3-9463-d9fb02e9b860",
                          "UniqueId": "063bb594-29b8-4c0b-ae4a-1c7f88355cfa",
                          "Password": null,
                          "CertificateFile": null,
                          "Id": 63
                        },
                        {
                          "@odata.type": "#ExternalAccountProvider.OIDCAuthorizationServer",
                          "DiscoveryURI": "Discovery URI of OpenID Server",
                          "AuthType": "USERNAME",
                          "Name": "Test-OIDC2",
                          "RegisteredBy": "9cf4a8ee-b48b-449c-b7f2-5d6885ab0a4d",
                          "Enabled": true,
                          "@odata.id": "/api/AccountService/ExternalAccountProvider/OpenIDConnectProvider(65)",
                          "UserName": null,
                          "Token": null,
                          "RegistrationStatus": "SUCCESSFUL",
                          "ClientId": "694075ca-71ed-47c4-aecf-5a44c8d2d53c",
                          "UniqueId": "b840a1de-7802-4d3e-a70d-43cadacee4d2",
                          "Password": null,
                          "CertificateFile": null,
                          "Id": 65
                        },
                        {
                          "@odata.type": "#ExternalAccountProvider.OIDCAuthorizationServer",
                          "DiscoveryURI": "Discovery URI of OpenID Server",
                          "AuthType": "USERNAME",
                          "Name": "Token-OIDC",
                          "RegisteredBy": "9cf4a8ee-b48b-449c-b7f2-5d6885ab0a4d",
                          "Enabled": true,
                          "@odata.id": "/api/AccountService/ExternalAccountProvider/OpenIDConnectProvider(64)",
                          "UserName": null,
                          "Token": null,
                          "RegistrationStatus": "SUCCESSFUL",
                          "ClientId": "06444e24-5cc3-4802-98fc-ffc6f7f5d714",
                          "UniqueId": "e418c9f1-d34a-4ee7-8018-bb6a74555435",
                          "Password": null,
                          "CertificateFile": null,
                          "Id": 64
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(ExternalAccountProvider.OIDCAuthorizationServer)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServer"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AccountService"
        ],
        "operationId": "40_AccountService_6779"
      }
    },
    "/AccountService/ExternalAccountProvider/OpenIDConnectProvider({oidcAuthorizationServerId})": {
      "get": {
        "description": "Return the OpenID Provider based on given OpenID ProviderID\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:oidcAuthorizationServerId",
            "required": true,
            "name": "oidcAuthorizationServerId",
            "in": "path"
          }
        ],
        "tags": [
          "AccountService"
        ],
        "summary": "Return the OpenID Provider based on given OpenID ProviderID",
        "operationId": "41_AccountService_8975",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getOIDCProviderExample": {
                    "value": [
                      {
                        "@odata.type": "#ExternalAccountProvider.OIDCAuthorizationServer",
                        "DiscoveryURI": "Discovery URI of OpenID Server",
                        "AuthType": "USERNAME",
                        "Name": "Test-OIDC",
                        "UserName": null,
                        "RegisteredBy": "9cf4a8ee-b48b-449c-b7f2-5d6885ab0a4d",
                        "Enabled": true,
                        "@odata.id": "/api/AccountService/ExternalAccountProvider/OpenIDConnectProvider(63)",
                        "@odata.context": "/api/$metadata#ExternalAccountProvider.OIDCAuthorizationServer",
                        "Token": null,
                        "RegistrationStatus": "SUCCESSFUL",
                        "ClientId": "0c49faa4-7767-4bb3-9463-d9fb02e9b860",
                        "UniqueId": "063bb594-29b8-4c0b-ae4a-1c7f88355cfa",
                        "Password": null,
                        "CertificateFile": null,
                        "Id": 63
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServer"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.TestOIDCProvider": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServer"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServer object"
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "examples": {
                  "testOpenIDProviderExample": {
                    "value": [
                      {
                        "DiscoveryURI": "Discovery URI of OpenID Server",
                        "UserName": "username",
                        "AuthType": "USERNAME",
                        "Name": "OpenID Provider Name",
                        "Enabled": true,
                        "Password": "password",
                        "CertificateFile": "Content of TrustStore File"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServer"
                  }
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "To test OpenID Provider Discovery URI connection\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "43_AccountService_9843",
        "summary": "To test OpenID Provider Discovery URI connection"
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.TestOIDCProviderRegistrationStatus": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServerIds object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Check OpenID Provider registration status\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "44_AccountService_952",
        "summary": "Check OpenID Provider registration status"
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.DeleteOIDCProviders": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServerIds object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "deleteOIDCProviderExample": {
                    "value": [
                      {
                        "IncludeAllIds": true,
                        "OidcServerIds": [
                          1,
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Delete OpenID Provider\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "45_AccountService_7355",
        "summary": "Delete OpenID Provider"
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.DisableOIDCProviders": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServerIds object"
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "examples": {
                  "disableOIDCProviderExample": {
                    "value": [
                      {
                        "IncludeAllIds": true,
                        "OidcServerIds": [
                          1,
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
                  }
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Disable OpenID Provider\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "46_AccountService_9683",
        "summary": "Disable OpenID Provider"
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.EnableOIDCProviders": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServerIds object"
        },
        "responses": {
          "204": {
            "content": {
              "application/json": {
                "examples": {
                  "enableOIDCProviderExample": {
                    "value": [
                      {
                        "IncludeAllIds": true,
                        "OidcServerIds": [
                          1,
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
                  }
                }
              }
            },
            "description": "No Content"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Enable OpenID Provider\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "47_AccountService_2858",
        "summary": "Enable OpenID Provider"
      }
    },
    "/AccountService/ExternalAccountProvider/Actions/ExternalAccountProvider.OidcCertificate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServerIds object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getOidcCertificateExample": {
                    "value": [
                      {
                        "IncludeAllIds": true,
                        "OidcServerIds": [
                          1,
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServerIds"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Fetch OpenID Provider Certificate information\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "48_AccountService_1938",
        "summary": "Fetch OpenID Provider Certificate information"
      }
    },
    "/AccountService/ExternalAccountProvider/OpenIDConnectProvider(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OIDCAuthorizationServer"
              }
            }
          },
          "required": true,
          "description": "update OIDCAuthorizationServer object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "editOIDCProviderExample": {
                    "value": [
                      {
                        "DiscoveryURI": "Discovery URI of OpenID Server",
                        "UserName": "username",
                        "AuthType": "USERNAME",
                        "Name": "OpenID Provider Name",
                        "Enabled": true,
                        "Password": "password",
                        "CertificateFile": "Content of TrustStore File",
                        "Id": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OIDCAuthorizationServer"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Edit given OpenID Provider\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "AccountService"
        ],
        "operationId": "49_AccountService_7630",
        "summary": "Edit given OpenID Provider"
      }
    },
    "/ApplicationService": {
      "get": {
        "description": "Get all the endpoints for Application Service\n\nPrivilege: VIEW",
        "summary": "Get all the endpoints for Application Service",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "32_ApplicationService_6907"
      }
    },
    "/ApplicationService/Network": {
      "get": {
        "description": "This URI represents the collection of network application services.\n\nPrivilege: VIEW",
        "summary": "This URI represents the collection of network application services.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "2_ApplicationService_3470"
      }
    },
    "/ApplicationService/Certificate": {
      "get": {
        "description": "This URI represents the certificates resource.\n\nPrivilege: VIEW",
        "summary": "This URI represents the certificates resource.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CertInfo"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "3_ApplicationService_4132"
      }
    },
    "/ApplicationService/Actions/ApplicationService.GenerateCSR": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertDetail"
              }
            }
          },
          "required": true,
          "description": "update CertDetail object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This URI represents the resource for Certificate Signing Requests.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "4_ApplicationService_5523",
        "summary": "This URI represents the resource for Certificate Signing Requests."
      }
    },
    "/ApplicationService/Actions/ApplicationService.UploadCertificate": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "description": "This URI allows you to upload certificates.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "5_ApplicationService_8372",
        "summary": "This URI allows you to upload certificates."
      }
    },
    "/ApplicationService/Network/ProxyConfiguration": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProxyDetails"
              }
            }
          },
          "required": true,
          "description": "update ProxyDetails object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProxyDetails"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "API for updating proxy configuration\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "7_ApplicationService_1250",
        "summary": "API for updating proxy configuration"
      },
      "get": {
        "description": "This API returns  proxy configuration settings\n\nPrivilege: VIEW",
        "summary": "This API returns proxy configuration settings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProxyDetails"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "6_ApplicationService_5838"
      }
    },
    "/ApplicationService/Network/TimeZones": {
      "get": {
        "description": "This API returns different time zone configurations supported by system\n\nPrivilege: VIEW",
        "summary": "This API returns different time zone configurations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getApplianceTZs": {
                    "value": {
                      "@odata.count": 96,
                      "value": [
                        {
                          "@odata.type": "#Network.TimeZone",
                          "Id": "TZ_ID_38",
                          "Utcoffsetminutes": 60,
                          "Name": "(GMT+01:00) Brussels, Copenhagen, Madrid, Paris"
                        },
                        {
                          "@odata.type": "#Network.TimeZone",
                          "Id": "TZ_ID_39",
                          "Utcoffsetminutes": 60,
                          "Name": "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(Network.TimeZone)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TimeZone"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "8_ApplicationService_6320"
      }
    },
    "/ApplicationService/Network/TimeConfiguration": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeDetails"
              }
            }
          },
          "required": true,
          "description": "update TimeDetails object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TimeDetails"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "API for updating time related configurations\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "10_ApplicationService_2230",
        "summary": "API for updating time related configurations"
      },
      "get": {
        "description": "This API returns the current time configurations\n\nPrivilege: VIEW",
        "summary": "This API returns the current time configurations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TimeDetails"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "9_ApplicationService_3845"
      }
    },
    "/ApplicationService/AuditLogs": {
      "get": {
        "description": "This API returns Audit logs from the system\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Severity,Category,CreatedDateBegin,CreatedDateEnd,UserName,IpAddress,Message,IdBegin,IdEnd,MessageID",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Severity",
                "Severity desc",
                "Category",
                "Category desc",
                "CreatedDateBegin",
                "CreatedDateBegin desc",
                "CreatedDateEnd",
                "CreatedDateEnd desc",
                "UserName",
                "UserName desc",
                "IpAddress",
                "IpAddress desc",
                "Message",
                "Message desc",
                "Id",
                "Id desc",
                "MessageID",
                "MessageID desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "ApplicationService"
        ],
        "summary": "This API returns Audit logs from the system",
        "operationId": "11_ApplicationService_9637",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAuditLogsEx": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#ApplicationService.AuditLog",
                          "Category": "Configuration",
                          "Severity": "1000",
                          "CreatedDate": "2019-08-12T19:40:32.252Z",
                          "@odata.id": "/api/ApplicationService/AuditLogs(69)",
                          "UserName": "root",
                          "MessageArgs": "[]",
                          "MessageID": "CDEV9998",
                          "Message": "Date and time change operation has been initiated.",
                          "IpAddress": "10.135.64.73",
                          "Id": 69
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(ApplicationService.AuditLog)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditLogMessage"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ApplicationService/AuditLogs({auditLogId})": {
      "get": {
        "description": "This API returns Audit logs for the specific  audit log id specified\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:auditLogId",
            "required": true,
            "name": "auditLogId",
            "in": "path"
          }
        ],
        "tags": [
          "ApplicationService"
        ],
        "summary": "This API returns Audit logs for the specific audit log id specified",
        "operationId": "12_ApplicationService_7728",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAuditLog": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.AuditLog",
                        "Category": "Configuration",
                        "Severity": "1000",
                        "UserName": "root",
                        "CreatedDate": "2019-08-12T19:40:32.252Z",
                        "@odata.id": "/api/ApplicationService/AuditLogs(69)",
                        "@odata.context": "/api/$metadata#ApplicationService.AuditLog",
                        "MessageArgs": "[]",
                        "MessageID": "CDEV9998",
                        "Message": "Date and time change operation has been initiated.",
                        "IpAddress": "10.135.64.73",
                        "Id": 69
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditLogMessage"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ApplicationService/AuditLogCategories": {
      "get": {
        "description": "This API returns  different audit log categories supported by system\n\nPrivilege: VIEW",
        "summary": "This API returns  different audit log categories supported by system",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAuditLogCategories": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.AuditLogCategories",
                        "Name": "Application",
                        "CategoriesDetails": [
                          {
                            "SubCategoryDetails": [
                              {
                                "Prefix": "CDEV",
                                "Name": "CDEV",
                                "Description": ""
                              },
                              {
                                "Prefix": "CAPP",
                                "Name": "CAPP",
                                "Description": ""
                              },
                              {
                                "Prefix": "CJOB",
                                "Name": "CJOB",
                                "Description": ""
                              },
                              {
                                "Prefix": "CTEM",
                                "Name": "CTEM",
                                "Description": ""
                              }
                            ],
                            "Name": "Configuration",
                            "CatalogName": ""
                          },
                          {
                            "SubCategoryDetails": [
                              {
                                "Prefix": "CUSR",
                                "Name": "CUSR",
                                "Description": ""
                              }
                            ],
                            "Name": "Audit",
                            "CatalogName": ""
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditLogCategoriesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "13_ApplicationService_5384"
      }
    },
    "/ApplicationService/Info": {
      "get": {
        "description": "This API returns product information\n\nPrivilege: VIEW",
        "summary": "This API returns product information",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApplicationInfoModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "14_ApplicationService_5283"
      }
    },
    "/ApplicationService/Capabilities": {
      "get": {
        "description": "This API returns the capabilities  of the  management module\n\nPrivilege: VIEW",
        "summary": "This API returns the capabilities  of the  management module",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getApplicationCapabilities": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.Capability",
                        "Name": "SERVER_PORTS_NIC_TEAMING",
                        "Description": "Capability bit to indicate that provided MX chassis supports server ports NIC teaming."
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApplicationCapabilityModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "15_ApplicationService_1077"
      }
    },
    "/ApplicationService/Settings": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplianceSettings"
              }
            }
          },
          "required": true,
          "description": "update ApplianceSettings object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "setConsoleSetting": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.ConsoleSetting",
                        "Name": "TASK_PROGRESS_PERCENT_FOR_SUB_TASKS",
                        "DataType": "java.lang.Integer",
                        "DefaultValue": "100",
                        "Value": "100",
                        "GroupName": ""
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsoleSetting"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API supports updating application settings\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "17_ApplicationService_7372",
        "summary": "This API supports updating application settings"
      },
      "get": {
        "description": "This API returns application settings information.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Name,GroupName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ],
        "summary": "This API returns application settings information.",
        "operationId": "16_ApplicationService_7753",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getConsoleSetting": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.ConsoleSetting",
                        "Name": "TASK_PROGRESS_PERCENT_FOR_SUB_TASKS",
                        "DataType": "java.lang.Integer",
                        "DefaultValue": "100",
                        "Value": "100",
                        "GroupName": ""
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsoleSetting"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ApplicationService/Actions/ApplicationService.RestoreFactorySetting": {
      "post": {
        "description": "API to rest the application settings to factory default\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "API to rest the application settings to factory default",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "18_ApplicationService_4803"
      }
    },
    "/ApplicationService/Actions/ApplicationService.ResetApplication": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetConfiguration"
              }
            }
          },
          "required": true,
          "description": "update ResetConfiguration object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API allows to reset data or reset the settings to default\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "19_ApplicationService_9402",
        "summary": "This API allows to reset data or reset the settings to default"
      }
    },
    "/ApplicationService/Security": {
      "get": {
        "description": "Get all the endpoints for Security\n\nPrivilege: VIEW",
        "summary": "Get all the endpoints for Security",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "20_ApplicationService_1617"
      }
    },
    "/ApplicationService/Security/SecurityConfiguration": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FIPSModeConfiguration"
              }
            }
          },
          "required": true,
          "description": "update FIPSModeConfiguration object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "setFIPSMode": {
                    "value": [
                      {
                        "FipsMode": "ON",
                        "SettingType": null
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FIPSModeConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API allows user to enable or disable FIPS mode\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "22_ApplicationService_108",
        "summary": "This API allows user to enable or disable FIPS mode"
      },
      "get": {
        "description": "This API returns security configuration\n\nPrivilege: VIEW",
        "summary": "This API returns security configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getFIPSMode": {
                    "value": [
                      {
                        "@odata.type": "#ApplicationService.FIPSModeConfiguration",
                        "FipsMode": "OFF",
                        "FipsVersion": "DELL OpenSSL Cryptographic Library v2.4"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FIPSModeConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "21_ApplicationService_522"
      }
    },
    "/ApplicationService/Network/WebServerConfiguration": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebServerConfiguration"
              }
            }
          },
          "required": true,
          "description": "update WebServerConfiguration object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "setWebServerConfiguration": {
                    "value": [
                      {
                        "EnableWebServer": true,
                        "PortNumber": 443,
                        "TimeOut": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebServerConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API allows  to update web server configurations\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "24_ApplicationService_3667",
        "summary": "This API allows  to update web server configurations"
      },
      "get": {
        "description": "This API returns web server configuration\n\nPrivilege: VIEW",
        "summary": "This API returns web server configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getWebServerConfiguration": {
                    "value": [
                      {
                        "@odata.type": "#Network.WebServerConfiguration",
                        "EnableWebServer": true,
                        "PortNumber": 443,
                        "TimeOut": 30
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WebServerConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "23_ApplicationService_5220"
      }
    },
    "/ApplicationService/Actions/ApplicationService.ActivateBrand": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandModel"
              }
            }
          },
          "required": true,
          "description": "update BrandModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API allows you to change the branding between the default brand or de-branded.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "25_ApplicationService_4662",
        "summary": "This API allows you to change the branding between the default brand or de-branded."
      }
    },
    "/ApplicationService/Actions/ApplicationService.PerformBrandUpdate": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API Allows the user to update the current brand settings\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "26_ApplicationService_2410",
        "summary": "This API Allows the user to update the current brand settings"
      }
    },
    "/ApplicationService/Actions/ApplicationService.BrandInfo": {
      "post": {
        "description": "This API returns current Brand settings\n\nPrivilege: VIEW",
        "summary": "This API returns current Brand settings",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getBrandInfo": {
                    "value": [
                      {
                        "LicenseInfo": "info/license.html",
                        "ProductDescription": "7U Modular Chassis Platform",
                        "BrowserTitle": "modularBrowseTitle",
                        "Copyright": "copyright",
                        "LoginIconPath": "img/dell_halo_logo_160px.png",
                        "MastheadIconPath": "ci ci-chassis-config-core",
                        "ManagementURI": "/management/uri/path",
                        "ProductName": "PowerEdge MX7000",
                        "Theme": "",
                        "BrandName": "Dell",
                        "OpenSourceLicenseInfo": "info/OpenSourceLicenseInfo.txt",
                        "ProductLogo": "img/Dell_EMC.png",
                        "SupportURI": "support.dell.com",
                        "ConsoleTitle": "modularConsoleTitle",
                        "ConsoleName": "modularConsoleTitle",
                        "CompanyLogo": "img/Dell_EMC.png",
                        "Manufacturer": "Dell Inc"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BrandInfoModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "27_ApplicationService_8360"
      }
    },
    "/ApplicationService/Actions/ApplicationService.GetSecurityPolicyMessage": {
      "post": {
        "description": "This API returns the Security Policy Message for the login page\n\nPrivilege: VIEW",
        "summary": "This API returns the Security Policy Message for the login page",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SecurityPolicyMessageModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "28_ApplicationService_8719"
      }
    },
    "/ApplicationService/Actions/ApplicationService.SetSecurityPolicyMessage": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityPolicyMessageModel"
              }
            }
          },
          "required": true,
          "description": "update SecurityPolicyMessageModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SecurityPolicyMessageModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API sets the Security Policy Message for the login page\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "29_ApplicationService_112",
        "summary": "This API sets the Security Policy Message for the login page"
      }
    },
    "/ApplicationService/Actions/ApplicationService.GetSSHSecurityMessage": {
      "post": {
        "description": "Get the security policy message for the SSH login\n\nPrivilege: VIEW",
        "summary": "This API returns the Security Policy Message for the SSH login",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ApplicationService"
        ],
        "operationId": "30_ApplicationService_6986"
      }
    },
    "/ApplicationService/Actions/ApplicationService.SetSSHSecurityMessage": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSHSecurityMessageModel"
              }
            }
          },
          "required": true,
          "description": "update SSHSecurityMessageModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Set the security policy message for the SSH login\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "31_ApplicationService_7909",
        "summary": "This API sets the Security Policy Message for the SSH login"
      }
    },
    "/ApplicationService/Actions/ApplicationService.UpdateShareTypeSettings": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplianceSettings"
              }
            }
          },
          "required": true,
          "description": "update ApplianceSettings object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates the share type settings\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ApplicationService"
        ],
        "operationId": "33_ApplicationService_6737",
        "summary": "Updates the share type settings"
      }
    },
    "/NetworkConfigurationService": {
      "get": {
        "description": "Returns a list of URIs List available to access the network service and the associated actions\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Networks"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "Returns a list of URIs List available to access the network service and the associated actions.",
        "operationId": "1_NetworkConfigurationService_9534",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/NetworkConfigurationService/Networks": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkModel"
              }
            }
          },
          "required": true,
          "description": "update NetworkModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a network.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "4_NetworkConfigurationService_9661",
        "summary": "This method creates a network."
      },
      "get": {
        "description": "Returns a list of available logical networks.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,VlanMaximum,VlanMinimum,VlanMinimumBegin,VlanMaximumEnd,Type,InternalRefNWUUId",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Name",
                "Name desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "This URI represents the logical networks.",
        "operationId": "2_NetworkConfigurationService_7242",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        }
      }
    },
    "/NetworkConfigurationService/Networks({id})": {
      "delete": {
        "description": "Deletes a network.\n\nPrivilege: NETWORK_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "This method deletes a network from the system.",
        "operationId": "6_NetworkConfigurationService_1900",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "description": "Returns the details of a specific network.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "This URI represents a specific network within the collection.",
        "operationId": "3_NetworkConfigurationService_9098",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        }
      }
    },
    "/NetworkConfigurationService/Networks(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkModel"
              }
            }
          },
          "required": true,
          "description": "update NetworkModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates a network.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "5_NetworkConfigurationService_3530",
        "summary": "This method updates an existing network."
      }
    },
    "/NetworkConfigurationService/Actions/NetworkConfigurationService.RemoveNetworks": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update NetworkRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes the existing Networks in the system.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "7_NetworkConfigurationService_1979",
        "summary": "This method deletes an existing network."
      }
    },
    "/NetworkConfigurationService/NetworkTypes": {
      "get": {
        "description": "Returns a list of network types.\n\nPrivilege: VIEW",
        "summary": "This method returns a list of the supported network types.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkTypeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "8_NetworkConfigurationService_1296"
      }
    },
    "/NetworkConfigurationService/NetworkTypes({id})": {
      "get": {
        "description": "Returns the details of a specific network type.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "This method returns the details of a specific network type.",
        "operationId": "9_NetworkConfigurationService_8433",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/NetworkTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        }
      }
    },
    "/NetworkConfigurationService/QosTypes": {
      "get": {
        "description": "Returns the supported QoS.\n\nPrivilege: VIEW",
        "summary": "This method returns the types of Quality-of-Service (QoS) that the system supports.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QosTypeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "10_NetworkConfigurationService_532"
      }
    },
    "/NetworkConfigurationService/QosTypes({id})": {
      "get": {
        "description": "Returns a specific QoS type.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "NetworkConfigurationService"
        ],
        "summary": "This method returns a specific QoS type.",
        "operationId": "11_NetworkConfigurationService_9426",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QosTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        }
      }
    },
    "/NetworkConfigurationService/Actions/NetworkConfigurationService.ValidateNetworkDefinitionFile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vLANModels": {
                    "items": {
                      "$ref": "#/components/schemas/VLANModel"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update VLANModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VlanValidationReportModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Validates the network profiles that you want to import.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "12_NetworkConfigurationService_5674",
        "summary": "This method validates the network profiles that you want to import."
      }
    },
    "/NetworkConfigurationService/Actions/NetworkConfigurationService.ImportVLANDefinitions": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "vLANModels": {
                    "items": {
                      "$ref": "#/components/schemas/VLANModel"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update VLANModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Imports all network profiles.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "13_NetworkConfigurationService_6013",
        "summary": "This method imports all network profiles."
      }
    },
    "/NetworkConfigurationService/Actions/NetworkConfigurationService.ExportVLANDefinitions": {
      "post": {
        "description": "This method exports all network profiles.\n\nPrivilege: VIEW",
        "summary": "Exports all network profiles.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VLANModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "14_NetworkConfigurationService_6202"
      }
    },
    "/NetworkConfigurationService/ReplicableChassisSettings": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicableChassisSettingsRequestModel"
              }
            }
          },
          "required": true,
          "description": "update ReplicableChassisSettingsRequestModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReplicableChassisSettingsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates the chassis time settings configuration and alert destination configuration   and applies on the IOM device.\n\nPrivilege: NETWORK_MANAGEMENT",
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "15_NetworkConfigurationService_8160",
        "summary": "Updates the chassis time settings and alert settings."
      },
      "get": {
        "description": "Get all Replication Chassis Settings.\n\nPrivilege: VIEW",
        "summary": "Retrieves the chassis time settings configuration and alert destination configuration and applies on the IOM device.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReplicableChassisSettingsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "NetworkConfigurationService"
        ],
        "operationId": "16_NetworkConfigurationService_489"
      }
    },
    "/DataForwardingService": {
      "get": {
        "description": "Dummy_Description",
        "summary": "GET call for DataForwardingService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DataForwardingService"
        ],
        "operationId": "1_DataForwardingService_3715"
      }
    },
    "/DataForwardingService/Forwarders": {
      "get": {
        "description": "Returns all the forwarders\n\nPrivilege: VIEW",
        "summary": "This URI represents all the forwarders.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getForwardersExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DataForwardingService.Forwarders",
                          "ForwarderConfigurations@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/ForwarderConfigurations",
                          "Name": "CIQ",
                          "DataSyncConfigurations@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations",
                          "Enabled": true,
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)",
                          "DataSyncHistory@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/DataSyncHistory",
                          "Id": 1
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DataForwardingService.Forwarders)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ForwardersResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "DataForwardingService"
        ],
        "operationId": "2_DataForwardingService_2179"
      }
    },
    "/DataForwardingService/Forwarders({id})": {
      "get": {
        "description": "Returns the details of a specific forwarder.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ForwarderConfiguration",
                "DataSyncConfigurations",
                "DataSyncHistory"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents a specific forwarder within the collection.",
        "operationId": "3_DataForwardingService_3819",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getForwardersByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#DataForwardingService.Forwarders",
                        "ForwarderConfigurations@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/ForwarderConfigurations",
                        "Name": "CIQ",
                        "DataSyncConfigurations@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations",
                        "Enabled": true,
                        "@odata.id": "/api/DataForwardingService/Forwarders(1)",
                        "@odata.context": "/api/$metadata#DataForwardingService.Forwarders",
                        "DataSyncHistory@odata.navigationLink": "/api/DataForwardingService/Forwarders(1)/DataSyncHistory",
                        "Id": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ForwardersByIdModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/DataSyncConfigurations": {
      "get": {
        "description": "Returns Data Sync Configurations of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents Data Sync configurations of forwarder.",
        "operationId": "4_DataForwardingService_948",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDataSyncConfigurationsExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#DataForwardingService.DataSyncConfigurations",
                          "Category": "1",
                          "DeviceTypes": [
                            2000,
                            4000
                          ],
                          "AlertSeverityTypes": [
                            8,
                            1
                          ],
                          "Schedule": "0 5 * * * *",
                          "IsEnabled": "true",
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations(2)",
                          "Status": "CFWS6501",
                          "GroupIds": [
                            1002
                          ],
                          "Id": 2
                        },
                        {
                          "@odata.type": "#DataForwardingService.DataSyncConfigurations",
                          "Category": "3",
                          "DeviceTypes": [
                            2000,
                            4000
                          ],
                          "AlertSeverityTypes": [],
                          "Schedule": "0 5 * * * *",
                          "IsEnabled": "true",
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations(4)",
                          "Status": "CFWS6501",
                          "GroupIds": [
                            1005
                          ],
                          "Id": 4
                        },
                        {
                          "@odata.type": "#DataForwardingService.DataSyncConfigurations",
                          "Category": "0",
                          "DeviceTypes": [
                            4000
                          ],
                          "AlertSeverityTypes": [],
                          "Schedule": "0 2 * * * *",
                          "IsEnabled": "true",
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations(1)",
                          "Status": "CFWS6501",
                          "GroupIds": [
                            1005,
                            1009,
                            1007
                          ],
                          "Id": 1
                        },
                        {
                          "@odata.type": "#DataForwardingService.DataSyncConfigurations",
                          "Category": "2",
                          "DeviceTypes": [
                            2000
                          ],
                          "AlertSeverityTypes": [],
                          "Schedule": "0 5 * * * *",
                          "IsEnabled": "true",
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations(3)",
                          "Status": "CFWS6501",
                          "GroupIds": [
                            1005,
                            1006
                          ],
                          "Id": 3
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DataForwardingService.DataSyncConfigurations)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSyncConfigurationRespModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/DataSyncConfigurations({sid})": {
      "get": {
        "description": "Returns Data Sync Configurations of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:sid",
            "required": true,
            "name": "sid",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents Data Sync configurations of forwarder.",
        "operationId": "5_DataForwardingService_3837",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDataSyncConfigurationByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#DataForwardingService.DataSyncConfigurations",
                        "Category": "0",
                        "DeviceTypes": [
                          4000
                        ],
                        "AlertSeverityTypes": [],
                        "Schedule": "0 2 * * * *",
                        "IsEnabled": "true",
                        "@odata.id": "/api/DataForwardingService/Forwarders(1)/DataSyncConfigurations(1)",
                        "@odata.context": "/api/$metadata#DataForwardingService.DataSyncConfigurations",
                        "Status": "CFWS6501",
                        "GroupIds": [
                          1005,
                          1009,
                          1007
                        ],
                        "Id": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSyncConfigurationRespModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/ForwarderConfigurations": {
      "get": {
        "description": "Returns forwarder configurations of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents forwarder configurations.",
        "operationId": "6_DataForwardingService_661",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ForwarderConfigurationResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/DataSyncHistory": {
      "get": {
        "description": "Returns DataSyncHistory of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-Category,Status,startTime,endTime,DataSyncStartTimeBegin,DataSyncStartTimeEnd,DataSyncEndTimeBegin,DataSyncEndTimeEnd,Message,AdditionalDetails/Content",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "arg1",
                "arg1 desc",
                "Category",
                "Category desc",
                "Status",
                "Status desc",
                "DataSyncStartTime",
                "DataSyncStartTime desc",
                "DataSyncEndTime",
                "DataSyncEndTime desc",
                "Message",
                "Message desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents DataSyncHistory of forwarder.",
        "operationId": "7_DataForwardingService_2089",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSyncHistoryModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/DataSyncHistory({historyId})": {
      "get": {
        "description": "Returns DataSyncHistory of forwarder  and history id \n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:historyId",
            "required": true,
            "name": "historyId",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents transfer history of forwarder and history id .",
        "operationId": "8_DataForwardingService_3706",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({forwarderId})/ManagedDevices": {
      "get": {
        "description": "Returns managed devices of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:forwarderId",
            "required": true,
            "name": "forwarderId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-ColumnSortIndex,IsAscending,Groups,Status,PowerState,ConnectionStateReason,ConnectedState,Type,DeviceName,ServiceTag,DeviceManagement/NetworkAddress,Model",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Status",
                "Status desc",
                "PowerState",
                "PowerState desc",
                "ConnectedState",
                "ConnectedState desc",
                "ConnectionStateReason",
                "ConnectionStateReason desc",
                "Type",
                "Type desc",
                "DeviceName",
                "DeviceName desc",
                "ServiceTag",
                "ServiceTag desc",
                "IpAddress",
                "IpAddress desc",
                "Model",
                "Model desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "Returns managed devices of forwarder.",
        "operationId": "9_DataForwardingService_5396",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getManagedDevicesExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#DataForwardingService.ManagedDevices",
                          "DeviceName": "10.255.1.101",
                          "PowerState": 18,
                          "ConnectedState": false,
                          "ServiceTag": "75XW942",
                          "DeviceManagement": [
                            {
                              "MacAddress": "74:86:7a:e5:b3:8a",
                              "NetworkAddress": "10.255.1.101",
                              "InstrumentationName": "idrac-75XW942b",
                              "ManagementType": 2,
                              "DnsName": "idrac-75xw942b.smd.devops.dell.com",
                              "ManagementProfile": [
                                {
                                  "Status": 1000,
                                  "StatusDateTime": "2021-03-01T18:32:31.831",
                                  "ManagementURL": "https://10.255.1.101:443",
                                  "HasCreds": 1,
                                  "ManagementProfileId": 5007,
                                  "ProfileId": "WSMAN_OOB",
                                  "ManagementId": 5006
                                }
                              ],
                              "ManagementId": 5006
                            }
                          ],
                          "ConnectionStateReason": 101,
                          "Status": 1000,
                          "DeviceId": 10121,
                          "Groups": [
                            1031
                          ],
                          "Model": "PowerEdge FM120",
                          "Type": 1000
                        },
                        {
                          "@odata.type": "#DataForwardingService.ManagedDevices",
                          "DeviceName": "10.255.1.133",
                          "PowerState": 17,
                          "ConnectedState": false,
                          "ServiceTag": "HJFC942",
                          "DeviceManagement": [
                            {
                              "MacAddress": "74:86:7a:e5:b1:68",
                              "NetworkAddress": "10.255.1.133",
                              "InstrumentationName": "idrac-HJFC942a",
                              "ManagementType": 2,
                              "DnsName": "idrac-hjfc942a.smd.devops.dell.com",
                              "ManagementProfile": [
                                {
                                  "Status": 1000,
                                  "StatusDateTime": "2021-03-01T18:32:40.307",
                                  "ManagementURL": "https://10.255.1.133:443",
                                  "HasCreds": 1,
                                  "ManagementProfileId": 5041,
                                  "ProfileId": "WSMAN_OOB",
                                  "ManagementId": 5036
                                }
                              ],
                              "ManagementId": 5036
                            }
                          ],
                          "ConnectionStateReason": 101,
                          "Status": 1000,
                          "DeviceId": 10134,
                          "Groups": [
                            1031
                          ],
                          "Model": "PowerEdge FM120",
                          "Type": 1000
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DataForwardingService.ManagedDevices)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManagedDevicesRespModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({forwarderId})/ManagedDevicesSummary": {
      "get": {
        "description": "Returns managed devices summary of forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:forwarderId",
            "required": true,
            "name": "forwarderId",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents managed devices summary of forwarder.",
        "operationId": "10_DataForwardingService_3506",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManagedDevicesSummaryRespModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Actions/DataForwardingService.ForwarderSettings": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForwarderSettingsModel"
              }
            }
          },
          "required": true,
          "description": "update ForwarderSettingsModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "description": "To set the forwarder configuration setting for the target.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DataForwardingService"
        ],
        "operationId": "11_DataForwardingService_4177",
        "summary": "Forwarder Configuration Setting."
      }
    },
    "/DataForwardingService/CategoryTypes": {
      "get": {
        "description": "Returns the Category Types\n\nPrivilege: VIEW",
        "summary": "This URI represents the Category Types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSupportedCategoryTypesExample": {
                    "value": [
                      {
                        "@odata.type": "#DataForwardingService.CategoryType",
                        "CategoryType": 1,
                        "Name": "Inventory",
                        "Description": "Inventory. Configuration associated for this type is meant for Inventory Data forwarding."
                      },
                      {
                        "@odata.type": "#DataForwardingService.CategoryType",
                        "CategoryType": 2,
                        "Name": "Alerts",
                        "Description": "Alerts. Configuration associated for this type is meant for Alerts Data forwarding."
                      },
                      {
                        "@odata.type": "#DataForwardingService.CategoryType",
                        "CategoryType": 3,
                        "Name": "Health",
                        "Description": "Health. Configuration associated for this type is meant for Health Data forwarding."
                      },
                      {
                        "@odata.type": "#DataForwardingService.CategoryType",
                        "CategoryType": 4,
                        "Name": "Telemetry",
                        "Description": "Telemetry. Configuration associated for this type is meant for Telemetry Data forwarding."
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataSyncCategoryTypeRespModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DataForwardingService"
        ],
        "operationId": "12_DataForwardingService_9961"
      }
    },
    "/DataForwardingService/Forwarders({id})/GroupSummary": {
      "get": {
        "description": "Returns GroupSummary for forwarder\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-GroupName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "arg1",
                "arg1 desc",
                "GroupName",
                "GroupName desc",
                "DeviceCount",
                "DeviceCount desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents GroupSummary of forwarder.",
        "operationId": "13_DataForwardingService_9524",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupSummaryExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DataForwardingService.GroupSummary",
                          "PowerStatus": {
                            "UnknownCount": 0,
                            "OffCount": 1,
                            "OnCount": 2
                          },
                          "GlobalHealth": {
                            "NormalCount": 5,
                            "nknownCount": null,
                            "CriticalCount": 0,
                            "WarningCount": 1
                          },
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/GroupSummary(1023)",
                          "DeviceCount": 9,
                          "GroupName": "OEM Servers",
                          "ConnectedStatus": {
                            "ConnectedCount": 1,
                            "DisconnectedCount": 8
                          },
                          "GroupId": 1023
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DataForwardingService.GroupSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DataForwardingService/Forwarders({id})/GroupSummary({groupId})": {
      "get": {
        "description": "Returns group summary statistic of forwarder and group id \n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "DataForwardingService"
        ],
        "summary": "This URI represents GroupSummary of forwarder and group id .",
        "operationId": "14_DataForwardingService_5053",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupSummaryExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DataForwardingService.GroupSummary",
                          "PowerStatus": {
                            "UnknownCount": 0,
                            "OffCount": 1,
                            "OnCount": 2
                          },
                          "GlobalHealth": {
                            "NormalCount": 5,
                            "nknownCount": null,
                            "CriticalCount": 0,
                            "WarningCount": 1
                          },
                          "@odata.id": "/api/DataForwardingService/Forwarders(1)/GroupSummary(1023)",
                          "DeviceCount": 9,
                          "GroupName": "OEM Servers",
                          "ConnectedStatus": {
                            "ConnectedCount": 1,
                            "DisconnectedCount": 8
                          },
                          "GroupId": 1023
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DataForwardingService.GroupSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DellConnectivityService": {
      "get": {
        "description": "Dummy_Description",
        "summary": "GET call for DellConnectivityService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "1_DellConnectivityService_7964"
      }
    },
    "/DellConnectivityService/RegistrationStatus": {
      "get": {
        "description": "Returns registration status\n\nPrivilege: VIEW",
        "summary": "This URI represents gets the registration status.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getRegistrationStatusExample": {
                    "value": [
                      {
                        "@odata.type": "#DellConnectivityService.RegistrationStatus",
                        "SiteName": "SERVICE PLANNING - SVT",
                        "SerialNumber": "ELMPLG0221D4KF",
                        "@odata.id": "/api/DellConnectivityService/RegistrationStatus",
                        "@odata.context": "/api/$metadata#DellConnectivityService.RegistrationStatus",
                        "SiteId": "11145366",
                        "Id": "RegistrationStatus"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RegistrationStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "2_DellConnectivityService_1675"
      }
    },
    "/DellConnectivityService/ConnectivityStatus": {
      "get": {
        "description": "Returns connectivity status\n\nPrivilege: VIEW",
        "summary": "This URI returns the connectivity status.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getConnectivityStatusExample": {
                    "value": [
                      {
                        "@odata.type": "#DellConnectivityService.ConnectivityStatus",
                        "Status": "Connected",
                        "Since": "2021-03-01T15:11:30.416Z",
                        "@odata.id": "/api/DellConnectivityService/ConnectivityStatus",
                        "@odata.context": "/api/$metadata#DellConnectivityService.ConnectivityStatus",
                        "Id": "ConnectivityStatus"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConnectivityStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "3_DellConnectivityService_1142"
      }
    },
    "/DellConnectivityService/Actions/DellConnectivityService.Registration": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationModel"
              }
            }
          },
          "required": true,
          "description": "update RegistrationModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "description": "Performing the registration\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "4_DellConnectivityService_3481",
        "summary": "This URI performs the registration."
      }
    },
    "/DellConnectivityService/Actions/DellConnectivityService.Deregistration": {
      "post": {
        "description": "Performing the deregistration\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "This URI performs the deregistration.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "5_DellConnectivityService_8369"
      }
    },
    "/DellConnectivityService/Actions/DellConnectivityService.TestConnectivity": {
      "post": {
        "description": "Test the connectivity status.\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "This URI tests the connectivity.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "DellConnectivityService"
        ],
        "operationId": "7_DellConnectivityService_210"
      }
    },
    "/ReportService": {
      "get": {
        "description": "Gets all the endpoints for Report service.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for Report service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ReportService"
        ],
        "operationId": "1_ReportService_6354"
      }
    },
    "/ReportService/ReportDefs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportDefinitionRequest"
              }
            }
          },
          "required": true,
          "description": "update CreateReportDefinitionRequest object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a report.\n\nPrivilege: REPORT_MANAGEMENT",
        "tags": [
          "ReportService"
        ],
        "operationId": "6_ReportService_3725",
        "summary": "Creates a report."
      },
      "get": {
        "description": "Gets a page of report definitions, as specified by the request arguments (top, skip, and filtering arguments).\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Name,Description,IsBuiltIn,FilterGroupName,Category",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Name",
                "Name desc",
                "IsBuiltIn",
                "IsBuiltIn desc",
                "Description",
                "Description desc",
                "FilterGroupName",
                "FilterGroupName desc",
                "Category",
                "Category desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ReportResults"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Gets a page of report definitions, as specified by the request arguments.",
        "operationId": "2_ReportService_6014",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllReportDefinitionsExample": {
                    "value": [
                      {
                        "@odata.type": "#ReportService.ReportDef",
                        "LastRunDuration": null,
                        "IsBuiltIn": true,
                        "Description": "This report contains alert counts per severity and totals per Device.",
                        "QsmQuery": false,
                        "LastRunDate": null,
                        "ColumnNames": [
                          {
                            "Width": 30,
                            "Sequence": 1,
                            "Id": 1000,
                            "Name": "Device Name"
                          },
                          {
                            "Width": 20,
                            "Sequence": 2,
                            "Id": 1001,
                            "Name": "Device Identifier"
                          },
                          {
                            "Width": 20,
                            "Sequence": 3,
                            "Id": 1002,
                            "Name": "Device Type"
                          },
                          {
                            "Width": 30,
                            "Sequence": 4,
                            "Id": 1003,
                            "Name": "Device Model"
                          },
                          {
                            "Width": 20,
                            "Sequence": 5,
                            "Id": 1004,
                            "Name": "Critical"
                          },
                          {
                            "Width": 20,
                            "Sequence": 6,
                            "Id": 1005,
                            "Name": "Warning"
                          },
                          {
                            "Width": 20,
                            "Sequence": 7,
                            "Id": 1006,
                            "Name": "Normal"
                          },
                          {
                            "Width": 20,
                            "Sequence": 8,
                            "Id": 1007,
                            "Name": "Info"
                          },
                          {
                            "Width": 20,
                            "Sequence": 9,
                            "Id": 1008,
                            "Name": "Total"
                          }
                        ],
                        "@odata.id": "/api/ReportService/ReportDefs(10054)",
                        "Category": "Alerts",
                        "FilterGroupId": 0,
                        "LastEditedBy": "admin",
                        "QueryDef": {
                          "ContextId": 1,
                          "FilterId": 10012
                        },
                        "FilterGroupName": null,
                        "LastRunBy": null,
                        "ReportResults": {
                          "@odata.id": "/api/ReportService/ReportDefs(10054)/ReportResults"
                        },
                        "Id": 10054,
                        "Name": "Alert Counts per Device Report"
                      },
                      {
                        "@odata.type": "#ReportService.ReportDef",
                        "LastRunDuration": null,
                        "IsBuiltIn": true,
                        "Description": "This report contains critical and warning alerts received over the last 7 days.",
                        "QsmQuery": false,
                        "LastRunDate": null,
                        "ColumnNames": [
                          {
                            "Width": 30,
                            "Sequence": 1,
                            "Id": 1100,
                            "Name": "Device Name"
                          },
                          {
                            "Width": 20,
                            "Sequence": 2,
                            "Id": 1101,
                            "Name": "Device Identifier"
                          },
                          {
                            "Width": 20,
                            "Sequence": 3,
                            "Id": 1102,
                            "Name": "Device Type"
                          },
                          {
                            "Width": 30,
                            "Sequence": 4,
                            "Id": 1103,
                            "Name": "Device Model"
                          },
                          {
                            "Width": 20,
                            "Sequence": 5,
                            "Id": 1104,
                            "Name": "Alert Severity"
                          },
                          {
                            "Width": 20,
                            "Sequence": 6,
                            "Id": 1105,
                            "Name": "Alert Status"
                          },
                          {
                            "Width": 24,
                            "Sequence": 7,
                            "Id": 1106,
                            "Name": "Alert Timestamp"
                          },
                          {
                            "Width": 60,
                            "Sequence": 8,
                            "Id": 1107,
                            "Name": "Alert Message"
                          },
                          {
                            "Width": 20,
                            "Sequence": 9,
                            "Id": 1108,
                            "Name": "Alert Message ID"
                          },
                          {
                            "Width": 20,
                            "Sequence": 10,
                            "Id": 1109,
                            "Name": "Alert Category"
                          },
                          {
                            "Width": 30,
                            "Sequence": 11,
                            "Id": 1110,
                            "Name": "Alert Sub-Category"
                          }
                        ],
                        "@odata.id": "/api/ReportService/ReportDefs(10055)",
                        "Category": "Alerts",
                        "FilterGroupId": 0,
                        "LastEditedBy": "admin",
                        "QueryDef": {
                          "ContextId": 1,
                          "FilterId": 10013
                        },
                        "FilterGroupName": null,
                        "LastRunBy": null,
                        "ReportResults": {
                          "@odata.id": "/api/ReportService/ReportDefs(10055)/ReportResults"
                        },
                        "Id": 10055,
                        "Name": "Alerts Weekly Report"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReportDefModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ReportService/ReportDefs({reportDefId})/ReportResults": {
      "get": {
        "description": "Gets results of a report.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:reportDefId",
            "required": true,
            "name": "reportDefId",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ResultRows"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Gets results of a report.",
        "operationId": "3_ReportService_869",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getReportResultExample": {
                    "value": {
                      "@odata.type": "#ReportService.ReportResult",
                      "ResultRowColumns": [
                        {
                          "Width": 20,
                          "Sequence": 0,
                          "Id": 21,
                          "Name": "Device Name"
                        },
                        {
                          "Width": 20,
                          "Sequence": 1,
                          "Id": 22,
                          "Name": "Device Type"
                        },
                        {
                          "Width": 20,
                          "Sequence": 2,
                          "Id": 23,
                          "Name": "Device Model"
                        },
                        {
                          "Width": 20,
                          "Sequence": 3,
                          "Id": 24,
                          "Name": "Identifier"
                        },
                        {
                          "Width": 25,
                          "Sequence": 4,
                          "Id": 25,
                          "Name": "Device Asset Tag"
                        }
                      ],
                      "Title": null,
                      "@odata.id": "/api/ReportService/ReportDefs(10065)/ReportResults",
                      "@odata.context": "/api/$metadata#ReportService.ReportResult",
                      "TaskId": 25031,
                      "ResultRows@odata.navigationLink": "/api/ReportService/ReportDefs(10065)/ReportResults/ResultRows",
                      "Id": 3
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ReportResultReducedModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ReportService/ReportDefs({reportResultId})/ReportResults/ResultRows": {
      "get": {
        "description": "Get a page of report results, as defined by the request arguments.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:reportResultId",
            "required": true,
            "name": "reportResultId",
            "in": "path"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Gets a page of report results, as defined by the request arguments.",
        "operationId": "4_ReportService_3019",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getReportResultRowsByReportDefIdExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#ReportService.ReportResultRow",
                          "Values": [
                            "iDRAC-792B0M2",
                            "SERVER",
                            "PowerEdge R640",
                            "792B0M2",
                            "",
                            "",
                            "",
                            ""
                          ]
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(ReportService.ReportResultRow)"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ReportResultRowOdataModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ReportService/ReportDefs({id})": {
      "get": {
        "description": "Gets the definition of a specific report.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Gets the definition of a specific report.",
        "operationId": "5_ReportService_8795",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getReportDefinitionExample": {
                    "value": {
                      "@odata.type": "#ReportService.ReportDef",
                      "LastRunDuration": null,
                      "IsBuiltIn": true,
                      "Description": "This report contains alert counts per severity and totals per Device.",
                      "QsmQuery": false,
                      "LastRunDate": null,
                      "ColumnNames": [
                        {
                          "Width": 30,
                          "Sequence": 1,
                          "Id": 1000,
                          "Name": "Device Name"
                        },
                        {
                          "Width": 20,
                          "Sequence": 2,
                          "Id": 1001,
                          "Name": "Device Identifier"
                        },
                        {
                          "Width": 20,
                          "Sequence": 3,
                          "Id": 1002,
                          "Name": "Device Type"
                        },
                        {
                          "Width": 30,
                          "Sequence": 4,
                          "Id": 1003,
                          "Name": "Device Model"
                        },
                        {
                          "Width": 20,
                          "Sequence": 5,
                          "Id": 1004,
                          "Name": "Critical"
                        },
                        {
                          "Width": 20,
                          "Sequence": 6,
                          "Id": 1005,
                          "Name": "Warning"
                        },
                        {
                          "Width": 20,
                          "Sequence": 7,
                          "Id": 1006,
                          "Name": "Normal"
                        },
                        {
                          "Width": 20,
                          "Sequence": 8,
                          "Id": 1007,
                          "Name": "Info"
                        },
                        {
                          "Width": 20,
                          "Sequence": 9,
                          "Id": 1008,
                          "Name": "Total"
                        }
                      ],
                      "@odata.id": "/api/ReportService/ReportDefs(10054)",
                      "@odata.context": "/api/$metadata#ReportService.ReportDef",
                      "FilterGroupId": 0,
                      "LastEditedBy": "admin",
                      "QueryDef": {
                        "ContextId": 1,
                        "FilterId": 10012
                      },
                      "FilterGroupName": null,
                      "LastRunBy": null,
                      "Category": null,
                      "ReportResults": {
                        "@odata.id": "/api/ReportService/ReportDefs(10054)/ReportResults"
                      },
                      "Id": 10054,
                      "Name": "Alert Counts per Device Report"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ReportDefModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ReportService/ReportDefs(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReportDefinitionRequest"
              }
            }
          },
          "required": true,
          "description": "update CreateReportDefinitionRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates a report.\n\nPrivilege: REPORT_MANAGEMENT",
        "tags": [
          "ReportService"
        ],
        "operationId": "7_ReportService_913",
        "summary": "Updates a report."
      }
    },
    "/ReportService/ReportDefs({reportDefId})": {
      "delete": {
        "description": "Deletes a report.\n\nPrivilege: REPORT_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:reportDefId",
            "required": true,
            "name": "reportDefId",
            "in": "path"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Deletes a report.",
        "operationId": "8_ReportService_4913",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ReportService/Actions/ReportService.RunReport": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RunReportRequest"
              }
            }
          },
          "required": true,
          "description": "update RunReportRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Executes a report.\n\nPrivilege: REPORT_RUN",
        "tags": [
          "ReportService"
        ],
        "operationId": "9_ReportService_488",
        "summary": "Executes a report."
      }
    },
    "/ReportService/Actions/ReportService.DownloadReport": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadReportRequest"
              }
            }
          },
          "required": true,
          "description": "update DownloadReportRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "downloadReportExample": {
                    "value": {
                      "FilePath": "/var/log/dell/omc/reports/test report.pdf"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DownloadReportResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Downloads the reports specified in the payload.\n\nPrivilege: VIEW",
        "tags": [
          "ReportService"
        ],
        "operationId": "11_ReportService_3577",
        "summary": "Downloads the reports specified in the payload."
      }
    },
    "/ReportService/Actions/ReportService.EmailReport": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailReportRequest"
              }
            }
          },
          "required": true,
          "description": "update EmailReportRequest object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Run and email the requested report.\n\nPrivilege: VIEW",
        "tags": [
          "ReportService"
        ],
        "operationId": "12_ReportService_4046",
        "summary": "Run and email the requested report."
      }
    },
    "/ReportService/Actions/ReportService.DeleteReports": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "description": "Free form object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes the reports specified in the payload.\n\nPrivilege: REPORT_MANAGEMENT",
        "tags": [
          "ReportService"
        ],
        "operationId": "13_ReportService_8304",
        "summary": "Deletes the reports specified in the payload."
      }
    },
    "/ReportService/ReportResults": {
      "get": {
        "description": "Gets general result information such as result columns, title, etc. It does not include result rows.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ResultRows"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "ReportService"
        ],
        "summary": "Gets general result information such as result columns, title, etc. It does not include result rows.",
        "operationId": "14_ReportService_4244",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllReportResultsExample": {
                    "value": [
                      {
                        "@odata.type": "#ReportService.ReportResult",
                        "ResultRowColumns": [
                          {
                            "Width": 20,
                            "Sequence": 0,
                            "Id": 21,
                            "Name": "Device Name"
                          },
                          {
                            "Width": 20,
                            "Sequence": 1,
                            "Id": 22,
                            "Name": "Device Type"
                          },
                          {
                            "Width": 20,
                            "Sequence": 2,
                            "Id": 23,
                            "Name": "Device Model"
                          },
                          {
                            "Width": 20,
                            "Sequence": 3,
                            "Id": 24,
                            "Name": "Identifier"
                          },
                          {
                            "Width": 25,
                            "Sequence": 4,
                            "Id": 25,
                            "Name": "Device Asset Tag"
                          }
                        ],
                        "Title": null,
                        "@odata.id": "/api/ReportService/ReportDefs(10065)/ReportResults",
                        "@odata.context": "/api/$metadata#ReportService.ReportResult",
                        "TaskId": 25031,
                        "ResultRows@odata.navigationLink": "/api/ReportService/ReportDefs(10065)/ReportResults/ResultRows",
                        "Id": 3
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReportResultReducedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/WarrantyService": {
      "get": {
        "description": "List warranty service API URIs\n\nPrivilege: VIEW",
        "summary": "List warranty service API URIs",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "WarrantyService"
        ],
        "operationId": "1_WarrantyService_6773"
      }
    },
    "/WarrantyService/Warranties": {
      "get": {
        "description": "Returns warranty information from OpenManage Enterprise\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-id,DeviceId,DeviceIdentifier,DeviceName,DeviceModel,DeviceType,GroupName,countryLookupCodes,CustomerNumber,OrderNumber,states,DateForLessThan,DaysRemainingBegin,DaysRemainingEnd",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "DeviceIdentifier",
                "DeviceIdentifier desc",
                "DeviceName",
                "DeviceName desc",
                "DeviceModel",
                "DeviceModel desc",
                "State",
                "State desc",
                "DeviceType",
                "DeviceType desc",
                "GroupName",
                "GroupName desc",
                "ServiceLevelDescription",
                "ServiceLevelDescription desc",
                "DaysRemaining",
                "DaysRemaining desc",
                "MaxEndDateForServiceCode",
                "MaxEndDateForServiceCode desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "WarrantyService"
        ],
        "summary": "Returns warranty information from OpenManage Enterprise",
        "operationId": "2_WarrantyService_7899",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllWarrantiesExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "State": "N/A",
                          "CustomerNumber": 0,
                          "@odata.type": "#WarrantyService.Warranty",
                          "StartDate": "0001-01-01 00:00:00.000",
                          "EndDate": "0001-01-01 00:00:00.000",
                          "OrderNumber": 0,
                          "Timestamp": "2018-09-03 00:00:00.000",
                          "ItemNumber": "N/A",
                          "DaysRemaining": 0,
                          "DeviceIdentifier": "GT2T0M2",
                          "DeviceModel": "PowerEdge C6420",
                          "@odata.id": "/api/WarrantyService/Warranties(25110)",
                          "CountryLookupCode": "N/A",
                          "DeviceType": 1000,
                          "ServiceLevelDescription": "No valid warranties found",
                          "ServiceLevelGroup": 0,
                          "ServiceProvider": "N/A",
                          "LocalChannel": "N/A",
                          "SystemShipDate": "0001-01-01 00:00:00.000",
                          "ServiceLevelCode": "N/A",
                          "DeviceId": 25102,
                          "Id": 25110
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(WarrantyService.Warranty)"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/WarrantyDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/WarrantyService/Actions/WarrantyService.WarrantyCount": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarrantyCountsModel"
              }
            }
          },
          "required": true,
          "description": "update WarrantyCountsModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getWarrantyCountsExample": {
                    "value": {
                      "value": {
                        "NumberOfActiveWarranties": 16,
                        "ScoreBoard": false,
                        "NumberOfExpiredWarranties": 41,
                        "NumberOfWarrantiesExpiringSoon": 0
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/WarrantyCountsModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Returns the warranty count based on Warranty Setting Criteria for scoreboard\n\nPrivilege: VIEW",
        "tags": [
          "WarrantyService"
        ],
        "operationId": "5_WarrantyService_4689",
        "summary": "Returns the warranty count based on Warranty Setting Criteria for scoreboard"
      }
    },
    "/QuerySupportService": {
      "get": {
        "description": "List query support service API URIs\n\nPrivilege: VIEW",
        "summary": "List query support service API URIs",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "1_QuerySupportService_7140"
      }
    },
    "/QuerySupportService/QueryContextSummaries": {
      "get": {
        "description": "Returns summary information for all Query Contexts\n\nPrivilege: VIEW",
        "summary": "Returns summary information for all Query Contexts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllQueryContextSummariesExample": {
                    "value": {
                      "@odata.count": 5,
                      "value": [
                        {
                          "@odata.type": "#QuerySupportService.QueryContextSummary",
                          "BaseCategoryId": 3,
                          "Description": null,
                          "@odata.id": "/api/QuerySupportService/QueryContextSummaries(5)",
                          "Id": 5,
                          "Name": "Jobs"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContextSummary",
                          "BaseCategoryId": 4,
                          "Description": null,
                          "@odata.id": "/api/QuerySupportService/QueryContextSummaries(4)",
                          "Id": 4,
                          "Name": "Groups"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContextSummary",
                          "BaseCategoryId": 2,
                          "Description": null,
                          "@odata.id": "/api/QuerySupportService/QueryContextSummaries(1)",
                          "Id": 1,
                          "Name": "Alerts"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContextSummary",
                          "BaseCategoryId": 1,
                          "Description": null,
                          "@odata.id": "/api/QuerySupportService/QueryContextSummaries(2)",
                          "Id": 2,
                          "Name": "Devices"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContextSummary",
                          "BaseCategoryId": 1,
                          "Description": null,
                          "@odata.id": "/api/QuerySupportService/QueryContextSummaries(3)",
                          "Id": 3,
                          "Name": "Servers"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(QuerySupportService.QueryContextSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QueryContextSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "2_QuerySupportService_2998"
      }
    },
    "/QuerySupportService/QueryContextSummaries({contextId})": {
      "get": {
        "description": "Returns summary information for a specific query context\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:contextId",
            "required": true,
            "name": "contextId",
            "in": "path"
          }
        ],
        "tags": [
          "QuerySupportService"
        ],
        "summary": "Returns summary information for a specific query context",
        "operationId": "3_QuerySupportService_9765",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getQueryContextSummaryExample": {
                    "value": {
                      "@odata.type": "#QuerySupportService.QueryContextSummary",
                      "BaseCategoryId": 2,
                      "Description": null,
                      "@odata.id": "/api/QuerySupportService/QueryContextSummaries(1)",
                      "@odata.context": "/api/$metadata#QuerySupportService.QueryContextSummary/$entity",
                      "Id": 1,
                      "Name": "Alerts"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/QueryContextSummary"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/QuerySupportService/QueryContexts": {
      "get": {
        "description": "Returns summary information for all query contexts\n\nPrivilege: VIEW",
        "summary": "Returns summary information for all query contexts",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllQueryContextsExample": {
                    "value": {
                      "@odata.count": 5,
                      "value": [
                        {
                          "@odata.type": "#QuerySupportService.QueryContext",
                          "Tables": [],
                          "BaseCategoryId": 3,
                          "Description": null,
                          "Fields": [],
                          "@odata.id": "/api/QuerySupportService/QueryContexts(4)",
                          "ReportSettings": [],
                          "Id": 4,
                          "Name": "Jobs"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContext",
                          "Tables": [],
                          "BaseCategoryId": 4,
                          "Description": null,
                          "Fields": [],
                          "@odata.id": "/api/QuerySupportService/QueryContexts(3)",
                          "ReportSettings": [],
                          "Id": 3,
                          "Name": "Groups"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContext",
                          "Tables": [],
                          "BaseCategoryId": 2,
                          "Description": null,
                          "Fields": [],
                          "@odata.id": "/api/QuerySupportService/QueryContexts(1)",
                          "ReportSettings": [],
                          "Id": 1,
                          "Name": "Alerts"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContext",
                          "Tables": [],
                          "BaseCategoryId": 1,
                          "Description": null,
                          "Fields": [],
                          "@odata.id": "/api/QuerySupportService/QueryContexts(2)",
                          "ReportSettings": [],
                          "Id": 2,
                          "Name": "Devices"
                        },
                        {
                          "@odata.type": "#QuerySupportService.QueryContext",
                          "Tables": [],
                          "BaseCategoryId": 1,
                          "Description": null,
                          "Fields": [],
                          "@odata.id": "/api/QuerySupportService/QueryContexts(5)",
                          "ReportSettings": [],
                          "Id": 5,
                          "Name": "Servers"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(QuerySupportService.QueryContext)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QueryContextDetail"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "4_QuerySupportService_9646"
      }
    },
    "/QuerySupportService/QueryContexts({contextId})": {
      "get": {
        "description": "Returns information for a specified Query Context\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:contextId",
            "required": true,
            "name": "contextId",
            "in": "path"
          }
        ],
        "tags": [
          "QuerySupportService"
        ],
        "summary": "Returns information for a specified Query Context",
        "operationId": "5_QuerySupportService_710",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getQueryContextExample": {
                    "value": {
                      "@odata.type": "#QuerySupportService.QueryContext",
                      "Tables": [
                        {
                          "Description": null,
                          "Id": 5,
                          "ParentTableId": 1,
                          "Name": "Device General Info"
                        },
                        {
                          "Description": null,
                          "Id": 4,
                          "ParentTableId": 2,
                          "Name": "Alert Sub-Category"
                        },
                        {
                          "Description": null,
                          "Id": 1,
                          "ParentTableId": -1,
                          "Name": "Alert"
                        }
                      ],
                      "BaseCategoryId": 2,
                      "Description": null,
                      "Fields": [
                        {
                          "Description": null,
                          "TableId": 5,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 17,
                          "Name": "Device Name"
                        },
                        {
                          "Description": null,
                          "TableId": 5,
                          "FieldTypeId": 4,
                          "EnumOpts": [
                            {
                              "Id": 1000,
                              "Name": "Normal"
                            },
                            {
                              "Id": 2000,
                              "Name": "Unknown"
                            },
                            {
                              "Id": 3000,
                              "Name": "Warning"
                            },
                            {
                              "Id": 4000,
                              "Name": "Critical"
                            },
                            {
                              "Id": 5000,
                              "Name": "No Status"
                            }
                          ],
                          "StrMaxLen": 0,
                          "Id": 18,
                          "Name": "Device Global Status"
                        },
                        {
                          "Description": null,
                          "TableId": 5,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 19,
                          "Name": "Device Model"
                        },
                        {
                          "Description": null,
                          "TableId": 5,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 20,
                          "Name": "Device Service Tag"
                        },
                        {
                          "Description": null,
                          "TableId": 5,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 23,
                          "Name": "Device Asset Tag"
                        },
                        {
                          "Description": null,
                          "TableId": 4,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 20,
                          "Id": 15,
                          "Name": "Sub-Category Prefix"
                        },
                        {
                          "Description": null,
                          "TableId": 4,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 16,
                          "Name": "Sub-Category Description"
                        },
                        {
                          "Description": null,
                          "TableId": 1,
                          "FieldTypeId": 4,
                          "EnumOpts": [
                            {
                              "Id": 1000,
                              "Name": "Acknowledged"
                            },
                            {
                              "Id": 2000,
                              "Name": "Not Acknowledged"
                            }
                          ],
                          "StrMaxLen": 0,
                          "Id": 3,
                          "Name": "Alert Status"
                        },
                        {
                          "Description": null,
                          "TableId": 1,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 256,
                          "Id": 5,
                          "Name": "Alert Message ID"
                        },
                        {
                          "Description": null,
                          "TableId": 1,
                          "FieldTypeId": 1,
                          "EnumOpts": [],
                          "StrMaxLen": 2048,
                          "Id": 2,
                          "Name": "Alert Message"
                        }
                      ],
                      "@odata.id": "/api/QuerySupportService/QueryContexts(1)",
                      "@odata.context": "/api/$metadata#QuerySupportService.QueryContext/$entity",
                      "ReportSettings": [],
                      "Id": 1,
                      "Name": "Alerts"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/QueryContextDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/QuerySupportService/Filters": {
      "get": {
        "description": "Returns summary information for all filters\n\nPrivilege: VIEW",
        "summary": "Returns summary information for all filters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllFiltersExample": {
                    "value": {
                      "@odata.count": 23,
                      "value": [
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "All PowerEdge Devices",
                          "@odata.id": "/api/QuerySupportService/Filters(25000)",
                          "FilterText": "",
                          "UsageId": 2,
                          "Conditions": [],
                          "Id": 25000
                        },
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "Dell iDRAC Servers",
                          "@odata.id": "/api/QuerySupportService/Filters(1010)",
                          "FilterText": "",
                          "UsageId": 1,
                          "Conditions": [],
                          "Id": 1010
                        },
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "Dell Networking Switches",
                          "@odata.id": "/api/QuerySupportService/Filters(1007)",
                          "FilterText": "",
                          "UsageId": 1,
                          "Conditions": [],
                          "Id": 1007
                        },
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "Fibre Channel Switches",
                          "@odata.id": "/api/QuerySupportService/Filters(1008)",
                          "FilterText": "",
                          "UsageId": 1,
                          "Conditions": [],
                          "Id": 1008
                        },
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "Modular Systems",
                          "@odata.id": "/api/QuerySupportService/Filters(1000)",
                          "FilterText": "",
                          "UsageId": 1,
                          "Conditions": [],
                          "Id": 1000
                        },
                        {
                          "@odata.type": "#QuerySupportService.Filter",
                          "ContextId": 2,
                          "Name": "Network Devices",
                          "@odata.id": "/api/QuerySupportService/Filters(1006)",
                          "FilterText": "",
                          "UsageId": 1,
                          "Conditions": [],
                          "Id": 1006
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(QuerySupportService.Filter)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FilterDetail"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "6_QuerySupportService_4074"
      }
    },
    "/QuerySupportService/Filters({filterId})": {
      "get": {
        "description": "Returns detailed information for a specific query filter\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:filterId",
            "required": true,
            "name": "filterId",
            "in": "path"
          }
        ],
        "tags": [
          "QuerySupportService"
        ],
        "summary": "Returns detailed information for a specific query filter",
        "operationId": "7_QuerySupportService_3958",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getFilterExample": {
                    "value": {
                      "@odata.type": "#QuerySupportService.Filter",
                      "ContextId": 2,
                      "Name": "",
                      "@odata.id": "/api/QuerySupportService/Filters(1007)",
                      "@odata.context": "/api/$metadata#QuerySupportService.Filter/$entity",
                      "FilterText": "",
                      "UsageId": 0,
                      "Conditions": [
                        {
                          "LogicalOperatorId": 0,
                          "OperatorId": 1,
                          "LeftParen": true,
                          "Value": "101",
                          "RightParen": true,
                          "FieldId": 59
                        },
                        {
                          "LogicalOperatorId": 2,
                          "OperatorId": 1,
                          "LeftParen": true,
                          "Value": "102",
                          "RightParen": true,
                          "FieldId": 59
                        },
                        {
                          "LogicalOperatorId": 2,
                          "OperatorId": 1,
                          "LeftParen": true,
                          "Value": "202",
                          "RightParen": true,
                          "FieldId": 59
                        },
                        {
                          "LogicalOperatorId": 2,
                          "OperatorId": 1,
                          "LeftParen": true,
                          "Value": "203",
                          "RightParen": true,
                          "FieldId": 59
                        }
                      ],
                      "Id": 1007
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/FilterDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/QuerySupportService/Queries": {
      "get": {
        "description": "Returns summary information for all queries\n\nPrivilege: VIEW",
        "summary": "Returns summary information for all queries",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllQueriesExample": {
                    "value": {
                      "@odata.count": 6,
                      "value": [
                        {
                          "@odata.type": "#QuerySupportService.Query",
                          "ContextId": 2,
                          "Name": "Device Overview Report",
                          "SortFields": [],
                          "ResultFields": [],
                          "@odata.id": "/api/QuerySupportService/Queries(10001)",
                          "FilterText": "",
                          "UsageId": 2,
                          "ReportSettings": [],
                          "Conditions": [],
                          "Id": 10001
                        },
                        {
                          "@odata.type": "#QuerySupportService.Query",
                          "ContextId": 2,
                          "Name": "NIC Report",
                          "SortFields": [],
                          "ResultFields": [],
                          "@odata.id": "/api/QuerySupportService/Queries(10003)",
                          "FilterText": "",
                          "UsageId": 2,
                          "ReportSettings": [],
                          "Conditions": [],
                          "Id": 10003
                        },
                        {
                          "@odata.type": "#QuerySupportService.Query",
                          "ContextId": 2,
                          "Name": "Warranty Report",
                          "SortFields": [],
                          "ResultFields": [],
                          "@odata.id": "/api/QuerySupportService/Queries(10007)",
                          "FilterText": "",
                          "UsageId": 2,
                          "ReportSettings": [],
                          "Conditions": [],
                          "Id": 10007
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(QuerySupportService.Query)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QueryDetail"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "8_QuerySupportService_7364"
      }
    },
    "/QuerySupportService/Queries({queryId})": {
      "get": {
        "description": "Returns summary information for a specific query\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:queryId",
            "required": true,
            "name": "queryId",
            "in": "path"
          }
        ],
        "tags": [
          "QuerySupportService"
        ],
        "summary": "Returns summary information for a specific query",
        "operationId": "9_QuerySupportService_7796",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSpecificQueryExample": {
                    "value": {
                      "@odata.type": "#QuerySupportService.Query",
                      "ContextId": 2,
                      "Name": "",
                      "SortFields": [],
                      "ResultFields": [
                        50,
                        53,
                        52
                      ],
                      "@odata.id": "/api/QuerySupportService/Queries(25000)",
                      "@odata.context": "/api/$metadata#QuerySupportService.Query/$entity",
                      "FilterText": "",
                      "UsageId": 0,
                      "ReportSettings": [],
                      "Conditions": [
                        {
                          "LogicalOperatorId": 0,
                          "OperatorId": 11,
                          "LeftParen": true,
                          "Value": "PowerEdge",
                          "RightParen": true,
                          "FieldId": 52
                        }
                      ],
                      "Id": 25000
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/QueryDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/QuerySupportService/QueryContexts({contextId})/QuerySupportService.GetFiltersForContext": {
      "post": {
        "description": "Returns summary filter information for all queries defined by using a specific Query Context. Information is only returned for queries that have a minimum of one selection condition\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "contextId that need to be updated",
            "required": true,
            "name": "contextId",
            "in": "path"
          }
        ],
        "tags": [
          "QuerySupportService"
        ],
        "summary": "Returns summary filter information for all queries defined by using a specific Query Context. Information is only returned for queries that have a minimum of one selection condition",
        "operationId": "10_QuerySupportService_5614",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getFiltersForContextExample": {
                    "value": {
                      "value": [
                        {
                          "FilterText": "",
                          "UsageId": 2,
                          "ContextId": 2,
                          "Id": 25000,
                          "Name": "All PowerEdge Devices"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1013,
                          "Name": "Dell Compellent Arrays"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1010,
                          "Name": "Dell iDRAC Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1007,
                          "Name": "Dell Networking Switches"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1008,
                          "Name": "Fibre Channel Switches"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1017,
                          "Name": "HCI Appliances"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1014,
                          "Name": "Hypervisor Systems"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1016,
                          "Name": "Hyper-V Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1011,
                          "Name": "Linux Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1000,
                          "Name": "Modular Systems"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1006,
                          "Name": "Network Devices"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1025,
                          "Name": "Non-Dell Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1023,
                          "Name": "OEM Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1001,
                          "Name": "PowerEdge Chassis"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1002,
                          "Name": "PowerEdge FX2"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1003,
                          "Name": "PowerEdge M1000e"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1004,
                          "Name": "PowerEdge VRTX"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1009,
                          "Name": "Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1012,
                          "Name": "Storage Devices"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1015,
                          "Name": "VMware ESXi Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1018,
                          "Name": "VxRAIL"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1024,
                          "Name": "Windows Servers"
                        },
                        {
                          "FilterText": "",
                          "UsageId": 1,
                          "ContextId": 2,
                          "Id": 1019,
                          "Name": "XC"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FilterSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/QuerySupportService/OperatorInfo": {
      "get": {
        "description": "Returns a list of supported logical operators for each field type\n\nPrivilege: VIEW",
        "summary": "Returns a list of supported logical operators for each field type",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getOperatorAndFieldTypeInfoExample": {
                    "value": {
                      "@odata.type": "#QuerySupportService.OperatorInfo",
                      "Operators": [
                        {
                          "Id": 1,
                          "Name": "="
                        },
                        {
                          "Id": 2,
                          "Name": "!="
                        },
                        {
                          "Id": 3,
                          "Name": "<"
                        },
                        {
                          "Id": 4,
                          "Name": "<="
                        },
                        {
                          "Id": 5,
                          "Name": ">"
                        },
                        {
                          "Id": 6,
                          "Name": ">="
                        },
                        {
                          "Id": 7,
                          "Name": "contains"
                        },
                        {
                          "Id": 8,
                          "Name": "does not contain"
                        },
                        {
                          "Id": 9,
                          "Name": "is null"
                        },
                        {
                          "Id": 10,
                          "Name": "is not null"
                        },
                        {
                          "Id": 11,
                          "Name": "begins with"
                        },
                        {
                          "Id": 12,
                          "Name": "ends with"
                        },
                        {
                          "Id": 13,
                          "Name": "before"
                        },
                        {
                          "Id": 14,
                          "Name": "after"
                        }
                      ],
                      "@odata.id": "/api/QuerySupportService/OperatorInfo",
                      "@odata.context": "/api/$metadata#QuerySupportService.OperatorInfo/$entity",
                      "FieldTypes": [
                        {
                          "FieldTypeId": 1,
                          "Name": "String",
                          "OperatorIds": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            11,
                            12,
                            7,
                            8,
                            9,
                            10
                          ]
                        },
                        {
                          "FieldTypeId": 2,
                          "Name": "Number",
                          "OperatorIds": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            9,
                            10
                          ]
                        },
                        {
                          "FieldTypeId": 3,
                          "Name": "Date-Time",
                          "OperatorIds": [
                            1,
                            2,
                            13,
                            14,
                            9,
                            10
                          ]
                        },
                        {
                          "FieldTypeId": 4,
                          "Name": "Enum",
                          "OperatorIds": [
                            1,
                            2,
                            9,
                            10
                          ]
                        },
                        {
                          "FieldTypeId": 5,
                          "Name": "Boolean",
                          "OperatorIds": [
                            1,
                            2,
                            9,
                            10
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/OperatorAndFieldTypeInfo"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "QuerySupportService"
        ],
        "operationId": "11_QuerySupportService_5385"
      }
    },
    "/PluginService": {
      "get": {
        "description": "Get all the endpoints for Plugin Service\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Plugins",
                "PluginAvailability"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get all the endpoints for Plugin Service",
        "operationId": "1_PluginService_490",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/PluginService/PluginAvailability": {
      "get": {
        "description": "Get plugin availablility information\n\nPrivilege: VIEW",
        "summary": "Get plugin availablility information",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getPluginAvailabilityExample": {
                    "value": [
                      {
                        "@odata.type": "#PluginService.Availability",
                        "DisabledPluginsOnUpgrade": 0,
                        "AvailablePlugins": 0,
                        "DownloadedPlugins": false,
                        "@odata.id": "/api/PluginService/PluginAvailability",
                        "@odata.context": "/api/$metadata#PluginService.Availability",
                        "DisabledPluginWithDevices": 0,
                        "UpdatedPlugins": 0
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginAvailabilityStatus"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "tags": [
          "PluginService"
        ],
        "operationId": "2_PluginService_134"
      }
    },
    "/PluginService/PluginCatalogInfo": {
      "get": {
        "description": "Get plugin catalog info\n\nPrivilege: VIEW",
        "summary": "Get plugin catalog info",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getRemotePluginCatalogInfoExample": {
                    "value": [
                      {
                        "@odata.count": 0,
                        "value": [
                          {
                            "PluginId": "123456789",
                            "CatalogLocation": "../sample"
                          }
                        ],
                        "@odata.context": "/api/$metadata#Collection(PluginService.PluginCatalogLocation)"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginCatalogLocations"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "tags": [
          "PluginService"
        ],
        "operationId": "3_PluginService_2139"
      }
    },
    "/PluginService/Plugins": {
      "get": {
        "description": "Get the list of metrics component Id\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Auto",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "VersionDetails"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get the list of metrics component Id",
        "operationId": "4_PluginService_8848",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginInfo"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/PluginService/Plugins({pluginId})": {
      "get": {
        "description": "Get the plugin information\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:pluginId",
            "required": true,
            "name": "pluginId",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "VersionDetails"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get the plugin information",
        "operationId": "5_PluginService_1728",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginInfo"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/PluginService/Plugins(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginInfo"
              }
            }
          },
          "required": true,
          "description": "update PluginInfo object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Update plugin information\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "PluginService"
        ],
        "operationId": "6_PluginService_4526",
        "summary": "Update plugin information"
      }
    },
    "/PluginService/Plugins({pluginId})/AvailableVersionDetails": {
      "get": {
        "description": "Get available plugin version details\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:pluginId",
            "required": true,
            "name": "pluginId",
            "in": "path"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get available plugin version details",
        "operationId": "7_PluginService_810",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "findAllVersionByPluginIdExample": {
                    "value": [
                      {
                        "@odata.count": 1,
                        "value": [
                          {
                            "@odata.type": "#PluginService.VersionDetail",
                            "Description": "Dell OpenManage Enterprise Power Manager is a plugin to the Dell EMC OpenManage Enterprise console and uses fine-grained instrumentation to provide increased visibility over power consumption, anomalies, and utilization.  In addition, the Power Manager plugin alerts and reports on thermal events with servers and groups of servers.  This enables increased control, faster response times, greater accuracy, and broader decision-making intelligence than would otherwise be possible. When used with Dell EMC PowerEdge servers or chassis with the required iDRAC Enterprise or Chassis Management Control (CMC) Enterprise license, OpenManage Enterprise Power Manager leverages information from the OpenManage Enterprise console for platform-level power management. OpenManage Enterprise Power Manager then communicates with Integrated Dell Remote Access Controller (iDRAC) or CMC on each managed server or chassis to provide power-management data, as well as execution of control policy - making it easy for IT professionals to identify areas to gain efficiencies and cut wasteful costs. Features vary by access method and server model - Please contact Sales or refer to: dell.com/support.",
                            "DownloadProgress": null,
                            "LicenseAgreements": {
                              "@odata.id": "/api/PluginService/Plugins('2F6D05BE-EE4B-4B0E-B873-C8D2F64A4625')/AvailableVersionDetails('2.0.0.557')/LicenseAgreements"
                            },
                            "PackageSize": null,
                            "Downloaded": false,
                            "Version": "2.0.0.557",
                            "ReleaseNoteURL": null,
                            "MinimumOmeVersionRequired": "3.6.0.0"
                          }
                        ],
                        "@odata.context": "/api/$metadata#Collection(PluginService.VersionDetail)"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VersionInfo"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/PluginService/Plugins({pluginId})/AvailableVersionDetails({version})": {
      "get": {
        "description": "Get available plugin version details based on the version\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:pluginId",
            "required": true,
            "name": "pluginId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:version",
            "required": true,
            "name": "version",
            "in": "path"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get available plugin version details based on the version",
        "operationId": "8_PluginService_2191",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "findVersionByPluginIdAndVersionExample": {
                    "value": [
                      {
                        "@odata.type": "#PluginService.VersionDetail",
                        "Description": "Dell OpenManage Enterprise Power Manager is a plugin to the Dell EMC OpenManage Enterprise console and uses fine-grained instrumentation to provide increased visibility over power consumption, anomalies, and utilization.  In addition, the Power Manager plugin alerts and reports on thermal events with servers and groups of servers.  This enables increased control, faster response times, greater accuracy, and broader decision-making intelligence than would otherwise be possible. When used with Dell EMC PowerEdge servers or chassis with the required iDRAC Enterprise or Chassis Management Control (CMC) Enterprise license, OpenManage Enterprise Power Manager leverages information from the OpenManage Enterprise console for platform-level power management. OpenManage Enterprise Power Manager then communicates with Integrated Dell Remote Access Controller (iDRAC) or CMC on each managed server or chassis to provide power-management data, as well as execution of control policy - making it easy for IT professionals to identify areas to gain efficiencies and cut wasteful costs. Features vary by access method and server model - Please contact Sales or refer to: dell.com/support.",
                        "DownloadProgress": "100",
                        "@odata.id": "/api/PluginService/Plugins('2F6D05BE-EE4B-4B0E-B873-C8D2F64A4625')/AvailableVersionDetails('2.0.0.254')",
                        "@odata.context": "/api/$metadata#PluginService.VersionDetail",
                        "LicenseAgreements": {
                          "@odata.id": "/api/PluginService/Plugins('2F6D05BE-EE4B-4B0E-B873-C8D2F64A4625')/AvailableVersionDetails('2.0.0.254')/LicenseAgreements"
                        },
                        "PackageSize": "6040079",
                        "Downloaded": true,
                        "Version": "2.0.0.254",
                        "ReleaseNoteURL": "https://www.dell.com/openmanage-enterprise-power-manager",
                        "MinimumOmeVersionRequired": "3.6.0"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VersionInfo"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/PluginService/Plugins({pluginId})/AvailableVersionDetails({version})/LicenseAgreements": {
      "get": {
        "description": "Get the license agreements for this plugin's version\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:pluginId",
            "required": true,
            "name": "pluginId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:version",
            "required": true,
            "name": "version",
            "in": "path"
          }
        ],
        "tags": [
          "PluginService"
        ],
        "summary": "Get the license agreements for this plugin's version",
        "operationId": "9_PluginService_9420",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getLicenseAgreementsForPluginByVersionExample": {
                    "value": [
                      {
                        "@odata.count": 2,
                        "value": [
                          {
                            "@odata.type": "#PluginService.LicenseAgreement",
                            "Content": "EULA example content",
                            "Title": "END USER LICENSE AGREEMENT"
                          },
                          {
                            "@odata.type": "#PluginService.LicenseAgreement",
                            "Content": "ITN example content",
                            "Title": "INFRASTRUCTURE TELEMETRY NOTICE"
                          }
                        ],
                        "@odata.context": "/api/$metadata#Collection(PluginService.LicenseAgreement)"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LicenseAgreement"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/PluginService/Actions/PluginService.CheckPluginCompatibility": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsCompatibilityReq"
              }
            }
          },
          "required": true,
          "description": "update PluginsCompatibilityReq object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getPluginCompatibilityWithOmeVersionExample": {
                    "value": [
                      {
                        "Plugins": [
                          {
                            "Compatible": true,
                            "Id": "2F6D05BE-EE4B-4B0E-B873-C8D2F64A4625"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginsCompatibilityResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Check for plugin comaptibility\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "PluginService"
        ],
        "operationId": "10_PluginService_5833",
        "summary": "Check for plugin comaptibility"
      }
    },
    "/PluginService/Actions/PluginService.CheckPluginActionCompatibility": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsLifecycleActionCompatibilityRequestModel"
              }
            }
          },
          "required": true,
          "description": "update PluginsLifecycleActionCompatibilityRequestModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getPluginCompatibilityWithActionExample": {
                    "value": [
                      {
                        "Plugins": [
                          {
                            "Compatible": true,
                            "Messages": [
                              {}
                            ],
                            "Id": "2F6D05BE-EE4B-4B0E-B873-C8D2F64A4625"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PluginsLifecycleActionCompatibilityResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Check for plugin action comaptibility\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "PluginService"
        ],
        "operationId": "11_PluginService_285",
        "summary": "Check for plugin action comaptibility"
      }
    },
    "/PluginService/Actions/PluginService.DeleteDownloads": {
      "post": {
        "description": "Delete plugin downloads\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "Delete plugin downloads",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "tags": [
          "PluginService"
        ],
        "operationId": "12_PluginService_7838"
      }
    },
    "/PluginService/Actions/PluginService.UpdateConsolePlugins": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PluginsActionRequest"
              }
            }
          },
          "required": true,
          "description": "update PluginsActionRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Update console plugins\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "PluginService"
        ],
        "operationId": "13_PluginService_9712",
        "summary": "Update console plugins"
      }
    },
    "/DeviceService": {
      "get": {
        "description": "Returns a list of device services\n\nPrivilege: VIEW",
        "summary": "Returns a list of device services",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DeviceService"
        ],
        "operationId": "1_DeviceService_2996"
      }
    },
    "/DeviceService/Devices": {
      "get": {
        "description": "Returns a list of all the first 50 devices by ID. \n \nThis API is maintained for backward compatibility only. It is recommended that you use GroupService/Groups(id)/AllLeafDeviceSummaries instead. \n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,DeviceIps,DeviceManagement/NetworkAddress,DeviceHostnames,DeviceName,DeviceIdentifiers,Identifier,Type,SystemId,PowerState,ManagedState,ConnectionState,Status,DeviceModels,Model,OperationName,DeviceServiceTag,Enabled,SlotConfiguration/ChassisName,ConnectionStateReason",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Status",
                "Status desc",
                "Type",
                "Type desc",
                "DeviceName",
                "DeviceName desc",
                "PowerState",
                "PowerState desc",
                "Model",
                "Model desc",
                "Identifier",
                "Identifier desc",
                "DeviceServiceTag",
                "DeviceServiceTag desc",
                "ChassisServiceTag",
                "ChassisServiceTag desc",
                "AssetTag",
                "AssetTag desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns a list of all the devices.",
        "operationId": "2_DeviceService_5122",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InfrastructureDeviceReducedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})": {
      "delete": {
        "description": "Delete a device.\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Delete a device.",
        "operationId": "41_DeviceService_5413",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Returns the details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the details of a specific device",
        "operationId": "3_DeviceService_9440",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InfrastructureDeviceReducedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/DeviceService.ExecuteAction": {
      "post": {
        "description": "Returns the remote console preview information\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the remote console preview information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "operationId": "4_DeviceService_1014",
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Actions/DeviceService.UploadFSDCertificate": {
      "post": {
        "description": "Returns information about the FSD certificate upload process\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns information about the FSD certificate upload process",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "operationId": "5_DeviceService_5309",
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/DeviceService/Actions/DeviceService.ExecuteAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This API performs an action on a device\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "DeviceService"
        ],
        "operationId": "6_DeviceService_1421",
        "summary": "This API performs an action on a device"
      }
    },
    "/DeviceService/Actions/DeviceService.DevicesPrivilegesAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionGetDevicesPrivilegesPayload"
              }
            }
          },
          "required": true,
          "description": "update ActionGetDevicesPrivilegesPayload object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "postPerformGetDevicesPrivilegesActionExample": {
                    "value": [
                      {
                        "Privileges": [
                          "DEVICE_UPDATE",
                          "POWER_CONTROL",
                          "OPERATING_SYSTEM_DEPLOYMENT",
                          "TRAP_MANAGEMENT",
                          "DEVICE_CONFIGURATION",
                          "NETWORK_MANAGEMENT",
                          "FABRIC_MANAGEMENT",
                          "VIEW",
                          "TEMPLATE_MANAGEMENT",
                          "SECURITY_SETUP",
                          "GROUP_MANAGEMENT",
                          "INVENTORY_MANAGEMENT",
                          "ALERT_MANAGEMENT",
                          "REPORT_MANAGEMENT",
                          "AUTO_DEPLOY_MANAGEMENT",
                          "JOB_MANAGEMENT",
                          "BASELINE_MANAGEMENT",
                          "MONITORING_SETUP",
                          "REPORT_RUN",
                          "DISCOVERY_MANAGEMENT",
                          "POWER_MANAGEMENT",
                          "APPLIANCE_SETUP"
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DevicesPrivilegesResponseModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the device privilege information that the user has for the device\n\nPrivilege: VIEW",
        "tags": [
          "DeviceService"
        ],
        "operationId": "7_DeviceService_3776",
        "summary": "Returns the device privilege information that the user has for the device"
      }
    },
    "/DeviceService/Actions/DeviceService.DevicesByPrivilegesAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionGetDevicesByPrivilegesPayload"
              }
            }
          },
          "required": true,
          "description": "update ActionGetDevicesByPrivilegesPayload object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "postPerformGetDevicesByPrivilegesActionExample": {
                    "value": [
                      {
                        "Count": 80,
                        "Devices": [
                          {
                            "SlotConfiguration": null,
                            "PowerState": 17,
                            "SubSystemRollupStatus": [],
                            "DeviceSoftware": [],
                            "SystemId": 0,
                            "DeviceLicense": [],
                            "Type": 1000,
                            "Status": 1000,
                            "DeviceName": "MINWINPC",
                            "InventoryDetails": [],
                            "DeviceSubscription": null,
                            "DeviceManagement": [
                              {
                                "MacAddress": "10:98:36:99:d0:d0",
                                "NetworkAddress": "10.35.0.112",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "idrac-1234567.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:12:07.732",
                                    "ManagementURL": "https://10.35.0.112:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6056,
                                    "Version": "2.20.20.20",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6056
                                  }
                                ],
                                "ManagementId": 6056
                              },
                              {
                                "MacAddress": "10:98:36:b1:ff:47",
                                "NetworkAddress": "10.36.0.89",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "idrac-svctag.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:14:17.344",
                                    "ManagementURL": "https://10.36.0.89:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6251,
                                    "Version": "4.20.20.20",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6251
                                  }
                                ],
                                "ManagementId": 6251
                              },
                              {
                                "MacAddress": "f4:8e:38:cf:16:c2",
                                "NetworkAddress": "10.35.0.156",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "ekms-idrac1.smd.devops.dell.com",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:12:44.181",
                                    "ManagementURL": "https://10.35.0.156:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6145,
                                    "Version": "4.30.30.30",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6145
                                  }
                                ],
                                "ManagementId": 6145
                              },
                              {
                                "MacAddress": "54:bf:64:f8:29:32",
                                "NetworkAddress": "10.35.0.210",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "idrac-1234567.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:12:15.478",
                                    "ManagementURL": "https://10.35.0.107:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6072,
                                    "Version": "4.30.30.30",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6072
                                  }
                                ],
                                "ManagementId": 6072
                              },
                              {
                                "MacAddress": "f4:8e:38:cf:16:08",
                                "NetworkAddress": "10.35.0.107",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "idrac-1234567.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:13:36.323",
                                    "ManagementURL": "https://10.35.0.210:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6195,
                                    "Version": "4.30.30.30",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6195
                                  }
                                ],
                                "ManagementId": 6195
                              },
                              {
                                "MacAddress": "54:bf:64:f8:29:32",
                                "NetworkAddress": "10.35.0.210",
                                "InstrumentationName": "MINWINPC",
                                "ManagementType": 2,
                                "DnsName": "idrac-1234567.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:12:30.523",
                                    "ManagementURL": "https://10.35.0.210:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6120,
                                    "Version": "3.40.40.40",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6120
                                  }
                                ],
                                "ManagementId": 6120
                              }
                            ],
                            "Editable": null,
                            "ConnectionState": true,
                            "ManagedState": 0,
                            "ChassisServiceTag": null,
                            "AssetTag": null,
                            "Model": "PowerEdge R7515",
                            "Identifier": "1234567",
                            "LastStatusTime": null,
                            "DeviceSpecificData": null,
                            "DeviceFru": [],
                            "Id": 11162,
                            "Visible": null,
                            "LastInventoryTime": null,
                            "DeviceServiceTag": "1234567",
                            "DeviceCapabilities": []
                          },
                          {
                            "SlotConfiguration": null,
                            "PowerState": 18,
                            "SubSystemRollupStatus": [],
                            "DeviceSoftware": [],
                            "SystemId": 0,
                            "DeviceLicense": [],
                            "Type": 1000,
                            "Status": 1000,
                            "DeviceName": "localhost.smd.devops.dell.com",
                            "InventoryDetails": [],
                            "DeviceSubscription": null,
                            "DeviceManagement": [
                              {
                                "MacAddress": "18:a9:9b:fd:cb:37",
                                "NetworkAddress": "10.35.0.72",
                                "InstrumentationName": "localhost.smd.devops.dell.com",
                                "ManagementType": 2,
                                "DnsName": "idrac.smd.devops.dell.com.",
                                "ManagementProfile": [
                                  {
                                    "Status": 1000,
                                    "StatusDateTime": "2020-07-02 08:12:13.654",
                                    "ManagementURL": "https://10.35.0.72:443",
                                    "HasCreds": 0,
                                    "ManagementProfileId": 6066,
                                    "Version": "2.70.70.70",
                                    "AgentName": "iDRAC",
                                    "ProfileId": null,
                                    "ManagementId": 6066
                                  }
                                ],
                                "ManagementId": 6066
                              }
                            ],
                            "Editable": null,
                            "ConnectionState": true,
                            "ManagedState": 0,
                            "ChassisServiceTag": null,
                            "AssetTag": null,
                            "Model": "PowerEdge M630 (VRTX)",
                            "Identifier": "VBC1234",
                            "LastStatusTime": null,
                            "DeviceSpecificData": null,
                            "DeviceFru": [],
                            "Id": 11167,
                            "Visible": null,
                            "LastInventoryTime": null,
                            "DeviceServiceTag": "VBC1234",
                            "DeviceCapabilities": []
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceResponseModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the remote console preview information\n\nPrivilege: VIEW",
        "tags": [
          "DeviceService"
        ],
        "operationId": "8_DeviceService_9330",
        "summary": "Returns the remote console preview information"
      }
    },
    "/DeviceService/Devices({deviceId})/Actions/DeviceService.Diagnostic": {
      "post": {
        "description": "Executes supported diagnostic commands. The following commands are supported: ping IPv4 or ping DomainName, ping6 IPv6, traceroute IPv4, traceroute6 IPv6, netstat, ifconfig, arp\n\nPrivilege: APPLIANCE_SETUP",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Executes supported diagnostic commands. The following commands are supported: ping IPv4 or ping DomainName, ping6 IPv6, traceroute IPv4, traceroute6 IPv6, netstat, ifconfig, arp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagnosticModel"
              }
            }
          },
          "required": true,
          "description": "update DiagnosticModel object"
        },
        "operationId": "9_DeviceService_589",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiagnosticModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/InventoryTypes": {
      "get": {
        "description": "Returns the inventory types for a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the inventory types for a specific device",
        "operationId": "10_DeviceService_4332",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSupportedInventoryTypesExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.InventoryTypes",
                        "InventoryTypes": [
                          "chassisPowerSupplies",
                          "chassisSlotsList",
                          "chassisControllerList",
                          "chassisPciDeviceList",
                          "chassisFansList",
                          "chassisTemperatureList",
                          "deviceLicense",
                          "deviceCapabilities",
                          "deviceFru",
                          "deviceManagement",
                          "deviceSoftware",
                          "subsystemRollupStatus",
                          "chassisStackMemberList"
                        ],
                        "@odata.id": "/api/DeviceService/Devices(17681)/InventoryTypes",
                        "@odata.context": "/api/$metadata#DeviceService.InventoryTypes"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InventoryTypesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/LogSeverities": {
      "get": {
        "description": "Returns the log-severity details for a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the log-severity details for a specific device",
        "operationId": "11_DeviceService_7019",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSupportedLogSeveritiesExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.LogSeverities",
                        "Info": 1000,
                        "Warning": 2000,
                        "@odata.id": "/api/DeviceService/Devices(17681)/LogSeverities",
                        "@odata.context": "/api/$metadata#DeviceService.LogSeverities",
                        "Critical": 3000,
                        "Fatal": 4000
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LogSeverityEnumModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Settings": {
      "get": {
        "description": "Returns the details of the settings of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the details of the settings of a specific device",
        "operationId": "12_DeviceService_4683",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceSettingsExample": {
                    "value": {
                      "@odata.count": 8,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('Power')",
                          "SettingType": "Power"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('Location')",
                          "SettingType": "Location"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('LocalAccessConfiguration')",
                          "SettingType": "LocalAccessConfiguration"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('Network')",
                          "SettingType": "Network"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('NetworkServices')",
                          "SettingType": "NetworkServices"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('ServerQuickDeploy')",
                          "SettingType": "ServerQuickDeploy"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('IOMQuickDeploy')",
                          "SettingType": "IOMQuickDeploy"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSetting",
                          "@odata.id": "/api/DeviceService/Devices(17681)/Settings('FIPSMode')",
                          "SettingType": "FIPSMode"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.DeviceSetting)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSettingsMetadataResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Settings({settingType})": {
      "put": {
        "description": "Updates attributes under a specific setting type\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string"
            },
            "description": "settingType that need to be updated",
            "required": true,
            "name": "settingType",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Updates attributes under a specific setting type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "inputArgs": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "operationId": "14_DeviceService_7888",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "updateDeviceSettingsExample": {
                    "value": [
                      {
                        "DataCenter": "",
                        "Room": "",
                        "Aisle": "",
                        "RackSlot": 1,
                        "SettingType": "Location",
                        "RackName": "",
                        "Location": ""
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSettingsMetadataResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "description": "Returns the available attributes under a specific setting type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:settingType",
            "required": true,
            "name": "settingType",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the available attributes under a specific setting type",
        "operationId": "13_DeviceService_3834",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceSettingsByTypeExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.DeviceSetting",
                        "DataCenter": "",
                        "Room": "",
                        "Aisle": "",
                        "@odata.id": "/api/DeviceService/Devices(17681)/Settings('Location')",
                        "@odata.context": "/api/$metadata#DeviceService.DeviceSetting",
                        "RackSlot": 1,
                        "SettingType": "Location",
                        "RackName": "",
                        "Location": ""
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSettingsMetadataResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/InventoryDetails": {
      "get": {
        "description": "Returns the inventory details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the inventory details of a specific device",
        "operationId": "15_DeviceService_7629",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getInventoryDetailsByDeviceIdExample": {
                    "value": {
                      "@odata.count": 18,
                      "value": [
                        {
                          "InventoryType": "serverDeviceCards",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverDeviceCards')",
                          "InventoryInfo": [
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg SMBus",
                              "DatabusWidth": "Unknown",
                              "Id": 127,
                              "SlotNumber": "SMBus.Embedded.3-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg PCI Express Root Port #1",
                              "DatabusWidth": "Unknown",
                              "Id": 128,
                              "SlotNumber": "P2PBridge.Embedded.1-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Intel Corporation",
                              "DatabusWidth": "Unknown",
                              "Id": 129,
                              "SlotNumber": "HostBridge.Embedded.1-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Matrox Electronics Systems Ltd.",
                              "DatabusWidth": "Unknown",
                              "Id": 130,
                              "SlotNumber": "Video.Embedded.1-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Matrox Electronics Systems Ltd."
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg LPC Controller",
                              "DatabusWidth": "Unknown",
                              "Id": 131,
                              "SlotNumber": "ISABridge.Embedded.1-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg SSATA Controller [AHCI mode]",
                              "DatabusWidth": "Unknown",
                              "Id": 132,
                              "SlotNumber": "AHCI.Embedded.1-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg PCI Express Root Port #5",
                              "DatabusWidth": "Unknown",
                              "Id": 133,
                              "SlotNumber": "P2PBridge.Embedded.2-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            },
                            {
                              "SlotType": "Unknown",
                              "Description": "Lewisburg SATA Controller [AHCI mode]",
                              "DatabusWidth": "Unknown",
                              "Id": 134,
                              "SlotNumber": "AHCI.Embedded.2-1",
                              "SlotLength": "Unknown",
                              "Manufacturer": "Intel Corporation"
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverProcessors",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverProcessors')",
                          "InventoryInfo": [
                            {
                              "Status": 2000,
                              "MaxSpeed": 4000,
                              "SlotNumber": "CPU.Socket.1",
                              "Family": "Intel(R) Xeon(TM)",
                              "InstanceId": "CPU.Socket.1",
                              "ModelName": "Genuine Intel(R) CPU 0000%@",
                              "NumberOfCores": 8,
                              "BrandName": "Intel",
                              "Voltage": "1.8",
                              "NumberOfEnabledCores": 8,
                              "CurrentSpeed": 1600,
                              "Id": 28
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverNetworkInterfaces",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverNetworkInterfaces')",
                          "InventoryInfo": []
                        },
                        {
                          "InventoryType": "serverOperatingSystems",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverOperatingSystems')",
                          "InventoryInfo": [
                            {
                              "Hostname": "WIN-02GODDHDJTC",
                              "Id": 19
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverVirtualFlashes",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverVirtualFlashes')",
                          "InventoryInfo": []
                        },
                        {
                          "InventoryType": "serverPowerSupplies",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverPowerSupplies')",
                          "InventoryInfo": []
                        },
                        {
                          "InventoryType": "serverArrayDisks",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverArrayDisks')",
                          "InventoryInfo": [
                            {
                              "Status": 2000,
                              "FreeSpace": "0 bytes",
                              "MediaType": "Magnetic Drive",
                              "Size": "931.52 GB",
                              "SecurityState": "Not Capable",
                              "SlotNumber": 0,
                              "RemainingReadWriteEndurance": "255",
                              "SerialNumber": "S47171Y1",
                              "BusType": "SATA",
                              "UsedSpace": "0 bytes",
                              "VendorName": "SEAGATE",
                              "EnclosureId": "Disk 0 on Embedded AHCI Controller 2",
                              "DiskNumber": "Disk 0 on Embedded AHCI Controller 2",
                              "ModelNumber": "ST1000NX0423",
                              "StatusString": "Unknown",
                              "Revision": "NA03",
                              "Id": 10,
                              "Channel": 0,
                              "DeviceId": 0
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverRaidControllers",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverRaidControllers')",
                          "InventoryInfo": [
                            {
                              "Status": 2000,
                              "RollupStatusString": "UNKNOWN",
                              "Name": "Lewisburg SATA Controller [AHCI mode]",
                              "Fqdd": "AHCI.Embedded.2-1",
                              "CacheSizeInMb": 0,
                              "PciSlot": 0,
                              "DeviceId": 0,
                              "StatusTypeString": "UNKNOWN",
                              "RollupStatus": 2000,
                              "Id": 20
                            },
                            {
                              "Status": 2000,
                              "RollupStatusString": "UNKNOWN",
                              "Name": "Lewisburg SSATA Controller [AHCI mode]",
                              "Fqdd": "AHCI.Embedded.1-1",
                              "CacheSizeInMb": 0,
                              "PciSlot": 0,
                              "DeviceId": 0,
                              "StatusTypeString": "UNKNOWN",
                              "RollupStatus": 2000,
                              "Id": 19
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverMemoryDevices",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverMemoryDevices')",
                          "InventoryInfo": [
                            {
                              "Status": 2000,
                              "Name": "DIMM.Socket.A1",
                              "BankName": "A",
                              "InstanceId": "DIMM.Socket.A1",
                              "SerialNumber": "1446F14C",
                              "Rank": "Single Rank",
                              "TypeDetails": "DDR4 DIMM",
                              "CurrentOperatingSpeed": 2133,
                              "DeviceDescription": "DIMM A1",
                              "ManufacturerDate": "Mon Oct 17 07:00:00 2016 UTC",
                              "PartNumber": "9ASF1G72PZ-2G6D1",
                              "Manufacturer": "Micron Technology",
                              "Speed": 2666,
                              "Id": 19,
                              "Size": 8192
                            }
                          ]
                        },
                        {
                          "InventoryType": "serverStorageEnclosures",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverStorageEnclosures')",
                          "InventoryInfo": []
                        },
                        {
                          "InventoryType": "serverSupportedPowerStates",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('serverSupportedPowerStates')",
                          "InventoryInfo": [
                            {
                              "PowerState": 2,
                              "Id": 109
                            },
                            {
                              "PowerState": 5,
                              "Id": 110
                            },
                            {
                              "PowerState": 8,
                              "Id": 111
                            },
                            {
                              "PowerState": 10,
                              "Id": 112
                            },
                            {
                              "PowerState": 11,
                              "Id": 113
                            },
                            {
                              "PowerState": 12,
                              "Id": 114
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceLicense",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceLicense')",
                          "InventoryInfo": [
                            {
                              "EvalTimeRemaining": 0,
                              "EntitlementId": "PX1234567",
                              "LicenseType": {
                                "LicenseId": 1,
                                "Name": "Perpetual"
                              },
                              "AssignedDevices": "iDRAC.Embedded.1",
                              "SoldDate": "2016-06-12 14:48:13.000",
                              "LicenseStatus": 3000,
                              "LicenseDescription": "iDRAC9 Enterprise License",
                              "LicenseBound": 4
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceCapabilities",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceCapabilities')",
                          "InventoryInfo": [
                            {
                              "CapabilityType": {
                                "Description": "14G specific features",
                                "CapabilityId": 17,
                                "Name": "FEATURES_14G"
                              },
                              "Id": 366
                            },
                            {
                              "CapabilityType": {
                                "Description": "Ability to execute RACADM tasks",
                                "CapabilityId": 16,
                                "Name": "VIRTUAL_CONSOLE"
                              },
                              "Id": 367
                            },
                            {
                              "CapabilityType": {
                                "Description": "Retrieve historical temperature data",
                                "CapabilityId": 15,
                                "Name": "TEMP_HISTORY"
                              },
                              "Id": 368
                            },
                            {
                              "CapabilityType": {
                                "Description": "Retrieve historical power data",
                                "CapabilityId": 14,
                                "Name": "POWER_HISTORY"
                              },
                              "Id": 369
                            },
                            {
                              "CapabilityType": {
                                "Description": "Tech Support Report",
                                "CapabilityId": 13,
                                "Name": "TSR"
                              },
                              "Id": 370
                            },
                            {
                              "CapabilityType": {
                                "Description": "Diagnostics",
                                "CapabilityId": 12,
                                "Name": "DIAGS"
                              },
                              "Id": 371
                            },
                            {
                              "CapabilityType": {
                                "Description": "System Hardware logs",
                                "CapabilityId": 11,
                                "Name": "HW_LOGS "
                              },
                              "Id": 372
                            },
                            {
                              "CapabilityType": {
                                "Description": "Identify function on a device",
                                "CapabilityId": 9,
                                "Name": "BLINK"
                              },
                              "Id": 373
                            },
                            {
                              "CapabilityType": {
                                "Description": "Capability to share externally assigned Storage",
                                "CapabilityId": 41,
                                "Name": "SHARED_STORAGE_ALLLOWED"
                              },
                              "Id": 374
                            },
                            {
                              "CapabilityType": {
                                "Description": "Remote Firmware update capability. ",
                                "CapabilityId": 8,
                                "Name": "FW_UPDATE"
                              },
                              "Id": 375
                            },
                            {
                              "CapabilityType": {
                                "Description": "Set attributes on the system",
                                "CapabilityId": 7,
                                "Name": "CONFIGURE"
                              },
                              "Id": 376
                            },
                            {
                              "CapabilityType": {
                                "Description": "Get Sensor Info, sub system health details",
                                "CapabilityId": 4,
                                "Name": "SENSOR_DETAILS"
                              },
                              "Id": 377
                            },
                            {
                              "CapabilityType": {
                                "Description": "Power reset hard/graceful",
                                "CapabilityId": 3,
                                "Name": "POWER_CONTROL_RESET"
                              },
                              "Id": 378
                            },
                            {
                              "CapabilityType": {
                                "Description": "Power Down hard/graceful",
                                "CapabilityId": 2,
                                "Name": "POWER_CONTROL_OFF"
                              },
                              "Id": 379
                            },
                            {
                              "CapabilityType": {
                                "Description": "Power up",
                                "CapabilityId": 1,
                                "Name": "POWER_CONTROL_ON"
                              },
                              "Id": 380
                            },
                            {
                              "CapabilityType": {
                                "Description": "14G specific features",
                                "CapabilityId": 32,
                                "Name": "REMOTE_SSH"
                              },
                              "Id": 381
                            },
                            {
                              "CapabilityType": {
                                "Description": "14G specific features",
                                "CapabilityId": 31,
                                "Name": "REMOTE_IPMI"
                              },
                              "Id": 382
                            },
                            {
                              "CapabilityType": {
                                "Description": "14G specific features",
                                "CapabilityId": 30,
                                "Name": "REMOTE_RACADM"
                              },
                              "Id": 383
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceFru",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceFru')",
                          "InventoryInfo": [
                            {
                              "Name": "SystemPlanar",
                              "Id": 38,
                              "Manufacturer": "Dell Inc."
                            },
                            {
                              "Name": "DDR4 DIMM",
                              "SerialNumber": "1446F14C",
                              "Id": 37,
                              "PartNumber": "9ASF1G72PZ-2G6D1",
                              "Manufacturer": "Micron Technology"
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceLocation",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceLocation')",
                          "InventoryInfo": [
                            {
                              "Aisle": "Lakeln",
                              "Id": 19,
                              "Datacenter": "AlladiaAnoop",
                              "Rack": "78"
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceManagement",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceManagement')",
                          "InventoryInfo": [
                            {
                              "MacAddress": "18:66:da:a6:c2:1d",
                              "InstrumentationName": "WIN-02GODDHDJTC",
                              "ManagementType": {
                                "ManagementType": 2,
                                "Name": "PUBLIC",
                                "Description": "Public Management Interface"
                              },
                              "DnsName": "iDRAC-SVCTG06",
                              "EndPointAgents": [
                                {
                                  "Status": 1000,
                                  "ManagementURL": "https://[ IP Address ]",
                                  "StatusDateTime": "2020-09-22 14:53:21.330",
                                  "ManagementProfileId": 5003,
                                  "Version": "3.20.20.20",
                                  "AgentName": "iDRAC",
                                  "ProfileId": ""
                                }
                              ],
                              "IpAddress": "xx.xx.xx.xx",
                              "ManagementId": 5003
                            }
                          ]
                        },
                        {
                          "InventoryType": "deviceSoftware",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('deviceSoftware')",
                          "InventoryInfo": [
                            {
                              "Status": "Installed",
                              "SoftwareType": "APAC",
                              "DeviceDescription": "Diagnostics",
                              "InstanceId": "DCIM:INSTALLED#802__Diagnostics.Embedded.1:LC.Embedded.1",
                              "Version": "0",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "25806"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "APAC",
                              "DeviceDescription": "OS Drivers Pack",
                              "InstanceId": "DCIM:INSTALLED#802__DriverPack.Embedded.1:LC.Embedded.1",
                              "Version": "0",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "18981"
                            },
                            {
                              "Status": "Available",
                              "SoftwareType": "FRMW",
                              "DeviceDescription": "Integrated Dell Remote Access Controller",
                              "InstanceId": "DCIM:PREVIOUS#iDRAC.Embedded.1-1#IDRACinfo",
                              "Version": "3.20.20.20",
                              "InstallationDate": "NA",
                              "ComponentId": "25227"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "BIOS",
                              "DeviceDescription": "BIOS",
                              "InstanceId": "DCIM:INSTALLED#741__BIOS.Setup.1-1",
                              "Version": "0.3.0",
                              "InstallationDate": "2017-06-16T01:22:28Z",
                              "ComponentId": "159"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "FRMW",
                              "DeviceDescription": "Disk 0 on Embedded AHCI Controller 2",
                              "InstanceId": "DCIM:INSTALLED#304_C_Disk.Direct.0-0:AHCI.Embedded.2-1",
                              "Version": "NA03",
                              "InstallationDate": "2017-07-21T03:30:51Z",
                              "ComponentId": "104258"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "FRMW",
                              "DeviceDescription": "Integrated Dell Remote Access Controller",
                              "InstanceId": "DCIM:INSTALLED#iDRAC.Embedded.1-1#IDRACinfo",
                              "Version": "3.20.20.20",
                              "InstallationDate": "2017-06-16T00:54:04Z",
                              "ComponentId": "25227"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "APAC",
                              "DeviceDescription": "OS Collector",
                              "InstanceId": "DCIM:INSTALLED#802__OSCollector.Embedded.1",
                              "Version": "0",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "101734"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "APAC",
                              "DeviceDescription": "iDRAC Service Module Installer",
                              "InstanceId": "DCIM:INSTALLED#802__ServiceModule.Embedded.1",
                              "Version": "0",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "104684"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "APAC",
                              "DeviceDescription": "Lifecycle Controller",
                              "InstanceId": "DCIM:INSTALLED#802__USC.Embedded.1:LC.Embedded.1",
                              "Version": "3.20.20.20",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "28897"
                            },
                            {
                              "Status": "Installed",
                              "SoftwareType": "FRMW",
                              "DeviceDescription": "System CPLD",
                              "InstanceId": "DCIM:INSTALLED#803__CPLD.Embedded.1",
                              "Version": "0.2.1",
                              "InstallationDate": "2017-06-16T00:54:12Z",
                              "ComponentId": "27763"
                            }
                          ]
                        },
                        {
                          "InventoryType": "subsystemRollupStatus",
                          "@odata.id": "/api/DeviceService/Devices(3315)/InventoryDetails('subsystemRollupStatus')",
                          "InventoryInfo": [
                            {
                              "Status": 2000,
                              "Id": 145,
                              "SubsystemName": "cpuRollupStatus"
                            },
                            {
                              "Status": 1000,
                              "Id": 146,
                              "SubsystemName": "sysMemPrimaryStatus"
                            },
                            {
                              "Status": 1000,
                              "Id": 147,
                              "SubsystemName": "voltRollupStatus"
                            },
                            {
                              "Status": 1000,
                              "Id": 148,
                              "SubsystemName": "batteryRollupStatus"
                            },
                            {
                              "Status": 3000,
                              "Id": 149,
                              "SubsystemName": "licensingRollupStatus"
                            },
                            {
                              "Status": 1000,
                              "Id": 150,
                              "SubsystemName": "storageRollupStatus"
                            },
                            {
                              "Status": 1000,
                              "Id": 151,
                              "SubsystemName": "tempRollupStatus"
                            },
                            {
                              "Status": 2000,
                              "Id": 152,
                              "SubsystemName": "intrusionRollupStatus"
                            }
                          ]
                        }
                      ],
                      "@odata.context": "$metadata#Collection(DeviceService.InventoryDetail)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InventoryDetailResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/DeployRequired": {
      "get": {
        "description": "Returns the results for deployment on devices by IDs\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the results for deployment on devices by IDs",
        "operationId": "16_DeviceService_2923",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeployRequiredExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.DeployRequired",
                        "DeployRequired": false,
                        "@odata.id": "/api/DeviceService/Devices(17682)/DeployRequired",
                        "@odata.context": "/api/$metadata#DeviceService.DeployRequired"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeployRequiredResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/HardwareLogs": {
      "get": {
        "description": "Returns the hardware logs of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName,LogTimestampBegin,LogTimestampEnd,LogSequenceNumber,LogSeverity,LogMessageId,LogCategory",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the hardware logs of a specific device",
        "operationId": "17_DeviceService_7961",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getHardwareLogsExample": {
                    "value": {
                      "@odata.count": 1993,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1993,
                          "LogId": "1993",
                          "LogTimestamp": "2020-09-02T00:08:49+00:00",
                          "LogSeverity": 1000,
                          "LogMessageId": "LNK2701",
                          "LogMessage": "The GBE3 network link is up.",
                          "LogComment": "Log Entry 1993"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1992,
                          "LogId": "1992",
                          "LogTimestamp": "2020-09-02T00:08:36+00:00",
                          "LogSeverity": 3000,
                          "LogMessageId": "LNK2700",
                          "LogMessage": "The MM-2 network link is down.",
                          "LogComment": "Log Entry 1992"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1991,
                          "LogId": "1991",
                          "LogTimestamp": "2020-09-02T00:08:36+00:00",
                          "LogSeverity": 3000,
                          "LogMessageId": "LNK2700",
                          "LogMessage": "The GBE3 network link is down.",
                          "LogComment": "Log Entry 1991"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1990,
                          "LogId": "1990",
                          "LogTimestamp": "2020-09-02T00:08:34+00:00",
                          "LogSeverity": 1000,
                          "LogMessageId": "LNK2701",
                          "LogMessage": "The GBE3 network link is up.",
                          "LogComment": "Log Entry 1990"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1989,
                          "LogId": "1989",
                          "LogTimestamp": "2020-09-02T00:08:09+00:00",
                          "LogSeverity": 3000,
                          "LogMessageId": "LNK2700",
                          "LogMessage": "The MM-2 network link is down.",
                          "LogComment": "Log Entry 1989"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1988,
                          "LogId": "1988",
                          "LogTimestamp": "2020-09-02T00:08:09+00:00",
                          "LogSeverity": 3000,
                          "LogMessageId": "LNK2700",
                          "LogMessage": "The GBE3 network link is down.",
                          "LogComment": "Log Entry 1988"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1987,
                          "LogId": "1987",
                          "LogTimestamp": "2020-09-02T00:08:08+00:00",
                          "LogSeverity": 1000,
                          "LogMessageId": "LNK2701",
                          "LogMessage": "The GBE3 network link is up.",
                          "LogComment": "Log Entry 1987"
                        },
                        {
                          "@odata.type": "#DeviceService.LogModel",
                          "LogCategory": "System Health",
                          "DateFormat": null,
                          "RecommendedAction": null,
                          "LogSequenceNumber": 1986,
                          "LogId": "1986",
                          "LogTimestamp": "2020-09-02T00:07:46+00:00",
                          "LogSeverity": 3000,
                          "LogMessageId": "LNK2700",
                          "LogMessage": "The MM-2 network link is down.",
                          "LogComment": "Log Entry 1986"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.LogModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HardwareLogsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Temperature": {
      "get": {
        "description": "Returns the temperature details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the temperature details of a specific device",
        "operationId": "18_DeviceService_3925",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getRealtimeTemperatureExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.TemperatureResponseModel",
                        "minTemperatureUnit": "celsius",
                        "peakTemperature": "44",
                        "minTemperature": "20",
                        "Since": "1970-01-01T00:01:43Z",
                        "peakTemperatureUnit": "celsius",
                        "@odata.id": "/api/DeviceService/Devices(17681)/Temperature",
                        "@odata.context": "/api/$metadata#DeviceService.TemperatureResponseModel",
                        "peakTemperatureTimeStamp": "2018-09-08T14:56:01Z",
                        "instantaneousTemperatureUnit": "celsius",
                        "instantaneousTemperature": "25",
                        "minTemperatureTimeStamp": "2020-06-28T20:24:22Z"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TemperatureResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/BlinkStatus": {
      "get": {
        "description": "Returns the LED-blink status of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the LED-blink status of a specific device",
        "operationId": "19_DeviceService_3096",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getBlinkStatusExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.BlinkStatusResponseModel",
                        "isLEDBlinking": "false",
                        "@odata.id": "/api/DeviceService/Devices(17681)/BlinkStatus",
                        "@odata.context": "/api/$metadata#DeviceService.BlinkStatusResponseModel"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BlinkStatusResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/PowerUsageByDevice": {
      "get": {
        "description": "Returns the power usage details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the power usage details of a specific device",
        "operationId": "20_DeviceService_5266",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getPowerUsageDetailsByDeviceExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.PowerUsageByDeviceResponseModel",
                          "DeviceName": "IOM-B2",
                          "Chassissubtype": "Ethernet",
                          "PeakPower": "14",
                          "PowerConsumption": "13",
                          "Fabric": "Ethernet",
                          "DeviceId": 17682,
                          "Chassistype": "Module",
                          "SlotNumber": "4",
                          "MinPower": "1"
                        },
                        {
                          "@odata.type": "#DeviceService.PowerUsageByDeviceResponseModel",
                          "DeviceName": "Sled-1",
                          "Chassissubtype": "compute",
                          "SlotNumber": "1",
                          "Priority": "High",
                          "DeviceId": 0,
                          "Chassistype": "Sled"
                        },
                        {
                          "@odata.type": "#DeviceService.PowerUsageByDeviceResponseModel",
                          "DeviceName": "Sled-2",
                          "Chassissubtype": "compute",
                          "SlotNumber": "2",
                          "Priority": "High",
                          "DeviceId": 0,
                          "Chassistype": "Sled"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.PowerUsageByDeviceResponseModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PowerUsageByDeviceResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Power": {
      "get": {
        "description": "Returns the real time power details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the real time power details of a specific device",
        "operationId": "21_DeviceService_3297",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getRealtimePowerExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.PowerResponseModel",
                        "systemEnergyConsumptionTimeStamp": "2020-09-02T14:17:43+0000",
                        "Since": "2020-06-28T21:50:17Z",
                        "minimumPowerTimeStamp": "2020-08-03T22:06:56Z",
                        "peakPower": "237",
                        "power": "183",
                        "peakHeadroom": "2763",
                        "minimumPower": "145",
                        "@odata.id": "/api/DeviceService/Devices(17681)/Power",
                        "@odata.context": "/api/$metadata#DeviceService.PowerResponseModel",
                        "currentRedundancyState": "Not Redundant",
                        "instantaneousHeadroom": "2817",
                        "peakPowerTimeStamp": "2020-06-28T21:49:52Z",
                        "systemEnergyConsumption": "278"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PowerResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/SystemUpTime": {
      "get": {
        "description": "Returns the system up time information for devices\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the system up time information for devices",
        "operationId": "22_DeviceService_5612",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSystemUpTimeExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.SystemUpTimeResponseModel",
                        "systemUpTime": "338186",
                        "@odata.id": "/api/DeviceService/Devices(10052)/SystemUpTime",
                        "@odata.context": "/api/$metadata#DeviceService.SystemUpTimeResponseModel"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SystemUpTimeResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/RecentActivity": {
      "get": {
        "description": "Returns the recent activities for a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the recent activities for a specific device",
        "operationId": "23_DeviceService_9742",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getRecentActivityExample": {
                    "value": {
                      "@odata.count": 5,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.ExecutionHistoryDetailModel",
                          "ExecutionHistoryId": 213059,
                          "Key": "MX5108N-B2",
                          "Value": "Running\nCompleted",
                          "TaskId": 24484,
                          "StartTime": "2020-08-30 22:23:12.891",
                          "TaskType": 8,
                          "Progress": "100",
                          "TaskStatusId": 2060,
                          "EndTime": "2020-08-30 22:23:14.362",
                          "TaskName": "Refresh Inventory for Device",
                          "Id": 93839
                        },
                        {
                          "@odata.type": "#DeviceService.ExecutionHistoryDetailModel",
                          "ExecutionHistoryId": 213055,
                          "Key": "MX5108N-B2",
                          "Value": "Running\nCompleted",
                          "TaskId": 24481,
                          "StartTime": "2020-08-30 22:22:53.192",
                          "TaskType": 6,
                          "Progress": "100",
                          "TaskStatusId": 2060,
                          "EndTime": "2020-08-30 22:22:54.406",
                          "TaskName": "Health and Online Check for IOM Device",
                          "Id": 93835
                        },
                        {
                          "@odata.type": "#DeviceService.ExecutionHistoryDetailModel",
                          "ExecutionHistoryId": 213052,
                          "Key": "MX5108N-B2",
                          "Value": "Running\nCompleted",
                          "TaskId": 24480,
                          "StartTime": "2020-08-30 22:20:33.529",
                          "TaskType": 6,
                          "Progress": "100",
                          "TaskStatusId": 2060,
                          "EndTime": "2020-08-30 22:20:35.306",
                          "TaskName": "Health and Online Check for IOM Device",
                          "Id": 93832
                        },
                        {
                          "@odata.type": "#DeviceService.ExecutionHistoryDetailModel",
                          "ExecutionHistoryId": 206459,
                          "Key": "MX5108N-B2",
                          "Value": "Running\nCompleted",
                          "TaskId": 24146,
                          "StartTime": "2020-08-27 22:21:43.832",
                          "TaskType": 8,
                          "Progress": "100",
                          "TaskStatusId": 2060,
                          "EndTime": "2020-08-27 22:21:45.384",
                          "TaskName": "Refresh Inventory for Device",
                          "Id": 87104
                        },
                        {
                          "@odata.type": "#DeviceService.ExecutionHistoryDetailModel",
                          "ExecutionHistoryId": 206456,
                          "Key": "MX5108N-B2",
                          "Value": "Running\nCompleted",
                          "TaskId": 24143,
                          "StartTime": "2020-08-27 22:21:23.314",
                          "TaskType": 6,
                          "Progress": "100",
                          "TaskStatusId": 2060,
                          "EndTime": "2020-08-27 22:21:24.971",
                          "TaskName": "Health and Online Check for IOM Device",
                          "Id": 87101
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.ExecutionHistoryDetailModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RecentActivityResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/SubSystemHealth": {
      "get": {
        "description": "Returns the health status of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the health status of a specific device",
        "operationId": "24_DeviceService_7949",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSubSystemHealthExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.SubSystemHealthFaultModel",
                          "SubSystem": "IOM.Slot.B2",
                          "FaultSummaryList": [
                            {
                              "Count": "0",
                              "Severity": "1000"
                            }
                          ],
                          "RollupStatus": "1000"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.SubSystemHealthFaultModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SubSystemHealthFaultModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/InventoryDetails({inventoryType})": {
      "get": {
        "description": "Returns details of a specific inventory type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:inventoryType",
            "required": true,
            "name": "inventoryType",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns details of a specific inventory type",
        "operationId": "25_DeviceService_3613",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InventoryDetailsModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceSummary": {
      "get": {
        "description": "Returns the summary of device statuses\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the summary of device statuses",
        "operationId": "26_DeviceService_3193",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceSummaryExample": {
                    "value": {
                      "@odata.count": 5,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.DeviceSummary",
                          "TotalCount": 0,
                          "DeviceType": 1000,
                          "@odata.id": "/api/DeviceService/DeviceSummary(1000)",
                          "DeviceStatusSummary": [
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 1000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 2000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 3000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 4000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSummary",
                          "TotalCount": 1,
                          "DeviceType": 2000,
                          "@odata.id": "/api/DeviceService/DeviceSummary(2000)",
                          "DeviceStatusSummary": [
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 1000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 2000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 3000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 1,
                              "StatusType": 4000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSummary",
                          "TotalCount": 0,
                          "DeviceType": 3000,
                          "@odata.id": "/api/DeviceService/DeviceSummary(3000)",
                          "DeviceStatusSummary": [
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 1000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 2000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 3000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 4000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSummary",
                          "TotalCount": 1,
                          "DeviceType": 4000,
                          "@odata.id": "/api/DeviceService/DeviceSummary(4000)",
                          "DeviceStatusSummary": [
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 1,
                              "StatusType": 1000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 2000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 3000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 4000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSummary",
                          "TotalCount": 0,
                          "DeviceType": 8000,
                          "@odata.id": "/api/DeviceService/DeviceSummary(8000)",
                          "DeviceStatusSummary": [
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 1000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 2000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 3000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 4000
                            },
                            {
                              "@odata.type": "#DeviceService.DeviceStatusSummary",
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.DeviceSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSummaryResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceSummary({deviceType})": {
      "get": {
        "description": "Returns the device summary by status type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceType",
            "required": true,
            "name": "deviceType",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the device summary by status type",
        "operationId": "27_DeviceService_4218",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceSummaryByDeviceTypeExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.DeviceSummary",
                        "DeviceStatusSummary": [
                          {
                            "@odata.type": "#DeviceService.DeviceStatusSummary",
                            "Count": 0,
                            "StatusType": 1000
                          },
                          {
                            "@odata.type": "#DeviceService.DeviceStatusSummary",
                            "Count": 0,
                            "StatusType": 2000
                          },
                          {
                            "@odata.type": "#DeviceService.DeviceStatusSummary",
                            "Count": 0,
                            "StatusType": 3000
                          },
                          {
                            "@odata.type": "#DeviceService.DeviceStatusSummary",
                            "Count": 0,
                            "StatusType": 4000
                          },
                          {
                            "@odata.type": "#DeviceService.DeviceStatusSummary",
                            "Count": 0,
                            "StatusType": 5000
                          }
                        ],
                        "@odata.id": "/api/DeviceService/DeviceSummary(1000)",
                        "@odata.context": "/api/$metadata#DeviceService.DeviceSummary",
                        "TotalCount": 0,
                        "DeviceType": 1000
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSummaryResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/PowerStates": {
      "get": {
        "description": "Returns the device summary by status type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the device summary by status type",
        "operationId": "28_DeviceService_1507",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PowerStateModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/GraphicInfo": {
      "get": {
        "description": "Returns the graphics-related information of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the graphics-related information of a specific device",
        "operationId": "29_DeviceService_3809",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSystemImageByDeviceIdExample": {
                    "value": [
                      {
                        "Svg": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg version=\"1.1\" id=\"iom-mx5108n\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"1241px\" height=\"85px\" viewBox=\"0 0 1241 85\" xml:space=\"preserve\">\n<symbol id=\"mx5108n-USB_2\" viewBox=\"-19.4 -8.9 38.8 17.8\">\n\t<path d=\"M-18-8.9c-0.8,0-1.4,0.6-1.4,1.4v15c0,0.8,0.6,1.4,1.4,1.4h36c0.8,0,1.4-0.6,1.4-1.4v-15c0-0.8-0.6-1.4-1.4-1.4H-18z\"/>\n\t<g>\n\t\t<g style=\"opacity:0.8;\">\n\t\t\t<path style=\"fill:#CCCCCC;\" d=\"M15.7-7.8h-31.6c-1.5,0-2.8,1.1-2.8,2.5V5.2c0,1.4,1.3,2.5,2.8,2.5h31.6c1.5,0,2.8-1.1,2.8-2.5V-5.3C18.5-6.6,17.3-7.8,15.7-7.8L15.7-7.8z\"/>\n\t\t</g>\n\t\t<path d=\"M-15.9,6.4c-0.7,0-1.3-0.5-1.3-1.1V-5.3c0-0.6,0.6-1.1,1.3-1.1h31.6c0.7,0,1.3,0.5,1.3,1.1V5.2c0,0.6-0.6,1.1-1.3,1.1H-15.9L-15.9,6.4z\"/>\n\t\t<g>\n\t\t\t<path style=\"fill:#282828;\" d=\"M14.5,3.6c0,0.3-0.3,0.6-0.6,0.6H-14c-0.3,0-0.6-0.3-0.6-0.6V1.1c0-0.3,0.3-0.6,0.6-0.6h27.9c0.3,0,0.6,0.3,0.6,0.6V3.6z\"/>\n\t\t</g>\n\t\t<path style=\"opacity:0.15;fill:#FFFFFF;\" d=\"M14.3,0.7c0.1,0.1,0.2,0.2,0.2,0.4v0.3l0,0v0v0.9v1.2l0,0v0.3c0,0.3-0.2,0.5-0.5,0.5H-14c-0.1,0-0.2,0-0.3-0.1l0.6-0.6h27.3V2.2V1.3v0h0L14.3,0.7z\"/>\n\t\t<path style=\"opacity:0.4;\" d=\"M13.6,1.3h-27.3v1.2v0.9v0h0L-14.3,4c-0.1-0.1-0.2-0.2-0.2-0.4V3.4l0,0v0V2.5V1.3l0,0V1c0-0.3,0.2-0.5,0.5-0.5h27.9c0.1,0,0.2,0,0.3,0.1L13.6,1.3z\"/>\n\t\t<g>\n\t\t\t<polygon style=\"fill:#A0A0A0;\" points=\"9.4,0.5 9.4,-2.1 11.7,-2.1 11.7,0.5\"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<polygon style=\"fill:#A0A0A0;\" points=\"-11.7,0.5 -11.7,-2.1 -9.4,-2.1 -9.4,0.5\"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<polygon style=\"fill:#A0A0A0;\" points=\"-4.7,0.5 -4.7,-2.1 -2.4,-2.1 -2.4,0.5\"/>\n\t\t</g>\n\t\t<g>\n\t\t\t<polygon style=\"fill:#A0A0A0;\" points=\"2.4,0.5 2.4,-2.1 4.6,-2.1 4.6,0.5\"/>\n\t\t</g>\n\t</g>\n</symbol>\n<symbol id=\"mx5108n-micro_USB_2\" viewBox=\"-12.2 -5.1 24.4 10.2\">\n\t<path d=\"M-10.8,5.1c-0.8,0-1.4-0.6-1.4-1.4v-7.4c0-0.8,0.6-1.4,1.4-1.4h21.6c0.8,0,1.4,0.6,1.4,1.4v7.4c0,0.8-0.6,1.4-1.4,1.4H-10.8z\"/>\n\t<g>\n\t\t<path d=\"M11.2-0.5v2c0,1.1-0.9,2-2,2H-9.3c-1.1,0-2-0.9-2-2v-2c0-0.5,0.2-1,0.6-1.4L-9-3.6c0.4-0.4,0.9-0.6,1.4-0.6h15c0.5,0,1.1,0.2,1.4,0.6l1.7,1.7C11.1-1.5,11.2-1,11.2-0.5\"/>\n\t\t<path style=\"fill:#CCCCCC;\" d=\"M10.9-0.4v2c0,0.9-0.7,1.7-1.7,1.7H-9.3c-0.9,0-1.7-0.8-1.7-1.7v-2c0-0.4,0.1-0.9,0.5-1.2l1.7-1.7C-8.5-3.6-8-3.8-7.6-3.8h15c0.4,0,0.9,0.2,1.2,0.5l1.8,1.7C10.8-1.3,10.9-0.9,10.9-0.4\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M10.9-0.4v2c0,0.9-0.7,1.7-1.7,1.7H-9.3c-0.9,0-1.7-0.8-1.7-1.7v-2c0-0.4,0.1-0.9,0.5-1.2l1.7-1.7C-8.5-3.6-8-3.8-7.6-3.8h15c0.4,0,0.9,0.2,1.2,0.5l1.8,1.7C10.8-1.3,10.9-0.9,10.9-0.4\"/>\n\t\t<path d=\"M10.1-0.4v2c0,0.5-0.4,0.9-0.9,0.9H-9.3c-0.5,0-0.9-0.4-0.9-0.9v-2c0-0.2,0.1-0.4,0.2-0.6l1.7-1.8C-8.1-2.9-7.9-3-7.7-3h15c0.2,0,0.4,0.1,0.6,0.2L9.7-1C10-0.9,10.1-0.6,10.1-0.4\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M10.1-0.4v2c0,0.5-0.4,0.9-0.9,0.9H-9.3c-0.5,0-0.9-0.4-0.9-0.9v-2c0-0.2,0.1-0.4,0.2-0.6l1.7-1.8C-8.1-2.9-7.9-3-7.7-3h15c0.2,0,0.4,0.1,0.6,0.2L9.7-1C10-0.9,10.1-0.6,10.1-0.4\"/>\n\t\t<path style=\"fill:#CCCCCC;\" d=\"M0.1-3v-0.6c0-0.3,0.3-0.6,0.6-0.6h5.8c0.3,0,0.6,0.2,0.6,0.6V-3H0.1z M-7.1-3v-0.6c0-0.3,0.3-0.6,0.6-0.6h5.8C-0.3-4.3,0-4.1,0-3.6V-3H-7.1z M-10.1,1.5h-0.6c-0.3,0-0.6-0.2-0.6-0.6V0.3c0-0.3,0.2-0.6,0.6-0.6h0.6V1.5z M10.1,1.5v-1.7h0.6c0.3,0,0.6,0.3,0.6,0.6v0.5c0,0.3-0.2,0.6-0.6,0.6H10.1z M9,2.5v0.6c0,0.3-0.3,0.6-0.6,0.6H-8.4C-8.7,3.7-9,3.5-9,3.1V2.5H9z\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M0.1-3v-0.6c0-0.3,0.3-0.6,0.6-0.6h5.8c0.3,0,0.6,0.2,0.6,0.6V-3H0.1\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M-7.1-3v-0.6c0-0.3,0.3-0.6,0.6-0.6h5.8C-0.3-4.3,0-4.1,0-3.6V-3H-7.1\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M-10.1,1.5h-0.6c-0.3,0-0.6-0.2-0.6-0.6V0.3c0-0.3,0.2-0.6,0.6-0.6h0.6V1.5\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M10.1,1.5v-1.7h0.6c0.3,0,0.6,0.3,0.6,0.6v0.5c0,0.3-0.2,0.6-0.6,0.6H10.1\"/>\n\t\t<path style=\"fill:none;stroke:#808080;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M9,2.5v0.6c0,0.3-0.3,0.6-0.6,0.6H-8.4C-8.7,3.7-9,3.5-9,3.1V2.5H9\"/>\n\t\t<path style=\"fill:#CCCCCC;\" d=\"M-4.5,0.2h8.9v0.3h-8.9V0.2z\"/>\n\t\t<path style=\"fill:#333333;\" d=\"M2.5-0.1h0.7v0.6h1.1v-0.6h0.2c0.3,0,0.5,0.2,0.5,0.5v0.7c0,0.3-0.2,0.5-0.5,0.5h-9.3c-0.3,0-0.5-0.2-0.5-0.5V0.4c0-0.3,0.2-0.5,0.5-0.5h0.2v0.6h1.2v-0.6h0.7v0.6h1.1v-0.6h0.7v0.6h1.2v-0.6h0.7v0.6h1.2L2.5-0.1z\"/>\n\t\t<path style=\"fill:none;stroke:#333333;stroke-width:9.000000e-003;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:3;\" d=\"M2.5-0.1h0.7v0.6h1.1v-0.6h0.2c0.3,0,0.5,0.2,0.5,0.5v0.7c0,0.3-0.2,0.5-0.5,0.5h-9.3c-0.3,0-0.5-0.2-0.5-0.5V0.4c0-0.3,0.2-0.5,0.5-0.5h0.2v0.6h1.2v-0.6h0.7v0.6h1.1v-0.6h0.7v0.6h1.2v-0.6h0.7v0.6h1.2L2.5-0.1\"/>\n\t</g>\n</symbol>\n<symbol id=\"status-led-1\" viewBox=\"-5 -5 10 10\">\n\t<path d=\"M5,0c0-2.7-2.2-5-5-5c-2.7,0-5,2.2-5,5c0,2.7,2.2,5,5,5C2.7,5,5,2.7,5,0z\"/>\n\t<path style=\"fill:#8E9090;\" d=\"M4.3,0c0-2.3-1.9-4.3-4.3-4.3c-2.3,0-4.3,1.9-4.3,4.3c0,2.3,1.9,4.3,4.3,4.3C2.3,4.3,4.3,2.3,4.3,0z\"/>\n</symbol>\n<symbol id=\"status-led-on\" viewBox=\"-5 -5 10 10\">\n\t<path d=\"M5,0c0-2.7-2.2-5-5-5c-2.7,0-5,2.2-5,5c0,2.7,2.2,5,5,5C2.7,5,5,2.7,5,0z\"/>\n\t<path style=\"fill:#79C146;\" d=\"M4.3,0c0-2.3-1.9-4.3-4.3-4.3c-2.3,0-4.3,1.9-4.3,4.3c0,2.3,1.9,4.3,4.3,4.3C2.3,4.3,4.3,2.3,4.3,0z\"/>\n</symbol>\n<g id=\"BG-PARTS\">\n\t<g id=\"Frame\">\n\t\t<path id=\"Frame_color\" style=\"fill:#333333;\" d=\"M8.2,9.1C8.2,9.1,8.2,9.1,8.2,9.1l1223.4,0c0,0,0,0,0,0v75.4H8.2c0,0,0,0,0,0V9.1z\"/>\n\t\t<rect id=\"top_back_frame\" x=\"8.4\" y=\"0.3\" style=\"fill:#262626;\" width=\"1222.3\" height=\"8.4\"/>\n\t\t<path id=\"R-frame\" style=\"fill:#333333;\" d=\"M1237.8,84.5h-5.8c0,0,0,0,0,0V60c0,0,0-0.1,0.1-0.1h5.8c0.9,0,1.7,0.9,1.7,2v20.6C1239.5,83.6,1238.7,84.5,1237.8,84.5z\"/>\n\t\t<path id=\"L-frame\" style=\"fill:#333333;\" d=\"M3.3,59.9h4.5c0,0,0,0,0,0v24.5c0,0,0,0.1-0.1,0.1H3.3c-0.9,0-1.7-0.9-1.7-2V61.9C1.6,60.8,2.3,59.9,3.3,59.9z\"/>\n\t</g>\n\t<g id=\"Handle-R\">\n\t\t<rect x=\"674.2\" style=\"fill:#CCCCCC;\" width=\"566.9\" height=\"7.1\"/>\n\t\t<rect x=\"674.2\" y=\"0\" style=\"fill:#F2F2F2;\" width=\"14.9\" height=\"7.1\"/>\n\t\t<rect x=\"1225.4\" y=\"0\" style=\"opacity:0.5;\" width=\"15.7\" height=\"7.1\"/>\n\t</g>\n\t<g id=\"__x3F_\">\n\t\t<rect x=\"569\" style=\"fill:#BD4700;\" width=\"101.1\" height=\"7.1\"/>\n\t\t<rect x=\"568.9\" y=\"0\" style=\"opacity:0.3;fill:#FFFFFF;\" width=\"9.1\" height=\"7.1\"/>\n\t\t<rect x=\"658.4\" y=\"0\" style=\"opacity:0.5;\" width=\"11.7\" height=\"7.1\"/>\n\t</g>\n\t<g id=\"Handle-L\">\n\t\t<rect style=\"fill:#CCCCCC;\" width=\"566.9\" height=\"7.1\"/>\n\t\t<rect y=\"0\" style=\"opacity:0.5;\" width=\"14.9\" height=\"7.1\"/>\n\t\t<rect x=\"551.2\" y=\"0\" style=\"opacity:0.5;\" width=\"15.7\" height=\"7.1\"/>\n\t</g>\n\t<g id=\"Power_On_x2F_Off\">\n\t\t<rect x=\"19.5\" y=\"14.5\" width=\"11.5\" height=\"64.5\"/>\n\t\t<g>\n\t\t\t<path style=\"fill:#4768C4;\" d=\"M25.3,49.6c0,0.8-0.6,1.4-1.4,1.4l0,0c-0.8,0-1.4-0.6-1.4-1.4v-8.5c0-0.8,0.6-1.4,1.4-1.4l0,0c0.8,0,1.4,0.6,1.4,1.4V49.6z\"/>\n\t\t\t<path style=\"fill:#4768C4;\" d=\"M25.3,49.6c0,0.8-0.6,1.4-1.4,1.4l0,0c-0.8,0-1.4-0.6-1.4-1.4v-8.5c0-0.8,0.6-1.4,1.4-1.4l0,0c0.8,0,1.4,0.6,1.4,1.4V49.6z\"/>\n\t\t\t<rect x=\"20.2\" y=\"15.2\" style=\"fill:#333333;\" width=\"10.1\" height=\"63.1\"/>\n\t\t\t<polygon style=\"opacity:0.25;\" points=\"30.3,15.2 25.9,20.9 25.8,34.6 26.4,38 26.4,55.6 25.8,58.6 25.9,72.6 30.3,78.3\"/>\n\t\t\t<polygon style=\"opacity:0.5;\" points=\"25.9,72.6 20.2,72.6 20.2,78.3 30.3,78.3\"/>\n\t\t\t<polygon style=\"opacity:0.5;\" points=\"25.8,34.6 20.2,34.6 20.2,38 26.4,38\"/>\n\t\t\t<polygon style=\"opacity:0.2;fill:#FFFFFF;\" points=\"30.3,15.2 20.2,15.2 20.2,20.8 25.9,20.8\"/>\n\t\t\t<polygon style=\"opacity:0.2;fill:#FFFFFF;\" points=\"26.4,55.6 20.2,55.6 20.2,58.6 25.8,58.6\"/>\n\t\t\t<path style=\"fill:#7CA3DC;\" d=\"M24.5,50.9c0,0.8-0.6,1.4-1.4,1.4l0,0c-0.8,0-1.4-0.6-1.4-1.4v-8.5c0-0.8,0.6-1.4,1.4-1.4l0,0c0.8,0,1.4,0.6,1.4,1.4V50.9z\"/>\n\t\t</g>\n\t</g>\n\t<g id=\"Ports\">\n\t\t<g id=\"Status_LED\">\n\t\t\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off\" x=\"-5\" y=\"-5\" transform=\"matrix(1 0 0 -1 580.2286 55.3823)\" style=\"overflow:visible;\"/>\n\t\t\t<use xlink:href=\"#status-led-on\" width=\"10\" height=\"10\" id=\"status-led2-on\" x=\"-5\" y=\"-5\" transform=\"matrix(1 0 0 -1 619.5981 55.3823)\" style=\"display:none;overflow:visible;\"/>\n\t\t\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led1-off\" x=\"-5\" y=\"-5\" transform=\"matrix(1 0 0 -1 580.2286 41.1323)\" style=\"overflow:visible;\"/>\n\t\t\t<use xlink:href=\"#status-led-on\" width=\"10\" height=\"10\" id=\"status-led1-on\" x=\"-5\" y=\"-5\" transform=\"matrix(1 0 0 -1 619.5981 41.1323)\" style=\"display:none;overflow:visible;\"/>\n\t\t</g>\n\t\t<use xlink:href=\"#mx5108n-micro_USB_2\" width=\"24.4\" height=\"10.2\" id=\"micro-USB-port_1_\" x=\"-12.2\" y=\"-5.1\" transform=\"matrix(1 0 0 -1 556.054 58.7763)\" style=\"overflow:visible;\"/>\n\t\t<use xlink:href=\"#mx5108n-USB_2\" width=\"38.8\" height=\"17.8\" id=\"USB-port_1_\" x=\"-19.4\" y=\"-8.9\" transform=\"matrix(0 -1 -1 0 525.0414 43.8564)\" style=\"overflow:visible;\"/>\n\t</g>\n\t<g id=\"GRID\">\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M228,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H228c-1.3,0-2.3,1-2.3,2.3v7.5C225.7,36.2,226.8,37.2,228,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M212.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C209.9,36.2,210.9,37.2,212.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M228,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H228c-1.3,0-2.3,1-2.3,2.3v7.5C225.7,52,226.8,53.1,228,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M212.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C209.9,52,210.9,53.1,212.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M228,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H228c-1.3,0-2.3,1-2.3,2.3v7.5C225.7,67.9,226.8,68.9,228,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M212.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C209.9,67.9,210.9,68.9,212.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M225.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H225.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M209.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H209.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M237.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3H228c-1.3,0-2.3,1-2.3,2.3v6.9H237.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M222,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H222z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M259.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C257.4,36.2,258.5,37.2,259.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M243.9,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C241.6,36.2,242.6,37.2,243.9,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M259.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C257.4,52,258.5,53.1,259.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M243.9,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C241.6,52,242.6,53.1,243.9,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M259.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C257.4,67.9,258.5,68.9,259.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M243.9,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C241.6,67.9,242.6,68.9,243.9,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M257.4,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H257.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M241.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H241.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M269.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H269.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M253.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H253.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M291.5,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C289.2,36.2,290.2,37.2,291.5,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M275.6,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C273.3,36.2,274.3,37.2,275.6,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M291.5,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C289.2,52,290.2,53.1,291.5,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M275.6,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C273.3,52,274.3,53.1,275.6,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M291.5,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C289.2,67.9,290.2,68.9,291.5,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M275.6,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C273.3,67.9,274.3,68.9,275.6,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M289.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H289.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M273.3,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H273.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M301.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H301.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M285.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H285.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M323.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C320.9,36.2,321.9,37.2,323.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M307.3,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C305,36.2,306.1,37.2,307.3,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M323.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C320.9,52,321.9,53.1,323.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M307.3,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C305,52,306.1,53.1,307.3,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M323.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C320.9,67.9,321.9,68.9,323.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M307.3,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C305,67.9,306.1,68.9,307.3,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M320.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H320.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M305,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H305z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M333,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H333z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M317.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H317.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M354.6,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C352.3,36.2,353.4,37.2,354.6,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M338.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C336.5,36.2,337.5,37.2,338.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M354.6,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C352.3,52,353.4,53.1,354.6,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M338.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C336.5,52,337.5,53.1,338.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M354.6,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C352.3,67.9,353.4,68.9,354.6,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M338.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C336.5,67.9,337.5,68.9,338.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M352.3,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H352.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M336.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H336.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M364.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H364.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M348.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H348.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M67.3,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H67.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M51.4,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H51.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M35.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H35.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M79.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H79.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M63.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H63.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M47.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H47.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M101.3,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C99,36.2,100.1,37.2,101.3,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M101.3,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C99,52,100.1,53.1,101.3,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M101.3,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C99,67.9,100.1,68.9,101.3,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M99,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H99z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M83.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3H93c1.3,0,2.3-1,2.3-2.3v-7.3H83.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M111.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H111.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M95.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H95.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M133,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H133c-1.3,0-2.3,1-2.3,2.3v7.5C130.7,36.2,131.8,37.2,133,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M117.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C114.9,36.2,115.9,37.2,117.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M133,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H133c-1.3,0-2.3,1-2.3,2.3v7.5C130.7,52,131.8,53.1,133,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M117.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C114.9,52,115.9,53.1,117.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M133,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H133c-1.3,0-2.3,1-2.3,2.3v7.5C130.7,67.9,131.8,68.9,133,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M117.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C114.9,67.9,115.9,68.9,117.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M130.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H130.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M114.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H114.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M142.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3H133c-1.3,0-2.3,1-2.3,2.3v6.9H142.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M127,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H127z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M164.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C162.5,36.2,163.5,37.2,164.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M148.9,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C146.6,36.2,147.6,37.2,148.9,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M164.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C162.5,52,163.5,53.1,164.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M148.9,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C146.6,52,147.6,53.1,148.9,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M164.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C162.5,67.9,163.5,68.9,164.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M148.9,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C146.6,67.9,147.6,68.9,148.9,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M162.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H162.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M146.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H146.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M174.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H174.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M158.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H158.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M196.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C193.9,36.2,194.9,37.2,196.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M180.4,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C178,36.2,179.1,37.2,180.4,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M196.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C193.9,52,194.9,53.1,196.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M180.4,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C178,52,179.1,53.1,180.4,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M196.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C193.9,67.9,194.9,68.9,196.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M180.4,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C178,67.9,179.1,68.9,180.4,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M193.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H193.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M178,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H178z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M206.1,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H206.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M190.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H190.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M386.4,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C384.1,36.2,385.1,37.2,386.4,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M370.5,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C368.2,36.2,369.2,37.2,370.5,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M386.4,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C384.1,52,385.1,53.1,386.4,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M370.5,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C368.2,52,369.2,53.1,370.5,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M386.4,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C384.1,67.9,385.1,68.9,386.4,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M370.5,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C368.2,67.9,369.2,68.9,370.5,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M384.1,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H384.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M368.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H368.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M396.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H396.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M380.4,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H380.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M418.1,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C415.8,36.2,416.8,37.2,418.1,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M402.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C399.9,36.2,401,37.2,402.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M418.1,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C415.8,52,416.8,53.1,418.1,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M402.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C399.9,52,401,53.1,402.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M418.1,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C415.8,67.9,416.8,68.9,418.1,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M402.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C399.9,67.9,401,68.9,402.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M415.8,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H415.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M399.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H399.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M427.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H427.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M412.1,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H412.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M449.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C447.5,36.2,448.5,37.2,449.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M433.9,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C431.6,36.2,432.7,37.2,433.9,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M449.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C447.5,52,448.5,53.1,449.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M433.9,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C431.6,52,432.7,53.1,433.9,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M449.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C447.5,67.9,448.5,68.9,449.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M433.9,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C431.6,67.9,432.7,68.9,433.9,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M447.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H447.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M431.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H431.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M459.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H459.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M443.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H443.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M481.3,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C479,36.2,480,37.2,481.3,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M465.4,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C463.1,36.2,464.2,37.2,465.4,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M481.3,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C479,52,480,53.1,481.3,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M465.4,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C463.1,52,464.2,53.1,465.4,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M481.3,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C479,67.9,480,68.9,481.3,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M465.4,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C463.1,67.9,464.2,68.9,465.4,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M479,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H479z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M463.1,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H463.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M491.1,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H491.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M475.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H475.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M497.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C494.9,36.2,495.9,37.2,497.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M497.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C494.9,52,495.9,53.1,497.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M497.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C494.9,67.9,495.9,68.9,497.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M510.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H510.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M494.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H494.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M522.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3H513c-1.3,0-2.3,1-2.3,2.3v6.9H522.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M507,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H507z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M544.7,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C542.4,36.2,543.5,37.2,544.7,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M542.4,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H542.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M526.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H526.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M554.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H554.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M538.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H538.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M560.6,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C558.3,36.2,559.3,37.2,560.6,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M574.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H574.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M558.3,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H558.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M586.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H586.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M570.4,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H570.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M608.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C605.9,36.2,606.9,37.2,608.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M592.3,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C590,36.2,591,37.2,592.3,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M608.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C605.9,52,606.9,53.1,608.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M592.3,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C590,52,591,53.1,592.3,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M608.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C605.9,67.9,606.9,68.9,608.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M592.3,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C590,67.9,591,68.9,592.3,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M605.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H605.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M590,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H590z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M618,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H618z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M602.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H602.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M639.9,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C637.6,36.2,638.6,37.2,639.9,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M624,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H624c-1.3,0-2.3,1-2.3,2.3v7.5C621.7,36.2,622.8,37.2,624,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M639.9,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C637.6,52,638.6,53.1,639.9,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M624,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H624c-1.3,0-2.3,1-2.3,2.3v7.5C621.7,52,622.8,53.1,624,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M639.9,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C637.6,67.9,638.6,68.9,639.9,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M624,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H624c-1.3,0-2.3,1-2.3,2.3v7.5C621.7,67.9,622.8,68.9,624,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M637.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H637.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M621.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H621.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M649.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H649.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M633.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3H624c-1.3,0-2.3,1-2.3,2.3v6.9H633.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M681.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H681.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M665.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H665.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M713.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H713.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M697.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H697.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M735.1,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C732.7,36.2,733.8,37.2,735.1,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M719.2,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C716.9,36.2,717.9,37.2,719.2,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M735.1,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C732.7,52,733.8,53.1,735.1,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M719.2,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C716.9,52,717.9,53.1,719.2,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M735.1,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C732.7,67.9,733.8,68.9,735.1,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M719.2,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C716.9,67.9,717.9,68.9,719.2,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M732.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H732.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M716.9,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H716.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M744.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H744.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M729,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H729z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M766.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C764.5,36.2,765.5,37.2,766.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M750.9,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C748.6,36.2,749.6,37.2,750.9,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M766.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C764.5,52,765.5,53.1,766.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M750.9,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C748.6,52,749.6,53.1,750.9,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M766.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C764.5,67.9,765.5,68.9,766.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M750.9,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C748.6,67.9,749.6,68.9,750.9,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M764.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H764.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M748.6,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H748.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M776.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H776.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M760.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H760.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M808.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H808.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M792.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H792.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M840.1,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H840.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M824.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H824.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M845.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C843.5,36.2,844.5,37.2,845.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M845.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C843.5,52,844.5,53.1,845.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M845.8,62h7.5c1.3,0,2.3-1,2.3-2.3v-0.6c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v0.6C843.5,61,844.5,62,845.8,62z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M843.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H843.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M871.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H871.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M855.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H855.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M903.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H903.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M887.4,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H887.4z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M925.1,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C922.8,36.2,923.8,37.2,925.1,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M925.1,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C922.8,52,923.8,53.1,925.1,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M925.1,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C922.8,67.9,923.8,68.9,925.1,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M922.8,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H922.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M935,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H935z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M919.1,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H919.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M956.8,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C954.5,36.2,955.6,37.2,956.8,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M941,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H941c-1.3,0-2.3,1-2.3,2.3v7.5C938.7,36.2,939.7,37.2,941,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M956.8,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C954.5,52,955.6,53.1,956.8,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M941,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H941c-1.3,0-2.3,1-2.3,2.3v7.5C938.7,52,939.7,53.1,941,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M956.8,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C954.5,67.9,955.6,68.9,956.8,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M941,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3H941c-1.3,0-2.3,1-2.3,2.3v7.5C938.7,67.9,939.7,68.9,941,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M954.5,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H954.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M938.7,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H938.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M966.7,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H966.7z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M950.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3H941c-1.3,0-2.3,1-2.3,2.3v6.9H950.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M972.5,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C970.2,36.2,971.2,37.2,972.5,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M972.5,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C970.2,52,971.2,53.1,972.5,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M972.5,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C970.2,67.9,971.2,68.9,972.5,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M970.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H970.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M988.3,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C986,36.2,987.1,37.2,988.3,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M988.3,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C986,52,987.1,53.1,988.3,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M988.3,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C986,67.9,987.1,68.9,988.3,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M986,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H986z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M998.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H998.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M982.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H982.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1029.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1029.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1014,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1014z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1061.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1061.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1045.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1045.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1093.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1093.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1077.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1077.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1125,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1125z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1109.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1109.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1156.8,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1156.8z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1140.9,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1140.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1178.6,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1176.3,36.2,1177.4,37.2,1178.6,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1178.6,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1176.3,52,1177.4,53.1,1178.6,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1178.6,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1176.3,67.9,1177.4,68.9,1178.6,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1176.3,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H1176.3z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1188.5,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1188.5z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1172.6,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1172.6z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1210.4,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1208.1,36.2,1209.1,37.2,1210.4,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1194.5,37.2h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1192.2,36.2,1193.2,37.2,1194.5,37.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1210.4,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1208.1,52,1209.1,53.1,1210.4,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1194.5,53.1h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1192.2,52,1193.2,53.1,1194.5,53.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1210.4,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1208.1,67.9,1209.1,68.9,1210.4,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1194.5,68.9h7.5c1.3,0,2.3-1,2.3-2.3v-7.5c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v7.5C1192.2,67.9,1193.2,68.9,1194.5,68.9z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1208.1,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H1208.1z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1192.2,11.7v7.3c0,1.3,1,2.3,2.3,2.3h7.5c1.3,0,2.3-1,2.3-2.3v-7.3H1192.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1220.2,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1220.2z\"/>\n\t\t<path style=\"fill:#0B0C0F;\" d=\"M1204.3,81.8v-6.9c0-1.3-1-2.3-2.3-2.3h-7.5c-1.3,0-2.3,1-2.3,2.3v6.9H1204.3z\"/>\n\t</g>\n</g>\n<g id=\"_x31_0GBT\">\n\t<path style=\"fill:#D9D9D9;\" d=\"M1171.5,59.3h-167.8c-0.6,0-1.1-0.5-1.1-1.1V24.3c0-0.6,0.5-1.1,1.1-1.1h167.8c0.6,0,1.1,0.5,1.1,1.1v33.8C1172.6,58.8,1172.1,59.3,1171.5,59.3z\"/>\n\t<g>\n\t\t<g>\n\t\t\t<g>\n\t\t\t\t<polygon style=\"fill:#191919;\" points=\"1167.5,41.4 1168.3,41.4 1168.3,33 1160.2,33 1160.2,27.7 1156.7,27.7 1156.7,25.1 1143,25.1 1143,27.7 1139.6,27.7 1139.6,33 1131.6,33 1131.6,41.4 1132.3,41.4 1132.3,47.1 1131.6,47.1 1131.6,55.6 1168.3,55.6 1168.3,47.1 1167.5,47.1\"/>\n\t\t\t\t<g>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1138.7,48.4 1138.7,54.7 1139.6,54.7 1139.6,48.4 1138.7,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1160.2,48.4 1160.2,54.7 1161.1,54.7 1161.1,48.4 1160.2,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1157.1,48.4 1157.1,54.7 1158,54.7 1158,48.4 1157.1,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1154,48.4 1154,54.7 1154.9,54.7 1154.9,48.4 1154,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1151,48.4 1151,54.7 1151.9,54.7 1151.9,48.4 1151,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1147.9,48.4 1147.9,54.7 1148.8,54.7 1148.8,48.4 1147.9,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1144.9,48.4 1144.9,54.7 1145.8,54.7 1145.8,48.4 1144.9,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1141.8,48.4 1141.8,54.7 1142.7,54.7 1142.7,48.4 1141.8,48.4\"/>\n\t\t\t\t</g>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<polygon style=\"fill:#191919;\" points=\"1125.9,41.4 1126.6,41.4 1126.6,33 1118.6,33 1118.6,27.7 1115.1,27.7 1115.1,25.1 1101.4,25.1 1101.4,27.7 1097.9,27.7 1097.9,33 1090,33 1090,41.4 1090.7,41.4 1090.7,47.1 1090,47.1 1090,55.6 1126.6,55.6 1126.6,47.1 1125.9,47.1 1125.9,41.4\"/>\n\t\t\t\t<g>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1098.2,48.4 1098.2,54.7 1099.1,54.7 1099.1,48.4 1098.2,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1119.7,48.4 1119.7,54.7 1120.6,54.7 1120.6,48.4 1119.7,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1116.7,48.4 1116.7,54.7 1117.5,54.7 1117.5,48.4 1116.7,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1113.6,48.4 1113.6,54.7 1114.4,54.7 1114.4,48.4 1113.6,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1110.5,48.4 1110.5,54.7 1111.3,54.7 1111.3,48.4 1110.5,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1107.4,48.4 1107.4,54.7 1108.3,54.7 1108.3,48.4 1107.4,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1104.3,48.4 1104.3,54.7 1105.2,54.7 1105.2,48.4 1104.3,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#755B1E;\" points=\"1101.3,48.4 1101.3,54.7 1102.2,54.7 1102.2,48.4 1101.3,48.4\"/>\n\t\t\t\t</g>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<polygon style=\"fill:#191919;\" points=\"1085.4,41.4 1086.1,41.4 1086.1,33 1078,33 1078,27.7 1074.6,27.7 1074.6,25.1 1060.8,25.1 1060.8,27.7 1057.4,27.7 1057.4,33 1049.4,33 1049.4,41.4 1050.1,41.4 1050.1,47.1 1049.4,47.1 1049.4,55.6 1086.1,55.6 1086.1,47.1 1085.4,47.1\"/>\n\t\t\t\t<g>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1056.6,48.4 1056.6,54.7 1057.5,54.7 1057.5,48.4 1056.6,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1078,48.4 1078,54.7 1078.9,54.7 1078.9,48.4 1078,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1074.9,48.4 1074.9,54.7 1075.8,54.7 1075.8,48.4 1074.9,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1071.9,48.4 1071.9,54.7 1072.8,54.7 1072.8,48.4 1071.9,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1068.8,48.4 1068.8,54.7 1069.7,54.7 1069.7,48.4 1068.8,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1065.7,48.4 1065.7,54.7 1066.6,54.7 1066.6,48.4 1065.7,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1062.7,48.4 1062.7,54.7 1063.6,54.7 1063.6,48.4 1062.7,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1059.6,48.4 1059.6,54.7 1060.5,54.7 1060.5,48.4 1059.6,48.4\"/>\n\t\t\t\t</g>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<polygon style=\"fill:#191919;\" points=\"1043.7,41.4 1044.4,41.4 1044.4,33 1036.3,33 1036.3,27.7 1032.9,27.7 1032.9,25.1 1019.2,25.1 1019.2,27.7 1015.7,27.7 1015.7,33 1007.7,33 1007.7,41.4 1008.5,41.4 1008.5,47.1 1007.7,47.1 1007.7,55.6 1044.4,55.6 1044.4,47.1 1043.7,47.1\"/>\n\t\t\t\t<g>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1014.9,48.4 1014.9,54.7 1015.8,54.7 1015.8,48.4 1014.9,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1036.3,48.4 1036.3,54.7 1037.2,54.7 1037.2,48.4 1036.3,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1033.3,48.4 1033.3,54.7 1034.2,54.7 1034.2,48.4 1033.3,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1030.2,48.4 1030.2,54.7 1031.1,54.7 1031.1,48.4 1030.2,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1027.2,48.4 1027.2,54.7 1028.1,54.7 1028.1,48.4 1027.2,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1024.1,48.4 1024.1,54.7 1025,54.7 1025,48.4 1024.1,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1021,48.4 1021,54.7 1021.9,54.7 1021.9,48.4 1021,48.4\"/>\n\t\t\t\t\t<polygon style=\"fill:#6F5311;\" points=\"1018,48.4 1018,54.7 1018.9,54.7 1018.9,48.4 1018,48.4\"/>\n\t\t\t\t</g>\n\t\t\t</g>\n\t\t</g>\n\t\t<g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1007.3\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7.1\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1014.1,28.6v2.7h-6.5v-2.7H1014.1 M1014.7,28h-7.6v3.8h7.6V28L1014.7,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1037.8\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7.1\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1044.5,28.6v2.7h-6.5v-2.7H1044.5 M1045.1,28h-7.6v3.8h7.6V28L1045.1,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1048.9\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1055.7,28.6v2.7h-6.5v-2.7H1055.7 M1056.3,28h-7.6v3.8h7.6V28L1056.3,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1079.5\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7.1\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1086.3,28.6v2.7h-6.5v-2.7H1086.3 M1086.8,28h-7.6v3.8h7.6V28L1086.8,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1089.5\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1096.3,28.6v2.7h-6.5v-2.7H1096.3 M1096.8,28h-7.6v3.8h7.6V28L1096.8,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1120\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1126.7,28.6v2.7h-6.5v-2.7H1126.7 M1127.3,28h-7.6v3.8h7.6V28L1127.3,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1131.1\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1137.9,28.6v2.7h-6.5v-2.7H1137.9 M1138.5,28h-7.6v3.8h7.6V28L1138.5,28z\"/>\n\t\t\t</g>\n\t\t\t<g>\n\t\t\t\t<rect x=\"1161.6\" y=\"28.3\" style=\"fill:#5F5F5F;\" width=\"7.1\" height=\"3.2\"/>\n\t\t\t\t<path style=\"fill:#191919;\" d=\"M1168.4,28.6v2.7h-6.5v-2.7H1168.4 M1168.9,28h-7.6v3.8h7.6V28L1168.9,28z\"/>\n\t\t\t</g>\n\t\t</g>\n\t</g>\n</g>\n<g id=\"QSFP-3\">\n\t<g>\n\t\t<path d=\"M918.1,58.5c0,0.4-0.3,0.8-0.8,0.8h-56.1c-0.4,0-0.8-0.3-0.8-0.8V30.1c0-0.4,0.3-0.8,0.8-0.8h56.1c0.4,0,0.8,0.3,0.8,0.8V58.5z\"/>\n\t</g>\n\t<path style=\"fill:#8C8C8C;stroke:#8C8C8C;stroke-width:0.5059;stroke-miterlimit:10;\" d=\"M915.2,32.1c0.4,0,0.7,0.3,0.7,0.7v23c0,0.4-0.3,0.7-0.7,0.7H863c-0.4,0-0.7-0.3-0.7-0.7v-23c0-0.4,0.3-0.7,0.7-0.7H915.2 M915.2,31.4H863c-0.8,0-1.4,0.6-1.4,1.4v23c0,0.8,0.6,1.4,1.4,1.4h52.2c0.8,0,1.4-0.6,1.4-1.4v-23C916.7,32,916,31.4,915.2,31.4L915.2,31.4z\"/>\n\t<linearGradient id=\"mx5108n_SVGID_1_\" gradientUnits=\"userSpaceOnUse\" x1=\"889.231\" y1=\"33.4674\" x2=\"889.231\" y2=\"29.4575\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"866.1\" y=\"29.5\" style=\"fill:url(#mx5108n_SVGID_1_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_2_\" gradientUnits=\"userSpaceOnUse\" x1=\"889.231\" y1=\"59.2865\" x2=\"889.231\" y2=\"55.2766\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"866.1\" y=\"55.3\" style=\"fill:url(#mx5108n_SVGID_2_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_3_\" gradientUnits=\"userSpaceOnUse\" x1=\"863.6443\" y1=\"44.8755\" x2=\"860.2969\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"860.3\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_3_);\" width=\"3.3\" height=\"21.6\"/>\n\t<linearGradient id=\"mx5108n_SVGID_4_\" gradientUnits=\"userSpaceOnUse\" x1=\"918.1136\" y1=\"44.8755\" x2=\"914.7663\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"914.8\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_4_);\" width=\"3.3\" height=\"21.6\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_1_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 907.6383 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_2_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 896.1383 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_3_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 884.0113 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_4_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 871.855 22.5274)\" style=\"overflow:visible;\"/>\n</g>\n<g id=\"QSFP-2\">\n\t<g>\n\t\t<path d=\"M839.2,58.5c0,0.4-0.3,0.8-0.8,0.8h-56.1c-0.4,0-0.8-0.3-0.8-0.8V30.1c0-0.4,0.3-0.8,0.8-0.8h56.1c0.4,0,0.8,0.3,0.8,0.8V58.5z\"/>\n\t</g>\n\t<path style=\"fill:#8C8C8C;stroke:#8C8C8C;stroke-width:0.5059;stroke-miterlimit:10;\" d=\"M836.3,32.1c0.4,0,0.7,0.3,0.7,0.7v23c0,0.4-0.3,0.7-0.7,0.7h-52.2c-0.4,0-0.7-0.3-0.7-0.7v-23c0-0.4,0.3-0.7,0.7-0.7H836.3 M836.3,31.4h-52.2c-0.8,0-1.4,0.6-1.4,1.4v23c0,0.8,0.6,1.4,1.4,1.4h52.2c0.8,0,1.4-0.6,1.4-1.4v-23C837.7,32,837.1,31.4,836.3,31.4L836.3,31.4z\"/>\n\t<linearGradient id=\"mx5108n_SVGID_5_\" gradientUnits=\"userSpaceOnUse\" x1=\"810.3003\" y1=\"33.4674\" x2=\"810.3003\" y2=\"29.4575\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"787.2\" y=\"29.5\" style=\"fill:url(#mx5108n_SVGID_5_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_6_\" gradientUnits=\"userSpaceOnUse\" x1=\"810.3003\" y1=\"59.2865\" x2=\"810.3003\" y2=\"55.2766\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"787.2\" y=\"55.3\" style=\"fill:url(#mx5108n_SVGID_6_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_7_\" gradientUnits=\"userSpaceOnUse\" x1=\"784.7137\" y1=\"44.8755\" x2=\"781.3662\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"781.4\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_7_);\" width=\"3.3\" height=\"21.6\"/>\n\t<linearGradient id=\"mx5108n_SVGID_8_\" gradientUnits=\"userSpaceOnUse\" x1=\"839.183\" y1=\"44.8755\" x2=\"835.8356\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"835.8\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_8_);\" width=\"3.3\" height=\"21.6\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_8_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 829.0133 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_7_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 817.5133 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_6_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 805.3863 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_5_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 793.23 22.5274)\" style=\"overflow:visible;\"/>\n</g>\n<g id=\"QSFP-1\">\n\t<g>\n\t\t<path d=\"M712.3,58.5c0,0.4-0.3,0.8-0.8,0.8h-56.1c-0.4,0-0.8-0.3-0.8-0.8V30.1c0-0.4,0.3-0.8,0.8-0.8h56.1c0.4,0,0.8,0.3,0.8,0.8V58.5z\"/>\n\t</g>\n\t<path style=\"fill:#8C8C8C;stroke:#8C8C8C;stroke-width:0.5059;stroke-miterlimit:10;\" d=\"M709.4,32.1c0.4,0,0.7,0.3,0.7,0.7v23c0,0.4-0.3,0.7-0.7,0.7h-52.2c-0.4,0-0.7-0.3-0.7-0.7v-23c0-0.4,0.3-0.7,0.7-0.7H709.4 M709.4,31.4h-52.2c-0.8,0-1.4,0.6-1.4,1.4v23c0,0.8,0.6,1.4,1.4,1.4h52.2c0.8,0,1.4-0.6,1.4-1.4v-23C710.9,32,710.2,31.4,709.4,31.4L709.4,31.4z\"/>\n\t<linearGradient id=\"mx5108n_SVGID_9_\" gradientUnits=\"userSpaceOnUse\" x1=\"683.4522\" y1=\"33.4674\" x2=\"683.4522\" y2=\"29.4575\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"660.3\" y=\"29.5\" style=\"fill:url(#mx5108n_SVGID_9_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_10_\" gradientUnits=\"userSpaceOnUse\" x1=\"683.4522\" y1=\"59.2865\" x2=\"683.4522\" y2=\"55.2766\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"660.3\" y=\"55.3\" style=\"fill:url(#mx5108n_SVGID_10_);\" width=\"46.2\" height=\"4\"/>\n\t<linearGradient id=\"mx5108n_SVGID_11_\" gradientUnits=\"userSpaceOnUse\" x1=\"657.8655\" y1=\"44.8755\" x2=\"654.5181\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"654.5\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_11_);\" width=\"3.3\" height=\"21.6\"/>\n\t<linearGradient id=\"mx5108n_SVGID_12_\" gradientUnits=\"userSpaceOnUse\" x1=\"712.3348\" y1=\"44.8755\" x2=\"708.9875\" y2=\"44.8755\">\n\t\t<stop offset=\"0\" style=\"stop-color:#262626\"/>\n\t\t<stop offset=\"0.6682\" style=\"stop-color:#CCCCCC\"/>\n\t\t<stop offset=\"1\" style=\"stop-color:#595959\"/>\n\t</linearGradient>\n\t<rect x=\"709\" y=\"34.1\" style=\"fill:url(#mx5108n_SVGID_12_);\" width=\"3.3\" height=\"21.6\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_12_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 702.1652 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_11_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 690.6652 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_10_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 678.5382 22.5274)\" style=\"overflow:visible;\"/>\n\t<use xlink:href=\"#status-led-1\" width=\"10\" height=\"10\" id=\"status-led2-off_9_\" x=\"-5\" y=\"-5\" transform=\"matrix(0.5916 0 0 -0.5916 666.382 22.5274)\" style=\"overflow:visible;\"/>\n</g>\n</svg>",
                        "@odata.id": "/api/DeviceService/Devices(3265)/GraphicInfo",
                        "@odata.context": "$metadata#DeviceService.GraphicInfo/$entity"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GraphicInfoModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceStatuses": {
      "get": {
        "description": "Returns a list of statuses for the devices\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns a list of statuses for the devices",
        "operationId": "30_DeviceService_8326",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceType": {
      "get": {
        "description": "Returns a list of devices types\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns a list of devices types",
        "operationId": "31_DeviceService_7272",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceSlotType": {
      "get": {
        "description": "Returns a list of slot types\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns a list of slot types",
        "operationId": "32_DeviceService_140",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSlotTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/DeviceBladeSlots": {
      "get": {
        "description": "Returns the slot details of a specific device\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the slot details of a specific device",
        "operationId": "33_DeviceService_2718",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceBladeSlotsExample": {
                    "value": {
                      "@odata.count": 6,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "3",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17692,
                          "SlotName": "Sled-3"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "5",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17694,
                          "SlotName": "Sled-5"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "7",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17696,
                          "SlotName": "Sled-7"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "8",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17697,
                          "SlotName": "Sled-8"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "4",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17693,
                          "SlotName": "Sled-4"
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceBladeSlots",
                          "ServiceTag": "",
                          "PowerState": 18,
                          "SlotNumber": "6",
                          "DeviceName": "",
                          "SlotType": 2000,
                          "AllowSharedStorage": true,
                          "AllowStorageAssignment": true,
                          "DeviceType": 1000,
                          "HealthStatus": 2000,
                          "Model": "",
                          "Id": 17695,
                          "SlotName": "Sled-6"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.DeviceBladeSlots)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSlotsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/DeviceSettingsMetadata": {
      "get": {
        "description": "Returns a list of settings metadata\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns a list of settings metadata",
        "operationId": "34_DeviceService_7352",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceSettingsMetadataExample": {
                    "value": {
                      "@odata.count": 24,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Redundancy policy type is No redundancy",
                          "Value": "No Redundancy",
                          "Key": "NO_REDUNDANCY",
                          "Property": "redundancyPolicy",
                          "Id": 1000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Redundancy policy type is GRID redundancy",
                          "Value": "GRID Redundancy",
                          "Key": "GRID_REDUNDANCY",
                          "Property": "redundancyPolicy",
                          "Id": 2000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Dhcp Provisioning is disable",
                          "Value": "Disabled",
                          "Key": "DISABLED",
                          "Property": "dhcpProvisioning",
                          "Id": 5000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Dhcp Provisioning is enable once",
                          "Value": "Enable Once",
                          "Key": "ENABLE_ONCE",
                          "Property": "dhcpProvisioning",
                          "Id": 6000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Dhcp Provisioning is enable once after reset",
                          "Value": "Enable Once After Reset",
                          "Key": "ENABLE_ONCE_AFTER_RESET",
                          "Property": "dhcpProvisioning",
                          "Id": 7000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Network speed is 10 MB",
                          "Value": "10 MB",
                          "Key": "10_MB",
                          "Property": "networkSpeed",
                          "Id": 8000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Network speed is 100 MB",
                          "Value": "100 MB",
                          "Key": "100_MB",
                          "Property": "networkSpeed",
                          "Id": 9000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "QuickSyncAccess is disabled",
                          "Value": "Disabled",
                          "Key": "DISABLED",
                          "Property": "quickSyncAccess",
                          "Id": 11000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "QuickSyncAccess is read only",
                          "Value": "Read Only",
                          "Key": "READ_ONLY",
                          "Property": "quickSyncAccess",
                          "Id": 12000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "QuickSyncAccess is read write",
                          "Value": "Read-Write",
                          "Key": "READ_WRITE",
                          "Property": "quickSyncAccess",
                          "Id": 13000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Time out limit unit is seconds",
                          "Value": "Seconds",
                          "Key": "SECONDS",
                          "Property": "timeoutLimitUnit",
                          "Id": 14000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Time out limit unit is minutes",
                          "Value": "Minutes",
                          "Key": "MINUTES",
                          "Property": "timeoutLimitUnit",
                          "Id": 15000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "LCD access is disabled",
                          "Value": "Disabled",
                          "Key": "DISABLED",
                          "Property": "lcdAccess",
                          "Id": 16000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "LCD access is view only",
                          "Value": "View Only",
                          "Key": "VIEW_ONLY",
                          "Property": "lcdAccess",
                          "Id": 17000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "LCD access is view and modify",
                          "Value": "View and Modify",
                          "Key": "VIEW_AND_MODIFY",
                          "Property": "lcdAccess",
                          "Id": 18000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Redundancy policy type is PSU redundancy",
                          "Value": "PSU Redundancy",
                          "Key": "PSU_REDUNDANCY",
                          "Property": "redundancyPolicy",
                          "Id": 19000
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Primary Grid 1",
                          "Value": "Grid 1",
                          "Key": "GRID_1",
                          "Property": "rapidOnPrimaryGrid",
                          "Id": 19001
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Primary Grid 2",
                          "Value": "Grid 2",
                          "Key": "GRID_2",
                          "Property": "rapidOnPrimaryGrid",
                          "Id": 19002
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "English",
                          "Value": "English",
                          "Key": "en",
                          "Property": "lcdLanguage",
                          "Id": 19003
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "French",
                          "Value": "French",
                          "Key": "fr",
                          "Property": "lcdLanguage",
                          "Id": 19004
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "German",
                          "Value": "German",
                          "Key": "de",
                          "Property": "lcdLanguage",
                          "Id": 19005
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Spanish",
                          "Value": "Spanish",
                          "Key": "es",
                          "Property": "lcdLanguage",
                          "Id": 19006
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Japanese",
                          "Value": "Japanese",
                          "Key": "ja",
                          "Property": "lcdLanguage",
                          "Id": 19007
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceSettingsMetadata",
                          "Description": "Chinese",
                          "Value": "Chinese",
                          "Key": "zh",
                          "Property": "lcdLanguage",
                          "Id": 19008
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.DeviceSettingsMetadata)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceSettingsMetadataResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Actions/DeviceService.GetTermState": {
      "post": {
        "description": "Returns term state information\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns term state information",
        "operationId": "35_DeviceService_6850",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getTermStateExample": {
                    "value": [
                      {
                        "SerialInterfaceValue": "MSM"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SerialInterfaceValue"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Actions/DeviceService.SetTermState": {
      "post": {
        "description": "Returns term state information\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns term state information",
        "operationId": "36_DeviceService_3424",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Actions/DeviceService.GetComputeIPs": {
      "post": {
        "description": "Returns details of device IPs\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "deviceId that need to be updated",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns details of device IPs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object"
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "operationId": "37_DeviceService_7919",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getComputeIpsExample": {
                    "value": [
                      {
                        "PpAddress": [
                          "10.35.0.20",
                          "10.35.0.21"
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComputeIpModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/ConnectionStateReasons": {
      "get": {
        "description": "Returns the list of available connection states reasons.\n\nPrivilege: VIEW",
        "summary": "Returns the list of available connection states reasons.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceConnectionStatesResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DeviceService"
        ],
        "operationId": "38_DeviceService_9675"
      }
    },
    "/DeviceService/ConnectionStateReasons({connectionStateId})": {
      "get": {
        "description": "Returns the details of an specific connection state reason.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:connectionStateId",
            "required": true,
            "name": "connectionStateId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the details of an specific connection state reason.",
        "operationId": "39_DeviceService_2443",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceConnectionStateModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Actions/DeviceService.RemoveDevices": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceIdsList"
              }
            }
          },
          "required": true,
          "description": "update DeviceIdsList object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes an array of devices.\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "DeviceService"
        ],
        "operationId": "40_DeviceService_271",
        "summary": "Deletes an array of devices."
      }
    },
    "/DeviceService/Devices({deviceId})/SensorHealth": {
      "get": {
        "description": "Returns sensor health information of a device.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-OperationName",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns sensor health information of a device.",
        "operationId": "42_DeviceService_7842",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSensorHealthExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.SensorHealth",
                          "SubSystemData": [],
                          "Reason": null,
                          "HealthStatus": "",
                          "Name": "Intrusion"
                        },
                        {
                          "@odata.type": "#DeviceService.SensorHealth",
                          "SubSystemData": [
                            {
                              "SubSystemHealth": "2000",
                              "Type": "Other",
                              "SubSystemName": "DIMM SLOT A1"
                            },
                            {
                              "SubSystemHealth": "2000",
                              "Type": "Other",
                              "SubSystemName": "DIMM SLOT A2"
                            }
                          ],
                          "Reason": null,
                          "HealthStatus": "2000",
                          "Name": "Memory"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.SensorHealth)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SensorHealth"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/GlobalExcludes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceIdsList"
              }
            }
          },
          "required": true,
          "description": "update DeviceIdsList object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Add devices to globally excluded ranges.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "43_DeviceService_2951",
        "summary": "Add devices to globally excluded ranges."
      },
      "get": {
        "description": "Returns the globally excluded ranges.\n\nPrivilege: VIEW",
        "summary": "Returns the globally excluded ranges.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getExclusionExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.GlobalExclude",
                          "GlobalExcludeDetails": [
                            {
                              "Subnet": null,
                              "NetworkAddress": "10.35.0.72",
                              "Id": 1
                            }
                          ],
                          "@odata.id": "/api/DeviceService/GlobalExcludes(1)",
                          "DeviceType": 0,
                          "Identifier": "VBC1234",
                          "Id": 1
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.GlobalExclude)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GlobalExcludeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DeviceService"
        ],
        "operationId": "44_DeviceService_3675"
      }
    },
    "/DeviceService/Actions/DeviceService.AddNetworkRange": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalExcludeModel"
              }
            }
          },
          "required": true,
          "description": "update GlobalExcludeModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "addOrUpdateNetworkAddressesInExclusionExample": {
                    "value": [
                      {
                        "GlobalExcludeIds": [
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GlobalExcludeIdsList"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Adds network ranges to global exclusion.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "45_DeviceService_6195",
        "summary": "Adds network ranges to global exclusion."
      }
    },
    "/DeviceService/Actions/DeviceService.EditNetworkRange": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalExcludeModel"
              }
            }
          },
          "required": true,
          "description": "update GlobalExcludeModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "addOrUpdateNetworkAddressesInExclusionExample": {
                    "value": [
                      {
                        "GlobalExcludeIds": [
                          2
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GlobalExcludeIdsList"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Updates network ranges to global exclusion.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "46_DeviceService_1277",
        "summary": "Updates network ranges to global exclusion."
      }
    },
    "/DeviceService/Actions/DeviceService.RemoveFromExclusion": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalExclusionList"
              }
            }
          },
          "required": true,
          "description": "update GlobalExclusionList object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Removes ranges in global exclusion.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "47_DeviceService_1128",
        "summary": "Removes ranges in global exclusion."
      }
    },
    "/DeviceService/Actions/DeviceService.ValidateExcludes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GlobalExcludeModel"
              }
            }
          },
          "required": true,
          "description": "update GlobalExcludeModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "validateExclusionListExample": {
                    "value": [
                      {
                        "NetworkAddress": [
                          "10.35.0.*"
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GlobalExclusionValidationResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Validates ranges in global exclusion.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "48_DeviceService_7704",
        "summary": "Validates ranges in global exclusion."
      }
    },
    "/DeviceService/DeviceModels": {
      "get": {
        "description": "Returns list of device models.\n\nPrivilege: VIEW",
        "summary": "Returns list of device models.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceModelsExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.DeviceModelsList",
                        "Models": [
                          "Acme A-1013G",
                          "Acme A-1015G",
                          "Master_ACME_1015G",
                          "PowerEdge C4130",
                          "unknown"
                        ],
                        "@odata.id": "/api/DeviceService/DeviceModels",
                        "@odata.context": "/api/$metadata#DeviceService.DeviceModelsList"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceModels"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DeviceService"
        ],
        "operationId": "49_DeviceService_6757"
      }
    },
    "/DeviceService/Actions/DeviceService.AddCredentialToDevice": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "",
                "type": "object",
                "properties": {
                  "DeviceId": {
                    "type": "array",
                    "items": {
                      "type": "object"
                    }
                  },
                  "CredentialProfile": {
                    "type": "object",
                    "required": [
                      "CredentialProfileId",
                      "CredentialProfile",
                      "ProfileType"
                    ],
                    "properties": {
                      "CredentialProfileId": {
                        "type": "number"
                      },
                      "CredentialProfile": {
                        "type": "string",
                        "minLength": 1
                      },
                      "ProfileType": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                },
                "required": [
                  "DeviceId",
                  "CredentialProfile"
                ]
              },
              "examples": {
                "Sample Request": {
                  "value": {
                    "DeviceId": [
                      11199
                    ],
                    "CredentialProfile": {
                      "CredentialProfileId": 0,
                      "CredentialProfile": "{\"profileName\":\"\",\"profileDescription\":\"\",\"type\":\"MANAGEMENT\",\"credentials\":[{\"id\":0,\"type\":\"WSMAN\",\"authType\":\"Basic\",\"modified\":false,\"credentials\":{\"username\":\"asdf\",\"password\":\"sdf\",\"caCheck\":false,\"cnCheck\":false,\"port\":443,\"retries\":3,\"timeout\":60,\"isHttp\":false,\"keepAlive\":false}},\\{\"id\":0,\"type\":\"REDFISH\",\"authType\":\"Basic\",\"modified\":false,\"credentials\":{\"username\":\"asdf\",\"password\":\"sdf\",\"caCheck\":false,\"cnCheck\":false,\"port\":443,\"retries\":3,\"timeout\":60,\"isHttp\":false,\"keepAlive\":false}}]}",
                      "ProfileType": "2"
                    }
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update DeviceConnectionProfileModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Adds the credential information of devices when an on-boarding job is initiated.\n\nPrivilege: JOB_MANAGEMENT",
        "tags": [
          "DeviceService"
        ],
        "operationId": "50_DeviceService_4819",
        "summary": "Adds the credential information of devices when an on-boarding job is initiated."
      }
    },
    "/DeviceService/Actions/DeviceService.DeleteMGMTProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "description": "Free form object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Removes the management profile.\n\nPrivilege: JOB_MANAGEMENT",
        "tags": [
          "DeviceService"
        ],
        "operationId": "51_DeviceService_7368",
        "summary": "Removes the management profile."
      }
    },
    "/DeviceService/Actions/DeviceService.SetDeviceName": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingRequestModel"
              }
            }
          },
          "required": true,
          "description": "update SettingRequestModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Sets the device name.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "DeviceService"
        ],
        "operationId": "52_DeviceService_4987",
        "summary": "Sets the device name."
      }
    },
    "/DeviceService/Devices({deviceId})/VirtualSession": {
      "get": {
        "description": "Returns the virtual session of the device.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the virtual session of the device.",
        "operationId": "53_DeviceService_2494",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getVirtualSessionExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.VirtualSession",
                        "CurrentPlugin": "HTML5",
                        "ConsoleUrl": "https://10.35.0.46:443/console?username=root&tempUsername=1175914891&tempPassword=2074888756",
                        "@odata.id": "/api/DeviceService/Devices(10074)/VirtualSession",
                        "@odata.context": "/api/$metadata#DeviceService.VirtualSession"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/VirtualSessionModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Devices({deviceId})/Baselines": {
      "get": {
        "description": "Returns the baseline details of the device.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns the baseline details of the device.",
        "operationId": "54_DeviceService_5100",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getBaselinesByDeviceIdExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.BaselineDetailResponse",
                        "BaselineDetail": [],
                        "@odata.id": "/api/DeviceService/Devices(10074)/Baselines",
                        "@odata.context": "/api/$metadata#DeviceService.BaselineDetailResponse",
                        "DeviceId": 10074
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaselineDetailsResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/HostKeys": {
      "get": {
        "description": "Returns the list of known host keys.\n\nPrivilege: DEVICE_CONFIGURATION",
        "summary": "Returns the list of known host keys.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getHostKeysExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.HostKey",
                          "@odata.id": "/api/DeviceService/HostKeys(1)",
                          "AssociatedDevice": 0,
                          "Key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDX2iFTkHd9LrRMhi02xTBlA5e/t/BGzwI21orZm/Bb3OG6VWGmha9X/6X159IUiHgSQxPrwAt9/GvfPKDFuIsRgoTyPKHZEIOZru1oKBAAV5Sm8xt9o1H8ovn+M/qNTuSKuAwLLmvBKqb+eWEGt4TVbq1A4Q0AxHkvJKlAhKYoOS0q6pJjYbi1chuy2wAYtS0JWc8OBG18UiaZq0SGFmbP7cq4bdys4A49tht239Zo9Dl4MEcPW2qtcMUgg7SknKbTbe7Uc3NtX73qPLa/BSLMfsd7qGEwkPPtDGReBqTjrZhVB065Ecr2kjldvPp3U/cnHYycXMRxD4dIr3DhWB9V",
                          "Identifier": "10.35.155.224",
                          "Type": "SSH_KNOWN_HOSTS",
                          "Id": 1
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.HostKey)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HostKeyModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DeviceService"
        ],
        "operationId": "55_DeviceService_6589"
      }
    },
    "/DeviceService/HostKeys({deviceId})": {
      "get": {
        "description": "Returns specific host key.\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int64"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "DeviceService"
        ],
        "summary": "Returns specific host key.",
        "operationId": "56_DeviceService_2304",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getHostKeysByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#DeviceService.HostKey",
                        "@odata.id": "/api/DeviceService/HostKeys(1)",
                        "@odata.context": "/api/$metadata#DeviceService.HostKey",
                        "AssociatedDevice": 0,
                        "Key": "AAAAB3NzaC1yc2EAAAADAQABAAABAQDX2iFTkHd9LrRMhi02xTBlA5e/t/BGzwI21orZm/Bb3OG6VWGmha9X/6X159IUiHgSQxPrwAt9/GvfPKDFuIsRgoTyPKHZEIOZru1oKBAAV5Sm8xt9o1H8ovn+M/qNTuSKuAwLLmvBKqb+eWEGt4TVbq1A4Q0AxHkvJKlAhKYoOS0q6pJjYbi1chuy2wAYtS0JWc8OBG18UiaZq0SGFmbP7cq4bdys4A49tht239Zo9Dl4MEcPW2qtcMUgg7SknKbTbe7Uc3NtX73qPLa/BSLMfsd7qGEwkPPtDGReBqTjrZhVB065Ecr2kjldvPp3U/cnHYycXMRxD4dIr3DhWB9V",
                        "Identifier": null,
                        "Type": "SSH_KNOWN_HOSTS",
                        "Id": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HostKeyModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DeviceService/Actions/DeviceService.RemoveKeys": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KeyIdsList"
              }
            }
          },
          "required": true,
          "description": "update KeyIdsList object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Removes the keys.\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "DeviceService"
        ],
        "operationId": "57_DeviceService_4087",
        "summary": "Removes the keys."
      }
    },
    "/DeviceService/Actions/DeviceService.AddKeys": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostKeysList"
              }
            }
          },
          "required": true,
          "description": "update HostKeysList object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This method enables you to manually add the known host keys.\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "DeviceService"
        ],
        "operationId": "58_DeviceService_6992",
        "summary": "This method enables you to manually add the known host keys."
      }
    },
    "/DeviceService/Actions/DeviceService.ScanAndAddKeys": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScanKeysForHost"
              }
            }
          },
          "required": true,
          "description": "update ScanKeysForHost object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Automatically scans and adds the known keys.\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "DeviceService"
        ],
        "operationId": "59_DeviceService_3816",
        "summary": "Automatically scans and adds the known keys."
      }
    },
    "/MIBImportService": {
      "get": {
        "description": "This is a root service. It gets all the endpoints for MIB service.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for MIB Services.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MIBImportService"
        ],
        "operationId": "1_MIBImportService_678"
      }
    },
    "/MIBImportService/MIBS": {
      "get": {
        "description": "This API returns the traps imported from all the MIBs. All the traps with information are listed and they can be grouped based on the catalog name.\n\nPrivilege: VIEW",
        "summary": "Gets the traps imported from all the MIBs.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getTrapsExample": {
                    "value": [
                      {
                        "@odata.type": "#MIBImportService.GetTrapsPayload",
                        "GenericTrapId": 6,
                        "EnterpriseOid": ".1.3.6.1.4.1.674.10909.1",
                        "EventDefinition": {
                          "Severity": {
                            "Description": "Info",
                            "Id": 2,
                            "Name": "Info"
                          },
                          "EventSubCategory": null,
                          "EventType": {
                            "EventTypeId": 2,
                            "Name": "SNMP",
                            "Description": "SNMP event"
                          },
                          "EventCategory": {
                            "EventCategoryName": "System Health",
                            "Id": 1
                          },
                          "EventCatalog": {
                            "EventCatalogId": 3,
                            "ReleaseVersion": "9.0.0",
                            "Name": "iDRAC"
                          },
                          "EventDefinitionId": 500387,
                          "Description": "Physical memory on the system has increased.",
                          "Name": "alertPhysicalMemoryIncreased"
                        },
                        "FormatString": "$3",
                        "SnmpEventId": 3366,
                        "SpecificTrapId": 2032
                      },
                      {
                        "@odata.type": "#MIBImportService.GetTrapsPayload",
                        "GenericTrapId": 6,
                        "EnterpriseOid": ".1.3.6.1.4.1.674.10909.1",
                        "EventDefinition": {
                          "Severity": {
                            "Description": "Info",
                            "Id": 2,
                            "Name": "Info"
                          },
                          "EventSubCategory": null,
                          "EventType": {
                            "EventTypeId": 2,
                            "Name": "SNMP",
                            "Description": "SNMP event"
                          },
                          "EventCategory": {
                            "EventCategoryName": "System Health",
                            "Id": 1
                          },
                          "EventCatalog": {
                            "EventCatalogId": 3,
                            "ReleaseVersion": "9.0.0",
                            "Name": "iDRAC"
                          },
                          "EventDefinitionId": 500384,
                          "Description": "Hard drive capacity on system has decreased.",
                          "Name": "alertHDDCapacityDecreased"
                        },
                        "FormatString": "$3",
                        "SnmpEventId": 3367,
                        "SpecificTrapId": 2039
                      },
                      {
                        "@odata.type": "#MIBImportService.GetTrapsPayload",
                        "GenericTrapId": 6,
                        "EnterpriseOid": ".1.3.6.1.4.1.674.10909.1",
                        "EventDefinition": {
                          "Severity": {
                            "Description": "Info",
                            "Id": 2,
                            "Name": "Info"
                          },
                          "EventSubCategory": null,
                          "EventType": {
                            "EventTypeId": 2,
                            "Name": "SNMP",
                            "Description": "SNMP event"
                          },
                          "EventCategory": {
                            "EventCategoryName": "System Health",
                            "Id": 1
                          },
                          "EventCatalog": {
                            "EventCatalogId": 3,
                            "ReleaseVersion": "9.0.0",
                            "Name": "iDRAC"
                          },
                          "EventDefinitionId": 500381,
                          "Description": "Number of hard disks on the system has increased.",
                          "Name": "alertNumberOfHDDIncreased"
                        },
                        "FormatString": "$3",
                        "SnmpEventId": 3368,
                        "SpecificTrapId": 2030
                      },
                      {
                        "@odata.type": "#MIBImportService.GetTrapsPayload",
                        "GenericTrapId": 6,
                        "EnterpriseOid": ".1.3.6.1.4.1.674.10909.1",
                        "EventDefinition": {
                          "Severity": {
                            "Description": "Info",
                            "Id": 2,
                            "Name": "Info"
                          },
                          "EventSubCategory": null,
                          "EventType": {
                            "EventTypeId": 2,
                            "Name": "SNMP",
                            "Description": "SNMP event"
                          },
                          "EventCategory": {
                            "EventCategoryName": "System Health",
                            "Id": 1
                          },
                          "EventCatalog": {
                            "EventCatalogId": 3,
                            "ReleaseVersion": "9.0.0",
                            "Name": "iDRAC"
                          },
                          "EventDefinitionId": 500379,
                          "Description": "Number of processors on the system has decreased.",
                          "Name": "alertNumberOfProcessorDecreased"
                        },
                        "FormatString": "$3",
                        "SnmpEventId": 3369,
                        "SpecificTrapId": 2036
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GetTrapsPayload"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MIBImportService"
        ],
        "operationId": "2_MIBImportService_6859"
      }
    },
    "/MIBImportService/Actions/MIBImportService.Save": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "saveTrapPayloadList": {
                    "items": {
                      "$ref": "#/components/schemas/SaveTrapPayload"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update SaveTrapPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This API saves parsed traps from MIB in the appliance.\n\nPrivilege: TRAP_MANAGEMENT",
        "tags": [
          "MIBImportService"
        ],
        "operationId": "3_MIBImportService_4626",
        "summary": "Saves parsed traps from MIB in the appliance."
      }
    },
    "/MIBImportService/Actions/MIBImportService.Parse": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "description": "Free form object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This API parses MIB files to get trap information. This URI accepts absolute file paths of the MIB file that needs to be parsed.\n\nPrivilege: TRAP_MANAGEMENT",
        "tags": [
          "MIBImportService"
        ],
        "operationId": "4_MIBImportService_8990",
        "summary": "Parses MIB files to get trap information."
      }
    },
    "/MIBImportService/Actions/MIBImportService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "additionalProperties": true,
                "type": "object",
                "description": "Free form object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This API deletes the MIB files and corresponding traps from the system.\n\nPrivilege: TRAP_MANAGEMENT",
        "tags": [
          "MIBImportService"
        ],
        "operationId": "5_MIBImportService_4973",
        "summary": "Deletes the MIB files and corresponding traps from the system."
      }
    },
    "/MIBImportService/EventSeverities": {
      "get": {
        "description": "This API returns the event severities.\n\nPrivilege: VIEW",
        "summary": "Gets the event severities.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventSeveritiesExample": {
                    "value": [
                      {
                        "@odata.type": "#MIBImportService.MIBEventSeverity",
                        "Description": "Unknown",
                        "Name": "Unknown",
                        "@odata.id": "/api/MIBImportService/EventSeverities(1)",
                        "Id": 1
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventSeverity",
                        "Description": "Info",
                        "Name": "Info",
                        "@odata.id": "/api/MIBImportService/EventSeverities(2)",
                        "Id": 2
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventSeverity",
                        "Description": "Normal",
                        "Name": "Normal",
                        "@odata.id": "/api/MIBImportService/EventSeverities(4)",
                        "Id": 4
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventSeverity",
                        "Description": "Warning",
                        "Name": "Warning",
                        "@odata.id": "/api/MIBImportService/EventSeverities(8)",
                        "Id": 8
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventSeverity",
                        "Description": "Critical",
                        "Name": "Critical",
                        "@odata.id": "/api/MIBImportService/EventSeverities(16)",
                        "Id": 16
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventSeverity"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MIBImportService"
        ],
        "operationId": "6_MIBImportService_926"
      }
    },
    "/MIBImportService/EventCatalogs": {
      "get": {
        "description": "This API returns the event catalogs.\n\nPrivilege: VIEW",
        "summary": "Gets the event catalogs.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventCatalogsExample": {
                    "value": [
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "MIB-Dell-10892",
                        "ReleaseVersion": "7.4.0",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(1)",
                        "EventCatalogId": 1,
                        "BuiltIn": true,
                        "CatalogName": "OMSA"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "IDRAC-MIB-SMIv2",
                        "ReleaseVersion": "v3.5",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(2)",
                        "EventCatalogId": 2,
                        "BuiltIn": true,
                        "CatalogName": "iDRAC"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "MIB-Dell-10909",
                        "ReleaseVersion": "9.0.0",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(3)",
                        "EventCatalogId": 3,
                        "BuiltIn": true,
                        "CatalogName": "iDRAC"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "MCSI Source",
                        "ReleaseVersion": "1.0.1",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(4)",
                        "EventCatalogId": 4,
                        "BuiltIn": true,
                        "CatalogName": "Application"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "DELL-ASF-MIB",
                        "ReleaseVersion": "1.17.0",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(5)",
                        "EventCatalogId": 5,
                        "BuiltIn": true,
                        "CatalogName": "iDRAC"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "IDRAC-MIB-SMIv1",
                        "ReleaseVersion": "v3.5",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(12)",
                        "EventCatalogId": 12,
                        "BuiltIn": true,
                        "CatalogName": "iDRAC"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "Brcm-BASPTrap-MIB",
                        "ReleaseVersion": "3.4",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(5000)",
                        "EventCatalogId": 5000,
                        "BuiltIn": true,
                        "CatalogName": "iDRAC"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "COMPELLENT-MIB",
                        "ReleaseVersion": "201302181350Z",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(5001)",
                        "EventCatalogId": 5001,
                        "BuiltIn": true,
                        "CatalogName": "Dell Storage"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "DELLEMC-OS10-CHASSIS-MIB",
                        "ReleaseVersion": "201701251200Z",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(5002)",
                        "EventCatalogId": 5002,
                        "BuiltIn": true,
                        "CatalogName": "Networking"
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCatalog",
                        "InternalName": "DELL-MD-SS-06-MIB",
                        "ReleaseVersion": "201302181350Z",
                        "@odata.id": "/api/MIBImportService/EventCatalogs(5003)",
                        "EventCatalogId": 5003,
                        "BuiltIn": true,
                        "CatalogName": "Dell Storage"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventCatalog"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MIBImportService"
        ],
        "operationId": "7_MIBImportService_7224"
      }
    },
    "/MIBImportService/EventCategories": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveCategoryPayload"
              }
            }
          },
          "required": true,
          "description": "update SaveCategoryPayload object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This API creates an event category and returns the ID of the created category.\n\nPrivilege: TRAP_MANAGEMENT",
        "tags": [
          "MIBImportService"
        ],
        "operationId": "9_MIBImportService_2693",
        "summary": "Creates an event category."
      },
      "get": {
        "description": "This API returns the event categories.\n\nPrivilege: VIEW",
        "summary": "Gets the event categories.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventCategoriesExample": {
                    "value": [
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "System Health",
                        "@odata.id": "/api/MIBImportService/EventCategories(1)",
                        "Id": 1
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Storage",
                        "@odata.id": "/api/MIBImportService/EventCategories(2)",
                        "Id": 2
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Updates",
                        "@odata.id": "/api/MIBImportService/EventCategories(3)",
                        "Id": 3
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Audit",
                        "@odata.id": "/api/MIBImportService/EventCategories(4)",
                        "Id": 4
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Configuration",
                        "@odata.id": "/api/MIBImportService/EventCategories(5)",
                        "Id": 5
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Work Notes",
                        "@odata.id": "/api/MIBImportService/EventCategories(6)",
                        "Id": 6
                      },
                      {
                        "@odata.type": "#MIBImportService.MIBEventCategory",
                        "EventCategoryName": "Miscellaneous",
                        "@odata.id": "/api/MIBImportService/EventCategories(7)",
                        "Id": 7
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventCategory"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MIBImportService"
        ],
        "operationId": "8_MIBImportService_2600"
      }
    },
    "/SearchService": {
      "get": {
        "description": "Returns the search service information of the appliance\n\nPrivilege: VIEW",
        "summary": "Returns the search service information of the appliance",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "SearchService"
        ],
        "operationId": "1_SearchService_5656"
      }
    },
    "/SearchService/Actions/SearchService.Search": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchModel"
              }
            }
          },
          "required": true,
          "description": "update SearchModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success, returns the links to the navigation pages"
          },
          "400": {
            "content": {},
            "description": "Bad request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Returns internal server error if there are any errors detected during search"
          }
        },
        "description": "Searches for the query strings and returns the links to the navigation pages\n\nPrivilege: VIEW",
        "tags": [
          "SearchService"
        ],
        "operationId": "2_SearchService_3583",
        "summary": "Performs a search using the query string that you provide and returns links to the corresponding navigation pages"
      }
    },
    "/SearchService/Indices": {
      "get": {
        "description": "Returns a list of the current active indices.\n\nPrivilege: VIEW",
        "summary": "Returns a list of the current active indices.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "SearchService"
        ],
        "operationId": "3_SearchService_5010"
      }
    },
    "/AlertService/AlertDestinations": {
      "get": {
        "description": "Returns the alert destination information of the appliance.\n\nPrivilege: VIEW",
        "summary": "Returns the alert destination information of the appliance.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "1_AlertService_5065"
      }
    },
    "/AlertService/AlertDestinations/SNMPConfiguration": {
      "get": {
        "description": "Returns a collection of SNMP configuration.\n\nPrivilege: VIEW",
        "summary": "Returns a collection of SNMP configuration",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SNMPConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "2_AlertService_6414"
      }
    },
    "/AlertService/AlertDestinations/Actions/AlertDestinations.ApplySNMPConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "SnmpConfigList": {
                    "items": {
                      "$ref": "#/components/schemas/SNMPConfiguration"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update SNMPConfiguration object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SNMPConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Configures SNMP Destination.\n\nNote: The authentication passphrase and privacy passphrase are returned in plaintext when setting up SNMPv3\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "3_AlertService_6602",
        "summary": "Configures SNMP Destination."
      }
    },
    "/AlertService/AlertDestinations/Actions/AlertDestinations.UpdateSNMPConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SNMPConfiguration"
              }
            }
          },
          "required": true,
          "description": "update SNMPConfiguration object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SNMPConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates SNMP Configuration.\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "4_AlertService_3742",
        "summary": "Updates SNMP Configuration."
      }
    },
    "/AlertService/AlertDestinations/Actions/AlertDestinations.SendTestTrap": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SNMPConfiguration"
              }
            }
          },
          "required": true,
          "description": "update SNMPConfiguration object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Sends an SNMP trap to the destination address.\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "5_AlertService_9961",
        "summary": "Sends an SNMP trap to the destination address."
      }
    },
    "/AlertService/AlertDestinations/SyslogConfiguration": {
      "get": {
        "description": "Returns a list of syslog configuration.\n\nPrivilege: VIEW",
        "summary": "Returns a list of syslog configuration.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SyslogConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "6_AlertService_1599"
      }
    },
    "/AlertService/AlertDestinations/Actions/AlertDestinations.ApplySyslogConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Syslog": {
                    "items": {
                      "$ref": "#/components/schemas/SyslogConfiguration"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update SyslogConfiguration object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "updateSyslogSettingsExample": {
                    "value": [
                      {
                        "PortNumber": 514,
                        "DestinationAddress": "100.97.10.17",
                        "Enabled": true,
                        "Id": 1
                      },
                      {
                        "PortNumber": 514,
                        "DestinationAddress": "100.97.10.17",
                        "Enabled": true,
                        "Id": 2
                      },
                      {
                        "PortNumber": 514,
                        "DestinationAddress": "10.19.12.1",
                        "Enabled": true,
                        "Id": 3
                      },
                      {
                        "PortNumber": 514,
                        "DestinationAddress": "100.97.1.23",
                        "Enabled": true,
                        "Id": 4
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SyslogConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Configures the syslog.\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "7_AlertService_4176",
        "summary": "Configures the syslog."
      }
    },
    "/AlertService/AlertDestinations/SMTPConfiguration": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SMTPConfiguration"
              }
            }
          },
          "required": true,
          "description": "update SMTPConfiguration object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SyslogConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Configures SMTP Destination.\n\nWhen UseCredentials is set to 'True', both User and Password become mandatory fields.\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "9_AlertService_9283",
        "summary": "Configures SMTP Destination."
      },
      "get": {
        "description": "Returns a collection of SMTP configuration.\n\nPrivilege: VIEW",
        "summary": "Returns a collection of SMTP configuration.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SyslogConfiguration"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "8_AlertService_3187"
      }
    },
    "/AlertService": {
      "get": {
        "description": "Returns the alert service information of the appliance.\n\nPrivilege: VIEW",
        "summary": "Returns the alert service information of the appliance.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "10_AlertService_4333"
      }
    },
    "/AlertService/Alerts": {
      "get": {
        "description": "Returns the alerts that have been received.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,AlertEntityId,AlertEntityName,AlertDeviceId,AlertDeviceName,AlertDeviceIdentifier,AlertDeviceType,AlertDeviceGroup,SeverityType,StatusType,CategoryId,SubCategoryId,SubCategoryName,Message,EemiMessage,RecommendedAction,TimeStampBegin,TimeStampEnd,UserName,IsPolling",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Id",
                "Id desc",
                "SeverityType",
                "SeverityType desc",
                "SeverityName",
                "SeverityName desc",
                "AlertEntityId",
                "AlertEntityId desc",
                "AlertEntityName",
                "AlertEntityName desc",
                "AlertDeviceGroup",
                "AlertDeviceGroup desc",
                "AlertDeviceIpAddress",
                "AlertDeviceIpAddress desc",
                "AlertDeviceMacAddress",
                "AlertDeviceMacAddress desc",
                "AlertDeviceIdentifier",
                "AlertDeviceIdentifier desc",
                "AlertDeviceAssetTag",
                "AlertDeviceAssetTag desc",
                "AlertDeviceType",
                "AlertDeviceType desc",
                "DefinitionId",
                "DefinitionId desc",
                "CatalogName",
                "CatalogName desc",
                "CategoryId",
                "CategoryId desc",
                "CategoryName",
                "CategoryName desc",
                "SubCategoryId",
                "SubCategoryId desc",
                "SubCategoryName",
                "SubCategoryName desc",
                "StatusType",
                "StatusType desc",
                "StatusName",
                "StatusName desc",
                "TimeStamp",
                "TimeStamp desc",
                "Message",
                "Message desc",
                "EemiMessage",
                "EemiMessage desc",
                "RecommendedAction",
                "RecommendedAction desc",
                "AlertMessageId",
                "AlertMessageId desc",
                "AlertVarBindDetails",
                "AlertVarBindDetails desc",
                "AlertMessagetype",
                "AlertMessagetype desc",
                "MessageArgs",
                "MessageArgs desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the alerts that have been received.",
        "operationId": "11_AlertService_1387",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventsStoredProcedureExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "SeverityName": "Info",
                          "AlertDeviceGroup": 0,
                          "AlertDeviceAssetTag": "",
                          "AlertDeviceMacAddress": "f8:bc:12:47:1d:06",
                          "AlertDeviceIpAddress": "10.35.0.42",
                          "RecommendedAction": "Check the device subsystems for components that require immediate attention. For information about device health statuses, see the Online Help by clicking the help icon. Also see the User's Guide available on the support site.",
                          "AlertMessageType": "Internal",
                          "StatusName": "Acknowledged",
                          "StatusType": 1000,
                          "AlertDeviceName": "10.35.0.51",
                          "@odata.type": "#AlertService.Alert",
                          "EemiMessage": "The device health status has changed.",
                          "AlertDeviceIdentifier": "7654321",
                          "AlertVarBindDetails": "",
                          "AlertMessageId": "CDEV6129",
                          "MessageArgs": "",
                          "CatalogName": "Application",
                          "SubCategoryId": 90,
                          "AlertDeviceId": 10078,
                          "AlertDeviceType": 1000,
                          "AlertEntityType": "Device",
                          "TimeStamp": "2020-09-04 02:00:37.782",
                          "@odata.id": "/api/AlertService/Alerts(2)",
                          "DefinitionId": 400022,
                          "SeverityType": 2,
                          "CategoryId": 1,
                          "CategoryName": "System Health",
                          "AlertEntityName": "10.35.0.51",
                          "UserName": "admin",
                          "SubCategoryName": "Devices",
                          "AlertEntityId": 10078,
                          "Message": "Device is online. ",
                          "Id": 2
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.Alert)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventsDaoSummaryModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/Alerts({eventId})": {
      "get": {
        "description": "Returns the alert of the specific eventId.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:eventId",
            "required": true,
            "name": "eventId",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the alert of the specific eventId.",
        "operationId": "12_AlertService_6331",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventExample": {
                    "value": [
                      {
                        "SeverityName": "Critical",
                        "AlertDeviceGroup": 0,
                        "AlertDeviceAssetTag": "",
                        "AlertDeviceMacAddress": "4c:d9:8f:7f:3c:b5",
                        "AlertDeviceIpAddress": "10.35.0.83",
                        "RecommendedAction": "Check if the device has power and is turned on, if device is not powered on then attempt iDrac Reset. If issue still not resolved, then attempt a virtual reseat. If the issue persists after performing the above steps, contact your service provider.",
                        "AlertMessageType": "Internal",
                        "StatusName": "Not-Acknowledged",
                        "StatusType": 2000,
                        "AlertDeviceName": null,
                        "@odata.type": "#AlertService.Alert",
                        "EemiMessage": "The operation cannot be performed on the device because connection with the device is lost.",
                        "@odata.context": "/api/$metadata#AlertService.Alert",
                        "AlertDeviceIdentifier": "BTR5PY2",
                        "AlertVarBindDetails": null,
                        "AlertMessageId": "CDEV6131",
                        "MessageArgs": null,
                        "CatalogName": "Application",
                        "SubCategoryId": 90,
                        "AlertDeviceId": null,
                        "AlertDeviceType": 1000,
                        "AlertEntityType": "Device",
                        "TimeStamp": "2020-09-04 02:00:36.619",
                        "@odata.id": "/api/AlertService/Alerts(1)",
                        "DefinitionId": 400021,
                        "SeverityType": 16,
                        "CategoryId": 1,
                        "CategoryName": "System Health",
                        "AlertEntityName": "10.35.0.83",
                        "UserName": null,
                        "SubCategoryName": "Devices",
                        "AlertEntityId": 10073,
                        "Message": "Unable to perform the operation on the device because connection with the device is lost. ",
                        "Id": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventsDaoSummaryModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertCategories": {
      "get": {
        "description": "Returns all the alert categories.\n\nPrivilege: VIEW",
        "summary": "Returns all the alert categories.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventCategoriesDetailsExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertCategories",
                          "CategoriesDetails": [
                            {
                              "@odata.type": "#AlertService.AlertCategory",
                              "SubCategoryDetails": [
                                {
                                  "@odata.type": "#AlertService.AlertSubCategory",
                                  "Description": "Devices",
                                  "Id": 90,
                                  "Name": "Devices"
                                },
                                {
                                  "@odata.type": "#AlertService.AlertSubCategory",
                                  "Description": "Generic",
                                  "Id": 10,
                                  "Name": "Generic"
                                }
                              ],
                              "CatalogName": "Application",
                              "Id": 4,
                              "Name": "Audit"
                            }
                          ],
                          "IsBuiltIn": true,
                          "@odata.id": "/api/AlertService/AlertCategories('Application')",
                          "Name": "Application"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertCategories)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertCategoriesExtendedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "13_AlertService_19"
      }
    },
    "/AlertService/AlertCategories({catalogName})": {
      "get": {
        "description": "Returns the alert categories for a specific catalog.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:catalogName",
            "required": true,
            "name": "catalogName",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the alert categories for a specific catalog.",
        "operationId": "14_AlertService_7024",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventCategorysDetailsByCatalogNameExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertCategories",
                        "IsBuiltIn": false,
                        "Name": "Application",
                        "@odata.id": "/api/AlertService/AlertCategories('Application')",
                        "@odata.context": "/api/$metadata#AlertService.AlertCategories",
                        "CategoriesDetails": [
                          {
                            "@odata.type": "#AlertService.AlertCategory",
                            "SubCategoryDetails": [
                              {
                                "@odata.type": "#AlertService.AlertSubCategory",
                                "Description": "Devices",
                                "Id": 90,
                                "Name": "Devices"
                              },
                              {
                                "@odata.type": "#AlertService.AlertSubCategory",
                                "Description": "Generic",
                                "Id": 10,
                                "Name": "Generic"
                              }
                            ],
                            "CatalogName": "Application",
                            "Id": 4,
                            "Name": "Audit"
                          },
                          {
                            "@odata.type": "#AlertService.AlertCategory",
                            "SubCategoryDetails": [
                              {
                                "@odata.type": "#AlertService.AlertSubCategory",
                                "Description": "Application",
                                "Id": 85,
                                "Name": "Application"
                              }
                            ],
                            "CatalogName": "Application",
                            "Id": 5,
                            "Name": "Configuration"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertCategoriesExtendedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertSeverities": {
      "get": {
        "description": "Returns all the severities applicable to an alert.\n\nPrivilege: VIEW",
        "summary": "Returns all the severities applicable to an alert.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventSeveritiesExample": {
                    "value": {
                      "@odata.count": 5,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertSeverity",
                          "Description": "Unknown",
                          "Name": "Unknown",
                          "@odata.id": "/api/AlertService/AlertSeverities(1)",
                          "Id": 1
                        },
                        {
                          "@odata.type": "#AlertService.AlertSeverity",
                          "Description": "Info",
                          "Name": "Info",
                          "@odata.id": "/api/AlertService/AlertSeverities(2)",
                          "Id": 2
                        },
                        {
                          "@odata.type": "#AlertService.AlertSeverity",
                          "Description": "Normal",
                          "Name": "Normal",
                          "@odata.id": "/api/AlertService/AlertSeverities(4)",
                          "Id": 4
                        },
                        {
                          "@odata.type": "#AlertService.AlertSeverity",
                          "Description": "Warning",
                          "Name": "Warning",
                          "@odata.id": "/api/AlertService/AlertSeverities(8)",
                          "Id": 8
                        },
                        {
                          "@odata.type": "#AlertService.AlertSeverity",
                          "Description": "Critical",
                          "Name": "Critical",
                          "@odata.id": "/api/AlertService/AlertSeverities(16)",
                          "Id": 16
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertSeverity)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertSeverityModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "15_AlertService_1419"
      }
    },
    "/AlertService/AlertSeverities({id})": {
      "get": {
        "description": "Returns the information of a specific severity.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the information of a specific severity.",
        "operationId": "16_AlertService_4568",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventSeverityByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertSeverity",
                        "Description": "Unknown",
                        "@odata.id": "/api/AlertService/AlertSeverities(1)",
                        "@odata.context": "/api/$metadata#AlertService.AlertSeverity",
                        "Id": 1,
                        "Name": "Unknown"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertSeverityModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertStatuses({id})": {
      "get": {
        "description": "Returns the information of a specific severity.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the information of a specific severity.",
        "operationId": "17_AlertService_1146",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventStatusByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertStatus",
                        "Description": "The event was acknowledged",
                        "@odata.id": "/api/AlertService/AlertStatuses(1000)",
                        "@odata.context": "/api/$metadata#AlertService.AlertStatus",
                        "Id": 1000,
                        "Name": "Acknowledged"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertStatuses": {
      "get": {
        "description": "Returns all possible statuses that are applicable to an alert.\n\nPrivilege: VIEW",
        "summary": "Returns all possible statuses that are applicable to an alert.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllEventStatusesExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertStatus",
                          "Description": "The event was acknowledged",
                          "Name": "Acknowledged",
                          "@odata.id": "/api/AlertService/AlertStatuses(1000)",
                          "Id": 1000
                        },
                        {
                          "@odata.type": "#AlertService.AlertStatus",
                          "Description": "The event was not acknowledged",
                          "Name": "Not-Acknowledged",
                          "@odata.id": "/api/AlertService/AlertStatuses(2000)",
                          "Id": 2000
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertStatus)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertStatusModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "18_AlertService_7950"
      }
    },
    "/AlertService/AlertMessageDefinitions": {
      "get": {
        "description": "Returns the definitions for all alert messages.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-MessageId,Category,SubCategory,Message,Severity",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the definitions for all alert messages.",
        "operationId": "19_AlertService_8798",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllMessageDefinitionsExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertMessageDefinition",
                          "Category": "System Health",
                          "Severity": "Informational",
                          "SequenceNo": 317,
                          "@odata.id": "/api/AlertService/AlertMessageDefinitions('AMP0317')",
                          "RecommendedAction": "No response action is required.",
                          "Prefix": "AMP",
                          "DetailedDescription": "None.",
                          "MessageId": "AMP0317",
                          "Message": "System level current is within range.",
                          "SubCategory": "Amperage"
                        },
                        {
                          "@odata.type": "#AlertService.AlertMessageDefinition",
                          "Category": "Configuration",
                          "Severity": "Informational",
                          "SequenceNo": 31,
                          "@odata.id": "/api/AlertService/AlertMessageDefinitions('BAR031')",
                          "RecommendedAction": "RESERVED.",
                          "Prefix": "BAR",
                          "DetailedDescription": "RESERVED.",
                          "MessageId": "BAR031",
                          "Message": "RESERVED.",
                          "SubCategory": "Backup/Restore"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertMessageDefinition)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertMessageDefinitionResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertMessageDefinitions({messageId})": {
      "get": {
        "description": "Returns the details of a specific message definition.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:messageId",
            "required": true,
            "name": "messageId",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the details of a specific message definition.",
        "operationId": "20_AlertService_3677",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getMessageDefinitionRequestExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertMessageDefinition",
                        "Category": "System Health",
                        "Severity": "Informational",
                        "RecommendedAction": "No response action is required.",
                        "SequenceNo": 317,
                        "@odata.id": "/api/AlertService/AlertMessageDefinitions('AMP0317')",
                        "@odata.context": "/api/$metadata#AlertService.AlertMessageDefinition",
                        "Prefix": "AMP",
                        "DetailedDescription": "None.",
                        "MessageId": "AMP0317",
                        "Message": "System level current is within range.",
                        "SubCategory": "Amperage"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertMessageDefinitionModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertMessageDefinitionsCategories": {
      "get": {
        "description": "Returns the list of alert definition categories.\n\nPrivilege: VIEW",
        "summary": "Returns the list of alert definition categories.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllMessageDefinitionsCategoriesExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertMessageDefinitionCategory",
                          "Category": "Audit",
                          "SubCategoriesDetails": [
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "BIOS Management"
                            },
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "Debug"
                            },
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "Devices"
                            }
                          ],
                          "@odata.id": "/api/AlertService/AlertMessageDefinitionsCategories('Audit')"
                        },
                        {
                          "@odata.type": "#AlertService.AlertMessageDefinitionCategory",
                          "Category": "Configuration",
                          "SubCategoriesDetails": [
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "Auto-Discovery"
                            },
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "BIOS Management"
                            },
                            {
                              "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                              "SubCategory": "BOOT Control"
                            }
                          ],
                          "@odata.id": "/api/AlertService/AlertMessageDefinitionsCategories('Configuration')"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertMessageDefinitionCategory)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertMessageDefinitionCategoriesResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "AlertService"
        ],
        "operationId": "21_AlertService_8528"
      }
    },
    "/AlertService/AlertMessageDefinitionsCategories({categoryName})": {
      "get": {
        "description": "Returns the details of a specific alert definition category.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:categoryName",
            "required": true,
            "name": "categoryName",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the details of a specific alert definition category.",
        "operationId": "22_AlertService_1996",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllMessageDefinitionsSubCategoriesExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertMessageDefinitionCategory",
                        "Category": "Configuration",
                        "SubCategoriesDetails": [
                          {
                            "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                            "SubCategory": "Auto-Discovery"
                          },
                          {
                            "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                            "SubCategory": "BIOS Management"
                          },
                          {
                            "@odata.type": "#AlertService.AlertMessageDefinitionSubCategories",
                            "SubCategory": "BOOT Control"
                          }
                        ],
                        "@odata.id": "/api/AlertService/AlertMessageDefinitionsCategories('Configuration')",
                        "@odata.context": "/api/$metadata#AlertService.AlertMessageDefinitionCategory"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertMessageDefinitionCategoriesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/Actions/AlertService.Acknowledge": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertActionRequestModel"
              }
            }
          },
          "required": true,
          "description": "update AlertActionRequestModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Acknowledges alerts. In one request, you can acknowledge only one of the following:- A specific alert - All alerts - A group of alerts based on the filters you provide.\n\nPrivilege: ALERT_MANAGEMENT",
        "tags": [
          "AlertService"
        ],
        "operationId": "23_AlertService_7758",
        "summary": "Acknowledges alerts."
      }
    },
    "/AlertService/Actions/AlertService.Unacknowledge": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertActionRequestModel"
              }
            }
          },
          "required": true,
          "description": "update AlertActionRequestModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Uncknowledges alerts. In one request, you can unacknowledged only one of the following:- A specific alert - All alerts - A group of alerts based on the filters you provide.\n\nPrivilege: ALERT_MANAGEMENT",
        "tags": [
          "AlertService"
        ],
        "operationId": "24_AlertService_6759",
        "summary": "Unacknowledges alerts."
      }
    },
    "/AlertService/Actions/AlertService.RemoveAlerts": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AlertActionRequestModel"
              }
            }
          },
          "required": true,
          "description": "update AlertActionRequestModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Removes the alerts. In one request, you can remove only one of the following:- A specific alert - All alerts - A group of alerts based on the filters you provide\n\nPrivilege: ALERT_MANAGEMENT",
        "tags": [
          "AlertService"
        ],
        "operationId": "25_AlertService_6072",
        "summary": "Removes the alerts."
      }
    },
    "/AlertService/AlertCatalogs": {
      "get": {
        "description": "Returns the catalogs applicable to events.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the catalogs applicable to events.",
        "operationId": "26_AlertService_8201",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventCatalogsExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#AlertService.AlertCatalog",
                          "InternalName": "MIB-Dell-10892",
                          "IsBuiltIn": true,
                          "ReleaseVersion": "7.4.0",
                          "@odata.id": "/api/AlertService/AlertCatalogs(1)",
                          "IsVisible": true,
                          "Id": 1,
                          "CatalogName": "OMSA"
                        },
                        {
                          "@odata.type": "#AlertService.AlertCatalog",
                          "InternalName": "IDRAC-MIB-SMIv2",
                          "IsBuiltIn": true,
                          "ReleaseVersion": "v3.5",
                          "@odata.id": "/api/AlertService/AlertCatalogs(2)",
                          "IsVisible": true,
                          "Id": 2,
                          "CatalogName": "iDRAC"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(AlertService.AlertCatalog)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertCatalogModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/AlertCatalogs({id})": {
      "get": {
        "description": "Returns the details of a specific alert catalog.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int64"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "AlertService"
        ],
        "summary": "Returns the details of a specific alert catalog.",
        "operationId": "27_AlertService_5173",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventCatalogByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#AlertService.AlertCatalog",
                        "InternalName": "MIB-Dell-10892",
                        "IsBuiltIn": true,
                        "ReleaseVersion": "7.4.0",
                        "@odata.id": "/api/AlertService/AlertCatalogs(1)",
                        "@odata.context": "/api/$metadata#AlertService.AlertCatalog",
                        "IsVisible": true,
                        "Id": 1,
                        "CatalogName": "OMSA"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AlertCatalogResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/AlertService/Events": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "eventModel": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates an event.\n\nPrivilege: MONITORING_SETUP",
        "tags": [
          "AlertService"
        ],
        "operationId": "28_AlertService_8850",
        "summary": "Creates an event."
      }
    },
    "/GroupService/GroupActions": {
      "get": {
        "description": "Returns a list of group actions\n\nPrivilege: VIEW",
        "summary": "Returns a list of group actions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupActionsExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAction",
                          "Description": "Safe Reboot",
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupActions(102)",
                          "IdOwner": 101,
                          "GroupIds": [
                            1007
                          ],
                          "TagIds": [
                            100
                          ],
                          "Id": 102,
                          "Name": "SAFE_REBOOT"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAction",
                          "Description": "Expunge",
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupActions(103)",
                          "IdOwner": 101,
                          "GroupIds": [
                            1007
                          ],
                          "TagIds": [
                            100
                          ],
                          "Id": 103,
                          "Name": "EXPUNGE"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAction)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOActions"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "1_GroupService_1588"
      }
    },
    "/GroupService/GroupActions({id})": {
      "get": {
        "description": "Returns the details of a group action\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a group action",
        "operationId": "2_GroupService_3482",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupActionByGroupActionIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.GroupAction",
                        "Name": "CREATE",
                        "@odata.id": "/api/GroupService/GroupActions(1)",
                        "@odata.context": "/api/$metadata#GroupService.GroupAction",
                        "IdOwner": 40,
                        "GroupIds": [
                          1029
                        ],
                        "TagIds": [
                          5
                        ],
                        "Id": 1,
                        "Description": "Create group"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOActions"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupAttributeTypes": {
      "get": {
        "description": "Returns a list of group attributes types\n\nPrivilege: VIEW",
        "summary": "Returns a list of group attributes types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupAttributeTypesExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAttributeType",
                          "Name": "POWER_CAPACITY",
                          "IsEditable": true,
                          "IdAttributeCategory": 1,
                          "@odata.id": "/api/GroupService/GroupAttributeTypes(1)",
                          "IsRequired": false,
                          "IdOwner": 40,
                          "IdAttributeUnits": 1,
                          "IsVisible": true,
                          "TagIds": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "AttributeValidationIds": [
                            1
                          ],
                          "Id": 1,
                          "Description": "User specified power capacity for a group."
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttributeType",
                          "Name": "CALCULATED_POWER_CAPACITY",
                          "IsEditable": false,
                          "IdAttributeCategory": 1,
                          "@odata.id": "/api/GroupService/GroupAttributeTypes(2)",
                          "IsRequired": true,
                          "IdOwner": 40,
                          "IdAttributeUnits": 1,
                          "IsVisible": true,
                          "TagIds": [
                            1,
                            2,
                            3,
                            4
                          ],
                          "AttributeValidationIds": [
                            2
                          ],
                          "Id": 2,
                          "Description": "Sum of all the child group power capacity calculated by system"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttributeType",
                          "Name": "SPACE_CAPACITY",
                          "IsEditable": true,
                          "IdAttributeCategory": 2,
                          "@odata.id": "/api/GroupService/GroupAttributeTypes(3)",
                          "IsRequired": true,
                          "IdOwner": 40,
                          "IdAttributeUnits": 2,
                          "IsVisible": true,
                          "TagIds": [
                            4
                          ],
                          "AttributeValidationIds": [
                            3
                          ],
                          "Id": 3,
                          "Description": "User specified space capacity for a group"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAttributeType)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupAttributeTypes"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "3_GroupService_806"
      }
    },
    "/GroupService/GroupAttributes": {
      "get": {
        "description": "Returns a list of group attributes\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupAttributeValidation"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns a list of group attributes",
        "operationId": "4_GroupService_5450",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupAttributesExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAttribute",
                          "Name": "ACTUAL_POWER",
                          "IsEditable": false,
                          "TypeName": "ACTUAL_POWER",
                          "IdCategory": 10,
                          "IdAttributeType": 100,
                          "@odata.id": "/api/GroupService/GroupAttributes(1)",
                          "Value": "500",
                          "DataTypeName": "integer",
                          "IsRequired": true,
                          "GroupAttributeValidation": {
                            "@odata.id": "/api/GroupService/GroupAttributes(1)/GroupAttributeValidation"
                          },
                          "IdOwner": 101,
                          "IsVisible": true,
                          "Units": "WATTS",
                          "TagIds": [
                            100
                          ],
                          "Id": 1,
                          "IdAttributeDataType": 2,
                          "CategoryName": "Power"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttribute",
                          "Name": "SPACE_CAPACITY",
                          "IsEditable": true,
                          "TypeName": "SPACE_CAPACITY",
                          "IdCategory": 20,
                          "IdAttributeType": 300,
                          "@odata.id": "/api/GroupService/GroupAttributes(2)",
                          "Value": "WEEKLY",
                          "DataTypeName": "string",
                          "IsRequired": true,
                          "GroupAttributeValidation": {
                            "@odata.id": "/api/GroupService/GroupAttributes(2)/GroupAttributeValidation"
                          },
                          "IdOwner": 101,
                          "IsVisible": true,
                          "Units": null,
                          "TagIds": [
                            102
                          ],
                          "Id": 2,
                          "IdAttributeDataType": 4,
                          "CategoryName": "Maintenance"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttribute",
                          "Name": "SPACE_CAPACITY",
                          "IsEditable": true,
                          "TypeName": "SPACE_CAPACITY",
                          "IdCategory": 20,
                          "IdAttributeType": 300,
                          "@odata.id": "/api/GroupService/GroupAttributes(3)",
                          "Value": "DAILY",
                          "DataTypeName": "string",
                          "IsRequired": true,
                          "GroupAttributeValidation": {
                            "@odata.id": "/api/GroupService/GroupAttributes(3)/GroupAttributeValidation"
                          },
                          "IdOwner": 101,
                          "IsVisible": true,
                          "Units": null,
                          "TagIds": [
                            102
                          ],
                          "Id": 3,
                          "IdAttributeDataType": 4,
                          "CategoryName": "Maintenance"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttribute",
                          "Name": "SPACE_CAPACITY",
                          "IsEditable": true,
                          "TypeName": "SPACE_CAPACITY",
                          "IdCategory": 20,
                          "IdAttributeType": 300,
                          "@odata.id": "/api/GroupService/GroupAttributes(4)",
                          "Value": "DAILY",
                          "DataTypeName": "string",
                          "IsRequired": true,
                          "GroupAttributeValidation": {
                            "@odata.id": "/api/GroupService/GroupAttributes(4)/GroupAttributeValidation"
                          },
                          "IdOwner": 101,
                          "IsVisible": true,
                          "Units": null,
                          "TagIds": [
                            102
                          ],
                          "Id": 4,
                          "IdAttributeDataType": 4,
                          "CategoryName": "Maintenance"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAttribute)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupAttributes"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupAttributes({id})": {
      "get": {
        "description": "Returns the details of a group attribute\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupAttributeValidation"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a group attribute",
        "operationId": "5_GroupService_8126",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupAttributeByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.GroupAttribute",
                        "Name": "ACTUAL_POWER",
                        "IsEditable": false,
                        "TypeName": "ACTUAL_POWER",
                        "IdCategory": 10,
                        "IdAttributeType": 100,
                        "@odata.id": "/api/GroupService/GroupAttributes(1)",
                        "@odata.context": "/api/$metadata#GroupService.GroupAttribute",
                        "DataTypeName": "integer",
                        "IsRequired": true,
                        "GroupAttributeValidation": {
                          "@odata.id": "/api/GroupService/GroupAttributes(1)/GroupAttributeValidation"
                        },
                        "IdOwner": 101,
                        "Value": "500",
                        "IsVisible": true,
                        "Units": "WATTS",
                        "TagIds": [
                          100
                        ],
                        "Id": 1,
                        "IdAttributeDataType": 2,
                        "CategoryName": "Power"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupAttribute"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupAttributes({id})/GroupAttributeValidation": {
      "get": {
        "description": "Returns the group attribute validation of a group attribute\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group attribute validation of a group attribute",
        "operationId": "6_GroupService_6558",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOAttributeValidation"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupAttributeValidations": {
      "get": {
        "description": "Returns a list of group attribute validations\n\nPrivilege: VIEW",
        "summary": "Returns a list of attribute validations",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupAttributeValidationsExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAttributeValidation",
                          "ValidationTypeName": "Power Range",
                          "EnumValidation": null,
                          "IdAttributeType": 1,
                          "@odata.id": "/api/GroupService/GroupAttributeValidations(1)",
                          "IntegerRangeValidation": {
                            "Max": 629365631,
                            "Id": 1,
                            "Min": 1
                          },
                          "DecimalRangeValidation": null,
                          "IdValidationType": 1,
                          "Id": 1,
                          "RegexValidation": null
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttributeValidation",
                          "ValidationTypeName": "Calculated Power Range",
                          "EnumValidation": null,
                          "IdAttributeType": 2,
                          "@odata.id": "/api/GroupService/GroupAttributeValidations(2)",
                          "IntegerRangeValidation": {
                            "Max": 629365631,
                            "Id": 2,
                            "Min": 1
                          },
                          "DecimalRangeValidation": null,
                          "IdValidationType": 2,
                          "Id": 2,
                          "RegexValidation": null
                        },
                        {
                          "@odata.type": "#GroupService.GroupAttributeValidation",
                          "ValidationTypeName": "Space Capacity Range",
                          "EnumValidation": null,
                          "IdAttributeType": 3,
                          "@odata.id": "/api/GroupService/GroupAttributeValidations(3)",
                          "IntegerRangeValidation": {
                            "Max": 80,
                            "Id": 3,
                            "Min": 1
                          },
                          "DecimalRangeValidation": null,
                          "IdValidationType": 3,
                          "Id": 3,
                          "RegexValidation": null
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAttributeValidation)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOAttributeValidation"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "7_GroupService_1139"
      }
    },
    "/GroupService/GroupAttributeValidations({id})": {
      "get": {
        "description": "Returns the details of a group attribute validation\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a group attribute validation",
        "operationId": "8_GroupService_4879",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupAttributeValidationByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.GroupAttributeValidation",
                        "ValidationTypeName": "Power Range",
                        "EnumValidation": null,
                        "IdAttributeType": 1,
                        "@odata.id": "/api/GroupService/GroupAttributeValidations(1)",
                        "@odata.context": "/api/$metadata#GroupService.GroupAttributeValidation",
                        "DecimalRangeValidation": null,
                        "IntegerRangeValidation": {
                          "Max": 629365631,
                          "Id": 1,
                          "Min": 1
                        },
                        "IdValidationType": 1,
                        "Id": 1,
                        "RegexValidation": null
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOAttributeValidations"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService": {
      "get": {
        "description": "Get all the endpoints for the Group Service\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Groups",
                "AllGroupsHierarchy"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Get all the endpoints for the Group Service",
        "operationId": "10_GroupService_7919",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups": {
      "get": {
        "description": "Returns a list of groups\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Name,Description,TypeId,MembershipTypeId,GlobalStatus,DefinitionId,DefinitionDescription,Visible,CreatedBy,UpdatedBy,CreationTimeBegin,CreationTimeEnd,UpdatedTimeBegin,UpdatedTimeEnd,Tag",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "SubGroups",
                "GroupHierarchy",
                "GroupDevicesSummary",
                "GroupTags",
                "GroupAttributes",
                "GroupActions"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns a list of groups",
        "operationId": "11_GroupService_1405",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupsExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "UpdatedTime": "2020-08-27 08:50:00.126",
                          "GlobalStatus": 5000,
                          "CreationTime": "2020-08-25 19:51:26.437",
                          "MembershipTypeId": 24,
                          "DefinitionDescription": "Root group for all Types of Devices.",
                          "HasAttributes": false,
                          "GroupTags@odata.navigationLink": "/api/GroupService/Groups(500)/GroupTags",
                          "@odata.type": "#GroupService.Group",
                          "TypeId": 2000,
                          "Description": "Group associated to all devices.",
                          "GroupHierarchy@odata.navigationLink": "/api/GroupService/Groups(500)/GroupHierarchy",
                          "IdOwner": 30,
                          "EventStatusSummary@odata.navigationLink": "/api/GroupService/Groups(500)/EventStatusSummary",
                          "AllLeafDeviceSummaries@odata.navigationLink": "/api/GroupService/Groups(500)/AllLeafDeviceSummaries",
                          "GroupQuery@odata.navigationLink": "/api/GroupService/Groups(500)/GroupQuery",
                          "AllLeafDevices@odata.navigationLink": "/api/GroupService/Groups(500)/AllLeafDevices",
                          "Name": "All Devices",
                          "@odata.id": "/api/GroupService/Groups(500)",
                          "DefinitionId": 500,
                          "SubGroups@odata.navigationLink": "/api/GroupService/Groups(500)/SubGroups",
                          "ParentId": 0,
                          "DeviceStatusSummary@odata.navigationLink": "/api/GroupService/Groups(500)/DeviceStatusSummary",
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/Groups(500)/GroupAttributes",
                          "GroupActions@odata.navigationLink": "/api/GroupService/Groups(500)/GroupActions",
                          "Visible": true,
                          "EventSeveritySummary@odata.navigationLink": "/api/GroupService/Groups(500)/EventSeveritySummary",
                          "CreatedBy": "system",
                          "UpdatedBy": "",
                          "Id": 500,
                          "Devices@odata.navigationLink": "/api/GroupService/Groups(500)/Devices",
                          "GroupDevicesSummary@odata.navigationLink": "/api/GroupService/Groups(500)/GroupDevicesSummary"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.Group)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})": {
      "delete": {
        "description": "Deletes a group\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Deletes a group",
        "operationId": "25_GroupService_1528",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "description": "Returns the details of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "SubGroups",
                "GroupHierarchy",
                "GroupDevicesSummary",
                "GroupTags",
                "GroupAttributes",
                "GroupActions"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a group",
        "operationId": "12_GroupService_4116",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupByGroupIdExample": {
                    "value": [
                      {
                        "UpdatedTime": "2020-08-27 09:10:00.112",
                        "GlobalStatus": 5000,
                        "CreationTime": "2020-08-25 19:51:26.437",
                        "MembershipTypeId": 24,
                        "DefinitionDescription": "Root group for all Types of Devices.",
                        "HasAttributes": false,
                        "GroupTags@odata.navigationLink": "/api/GroupService/Groups(500)/GroupTags",
                        "@odata.type": "#GroupService.Group",
                        "TypeId": 2000,
                        "Description": "Group associated to all devices.",
                        "@odata.context": "/api/$metadata#GroupService.Group",
                        "GroupHierarchy@odata.navigationLink": "/api/GroupService/Groups(500)/GroupHierarchy",
                        "IdOwner": 30,
                        "EventStatusSummary@odata.navigationLink": "/api/GroupService/Groups(500)/EventStatusSummary",
                        "AllLeafDeviceSummaries@odata.navigationLink": "/api/GroupService/Groups(500)/AllLeafDeviceSummaries",
                        "GroupQuery@odata.navigationLink": "/api/GroupService/Groups(500)/GroupQuery",
                        "AllLeafDevices@odata.navigationLink": "/api/GroupService/Groups(500)/AllLeafDevices",
                        "Name": "All Devices",
                        "@odata.id": "/api/GroupService/Groups(500)",
                        "DefinitionId": 500,
                        "SubGroups@odata.navigationLink": "/api/GroupService/Groups(500)/SubGroups",
                        "ParentId": 0,
                        "DeviceStatusSummary@odata.navigationLink": "/api/GroupService/Groups(500)/DeviceStatusSummary",
                        "GroupAttributes@odata.navigationLink": "/api/GroupService/Groups(500)/GroupAttributes",
                        "GroupActions@odata.navigationLink": "/api/GroupService/Groups(500)/GroupActions",
                        "Visible": true,
                        "EventSeveritySummary@odata.navigationLink": "/api/GroupService/Groups(500)/EventSeveritySummary",
                        "CreatedBy": "system",
                        "UpdatedBy": "",
                        "Id": 500,
                        "Devices@odata.navigationLink": "/api/GroupService/Groups(500)/Devices",
                        "GroupDevicesSummary@odata.navigationLink": "/api/GroupService/Groups(500)/GroupDevicesSummary"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/GroupDevicesSummary": {
      "get": {
        "description": "Returns the device summary of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the device summary of a group",
        "operationId": "13_GroupService_3503",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupDevicesSummaryExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "TotalCount": 55,
                          "DeviceType": 1000,
                          "GroupDevicesStatusSummary": [
                            {
                              "Count": 29,
                              "StatusType": 1000
                            },
                            {
                              "Count": 5,
                              "StatusType": 2000
                            },
                            {
                              "Count": 4,
                              "StatusType": 3000
                            },
                            {
                              "Count": 17,
                              "StatusType": 4000
                            },
                            {
                              "Count": 0,
                              "StatusType": 5000
                            }
                          ]
                        }
                      ],
                      "@odata.context": "$metadata#Collection(GroupService.GroupDevicesSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDevicesSummaryModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/SubGroups": {
      "get": {
        "description": "Returns the list of subgroups\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the list of subgroups",
        "operationId": "14_GroupService_7768",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllSubGroupsByGroupIdExample": {
                    "value": {
                      "@odata.count": 7,
                      "value": [
                        {
                          "UpdatedTime": "2020-08-27 09:20:00.344",
                          "GlobalStatus": 5000,
                          "CreationTime": "2020-08-25 19:51:26.437",
                          "MembershipTypeId": 24,
                          "DefinitionDescription": "Hypervisor-based systems",
                          "HasAttributes": false,
                          "GroupTags@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupTags",
                          "@odata.type": "#GroupService.Group",
                          "TypeId": 2000,
                          "Description": "Hypervisor-based systems",
                          "GroupHierarchy@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupHierarchy",
                          "IdOwner": 30,
                          "EventStatusSummary@odata.navigationLink": "/api/GroupService/Groups(1014)/EventStatusSummary",
                          "AllLeafDeviceSummaries@odata.navigationLink": "/api/GroupService/Groups(1014)/AllLeafDeviceSummaries",
                          "GroupQuery@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupQuery",
                          "AllLeafDevices@odata.navigationLink": "/api/GroupService/Groups(1014)/AllLeafDevices",
                          "Name": "Hypervisor Systems",
                          "@odata.id": "/api/GroupService/Groups(1014)",
                          "DefinitionId": 1000,
                          "SubGroups@odata.navigationLink": "/api/GroupService/Groups(1014)/SubGroups",
                          "ParentId": 500,
                          "DeviceStatusSummary@odata.navigationLink": "/api/GroupService/Groups(1014)/DeviceStatusSummary",
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupAttributes",
                          "GroupActions@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupActions",
                          "Visible": true,
                          "EventSeveritySummary@odata.navigationLink": "/api/GroupService/Groups(1014)/EventSeveritySummary",
                          "CreatedBy": "system",
                          "UpdatedBy": "",
                          "Id": 1014,
                          "Devices@odata.navigationLink": "/api/GroupService/Groups(1014)/Devices",
                          "GroupDevicesSummary@odata.navigationLink": "/api/GroupService/Groups(1014)/GroupDevicesSummary"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.Group)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/GroupHierarchy": {
      "get": {
        "description": "Returns the hierarchy of the subgroups\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the hierarchy of the subgroups",
        "operationId": "15_GroupService_4478",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupHierarchyExample": {
                    "value": {
                      "@odata.count": 7,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1000,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1006,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1009,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1012,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1014,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1017,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1020,
                          "ParentGroupId": 500
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupHierarchy)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupHierarchyModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/AllLeafDevices": {
      "get": {
        "description": "Returns the list of all leaf devices withing a group.\n\nNote: This is an outdates API being maintained for backward compatibility. Please use  GroupService/Groups(id)/AllLeafDeviceSummaries instead.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-DeviceIds,DeviceIps,DeviceManagement/NetworkAddress,DeviceHostnames,DeviceName,DeviceIdentifiers,Identifier,Type,SystemId,PowerState,ManagedState,ConnectionState,Status,DeviceCapabilities,DeviceModels,Model,OperationName,ConnectionStateReason",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Status",
                "Status desc",
                "Type",
                "Type desc",
                "DeviceName",
                "DeviceName desc",
                "PowerState",
                "PowerState desc",
                "Model",
                "Model desc",
                "Identifier",
                "Identifier desc",
                "ChassisServiceTag",
                "ChassisServiceTag desc",
                "AssetTag",
                "AssetTag desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the list of all leaf devices withing a group",
        "operationId": "17_GroupService_7255",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupLeafDevicesExample": {
                    "value": {
                      "@odata.count": 54,
                      "value": [
                        {
                          "SlotConfiguration": {
                            "ChassisName": null
                          },
                          "PowerState": 17,
                          "Temperature": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/Temperature"
                          },
                          "SystemId": 1893,
                          "SystemUpTime": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/SystemUpTime"
                          },
                          "Type": 1000,
                          "Baselines": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/Baselines"
                          },
                          "@odata.type": "#DeviceService.Device",
                          "DeviceName": "WIN-4A40NFFRDHE",
                          "BlinkStatus": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/BlinkStatus"
                          },
                          "Power": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/Power"
                          },
                          "DeviceSubscription": null,
                          "PowerUsageByDevice@odata.navigationLink": "/api/DeviceService/Devices(10073)/PowerUsageByDevice",
                          "DeviceManagement": [
                            {
                              "MacAddress": "18:66:da:a6:bc:b1",
                              "NetworkAddress": "10.35.0.61",
                              "InstrumentationName": "WIN-4A40NFFRDHE",
                              "ManagementType": 2,
                              "DnsName": "idrac-ptpf002.smd.devops.dell.com",
                              "ManagementProfile": [
                                {
                                  "Status": 1000,
                                  "StatusDateTime": "2020-08-27 09:15:18.668",
                                  "ManagementURL": "https://10.35.0.61:443",
                                  "HasCreds": 0,
                                  "ManagementProfileId": 5000,
                                  "Version": "3.22.22.22",
                                  "AgentName": "iDRAC",
                                  "ProfileId": "WSMAN_OOB",
                                  "ManagementId": 5000
                                }
                              ],
                              "ManagementId": 5000
                            }
                          ],
                          "ConnectionState": true,
                          "SensorHealth@odata.navigationLink": "/api/DeviceService/Devices(10073)/SensorHealth",
                          "Status": 1000,
                          "ManagedState": 3000,
                          "ChassisServiceTag": "MCMSRL3",
                          "AssetTag": null,
                          "InventoryDetails@odata.navigationLink": "/api/DeviceService/Devices(10073)/InventoryDetails",
                          "@odata.id": "/api/DeviceService/Devices(10073)",
                          "Settings@odata.navigationLink": "/api/DeviceService/Devices(10073)/Settings",
                          "SubSystemHealth@odata.navigationLink": "/api/DeviceService/Devices(10073)/SubSystemHealth",
                          "VirtualSession": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/VirtualSession"
                          },
                          "Model": "unknown",
                          "Identifier": "PTPF002",
                          "RecentActivity@odata.navigationLink": "/api/DeviceService/Devices(10073)/RecentActivity",
                          "LastStatusTime": null,
                          "InventoryTypes": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/InventoryTypes"
                          },
                          "DeployRequired": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/DeployRequired"
                          },
                          "LogSeverities": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/LogSeverities"
                          },
                          "GraphicInfo": {
                            "@odata.id": "/api/DeviceService/Devices(10073)/GraphicInfo"
                          },
                          "Actions": null,
                          "DeviceServiceTag": "PTPF002",
                          "DeviceBladeSlots@odata.navigationLink": "/api/DeviceService/Devices(10073)/DeviceBladeSlots",
                          "HardwareLogs@odata.navigationLink": "/api/DeviceService/Devices(10073)/HardwareLogs",
                          "LastInventoryTime": "2020-08-27 09:16:01.384",
                          "Id": 10073,
                          "DeviceCapabilities": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            41,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            1009,
                            17,
                            50,
                            18,
                            30,
                            31
                          ]
                        },
                        {
                          "SlotConfiguration": {
                            "ChassisName": null
                          },
                          "PowerState": 18,
                          "Temperature": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/Temperature"
                          },
                          "SystemId": 2327,
                          "SystemUpTime": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/SystemUpTime"
                          },
                          "Type": 1000,
                          "Baselines": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/Baselines"
                          },
                          "@odata.type": "#DeviceService.Device",
                          "DeviceName": "WIN-UOC8441GBD1",
                          "BlinkStatus": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/BlinkStatus"
                          },
                          "Power": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/Power"
                          },
                          "DeviceSubscription": null,
                          "PowerUsageByDevice@odata.navigationLink": "/api/DeviceService/Devices(10074)/PowerUsageByDevice",
                          "DeviceManagement": [
                            {
                              "MacAddress": "2c:ea:7f:dc:55:30",
                              "NetworkAddress": "10.35.0.69",
                              "InstrumentationName": "WIN-UOC8441GBD1",
                              "ManagementType": 2,
                              "DnsName": "idrac-svctag.smd.devops.dell.com.",
                              "ManagementProfile": [
                                {
                                  "Status": 1000,
                                  "StatusDateTime": "2020-08-27 09:15:25.905",
                                  "ManagementURL": "https://10.35.0.69:443",
                                  "HasCreds": 0,
                                  "ManagementProfileId": 5002,
                                  "Version": "4.30.30.30",
                                  "AgentName": "iDRAC",
                                  "ProfileId": "WSMAN_OOB",
                                  "ManagementId": 5002
                                }
                              ],
                              "ManagementId": 5002
                            }
                          ],
                          "ConnectionStateReason": 100,
                          "ConnectionState": true,
                          "SensorHealth@odata.navigationLink": "/api/DeviceService/Devices(10074)/SensorHealth",
                          "Status": 1000,
                          "ManagedState": 3000,
                          "ChassisServiceTag": "000L",
                          "AssetTag": "PASS:12345",
                          "InventoryDetails@odata.navigationLink": "/api/DeviceService/Devices(10074)/InventoryDetails",
                          "@odata.id": "/api/DeviceService/Devices(10074)",
                          "Settings@odata.navigationLink": "/api/DeviceService/Devices(10074)/Settings",
                          "SubSystemHealth@odata.navigationLink": "/api/DeviceService/Devices(10074)/SubSystemHealth",
                          "VirtualSession": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/VirtualSession"
                          },
                          "Model": "unknown",
                          "Identifier": null,
                          "RecentActivity@odata.navigationLink": "/api/DeviceService/Devices(10074)/RecentActivity",
                          "LastStatusTime": null,
                          "InventoryTypes": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/InventoryTypes"
                          },
                          "DeployRequired": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/DeployRequired"
                          },
                          "LogSeverities": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/LogSeverities"
                          },
                          "GraphicInfo": {
                            "@odata.id": "/api/DeviceService/Devices(10074)/GraphicInfo"
                          },
                          "Actions": null,
                          "DeviceServiceTag": null,
                          "DeviceBladeSlots@odata.navigationLink": "/api/DeviceService/Devices(10074)/DeviceBladeSlots",
                          "HardwareLogs@odata.navigationLink": "/api/DeviceService/Devices(10074)/HardwareLogs",
                          "LastInventoryTime": "2020-08-27 09:16:36.513",
                          "Id": 10074,
                          "DeviceCapabilities": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            41,
                            9,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            1009,
                            17,
                            50,
                            18,
                            30,
                            31
                          ]
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.Device)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InfrastructureDeviceReducedModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/AllLeafDeviceSummaries": {
      "get": {
        "description": "Returns the device data in the specified group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-ColumnSortIndex,IsAscending,DeviceName,Model,Identifier,Type,Status,PowerState,ConnectionState,ManagedState,DeviceCapabilities,DeviceManagement/NetworkAddress,ChassisName,SlotName,Enabled,ConnectionStateReason",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Id",
                "Id desc",
                "DeviceName",
                "DeviceName desc",
                "Model",
                "Model desc",
                "Identifier",
                "Identifier desc",
                "DeviceServiceTag",
                "DeviceServiceTag desc",
                "Type",
                "Type desc",
                "Status",
                "Status desc",
                "PowerState",
                "PowerState desc",
                "ConnectionState",
                "ConnectionState desc",
                "ManagedState",
                "ManagedState desc",
                "IpAddress",
                "IpAddress desc",
                "ChassisName",
                "ChassisName desc",
                "SlotName",
                "SlotName desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the device data in the specified group",
        "operationId": "18_GroupService_7859",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllLeafDeviceSummariesExample": {
                    "value": {
                      "@odata.count": 54,
                      "value": [
                        {
                          "@odata.type": "#DeviceService.DeviceMinModel",
                          "DeviceName": "WIN-4A40NFFRDHE",
                          "Status": 1000,
                          "PowerState": 17,
                          "SlotName": null,
                          "IpAddress": "10.35.0.61",
                          "DeviceManagement": [
                            {
                              "MacAddress": "18:66:da:a6:bc:b1",
                              "NetworkAddress": "10.35.0.61",
                              "InstrumentationName": "WIN-4A40NFFRDHE",
                              "DeviceId": 10073,
                              "ManagementProfile": [
                                {
                                  "ManagementProfileId": 5000,
                                  "ManagementURL": "https://10.35.0.61:443",
                                  "Version": "3.22.22.22",
                                  "ManagementId": 0,
                                  "AgentName": "iDRAC"
                                }
                              ],
                              "ManagementId": 5000
                            }
                          ],
                          "ManagedState": 3000,
                          "DeviceServiceTag": "PTPF002",
                          "ConnectionState": true,
                          "ChassisName": null,
                          "Model": "unknown",
                          "Identifier": "PTPF002",
                          "Type": 1000,
                          "Id": 10073,
                          "DeviceCapabilities": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            17,
                            18,
                            30,
                            31,
                            41,
                            50,
                            1009
                          ]
                        },
                        {
                          "@odata.type": "#DeviceService.DeviceMinModel",
                          "DeviceName": "WIN-UOC8441GBD1",
                          "Status": 1000,
                          "PowerState": 18,
                          "SlotName": null,
                          "IpAddress": "10.35.0.69",
                          "DeviceManagement": [
                            {
                              "MacAddress": "2c:ea:7f:dc:55:30",
                              "NetworkAddress": "10.35.0.69",
                              "InstrumentationName": "WIN-UOC8441GBD1",
                              "DeviceId": 10074,
                              "ManagementProfile": [
                                {
                                  "ManagementProfileId": 5002,
                                  "ManagementURL": "https://10.35.0.69:443",
                                  "Version": "4.30.30.30",
                                  "ManagementId": 0,
                                  "AgentName": "iDRAC"
                                }
                              ],
                              "ManagementId": 5002
                            }
                          ],
                          "ManagedState": 3000,
                          "DeviceServiceTag": null,
                          "ConnectionState": true,
                          "ChassisName": null,
                          "Model": "unknown",
                          "Identifier": null,
                          "Type": 1000,
                          "Id": 10074,
                          "DeviceCapabilities": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            6,
                            7,
                            8,
                            9,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            17,
                            18,
                            30,
                            31,
                            41,
                            50,
                            1009
                          ]
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DeviceService.DeviceMinModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DevicesMinResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/AllGroupsHierarchy": {
      "get": {
        "description": "Returns the hierarchy of all the groups and subgroups\n\nPrivilege: VIEW",
        "summary": "Returns the hierarchy of all the groups and subgroups",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupsHierarchyExample": {
                    "value": {
                      "@odata.count": 36,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 500,
                          "ParentGroupId": 0
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 501,
                          "ParentGroupId": 0
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1021,
                          "ParentGroupId": 0
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1022,
                          "ParentGroupId": 0
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1028,
                          "ParentGroupId": 0
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1000,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1009,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1020,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1006,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1017,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1012,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1014,
                          "ParentGroupId": 500
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1005,
                          "ParentGroupId": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1001,
                          "ParentGroupId": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1002,
                          "ParentGroupId": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1003,
                          "ParentGroupId": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1004,
                          "ParentGroupId": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1010,
                          "ParentGroupId": 1009
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1011,
                          "ParentGroupId": 1009
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1023,
                          "ParentGroupId": 1009
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1024,
                          "ParentGroupId": 1009
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1025,
                          "ParentGroupId": 1009
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 10072,
                          "ParentGroupId": 1020
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1007,
                          "ParentGroupId": 1006
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1008,
                          "ParentGroupId": 1006
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1018,
                          "ParentGroupId": 1017
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1019,
                          "ParentGroupId": 1017
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1013,
                          "ParentGroupId": 1012
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1026,
                          "ParentGroupId": 1012
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1027,
                          "ParentGroupId": 1012
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1015,
                          "ParentGroupId": 1014
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1016,
                          "ParentGroupId": 1014
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1100,
                          "ParentGroupId": 1028
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1029,
                          "ParentGroupId": 1028
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1101,
                          "ParentGroupId": 1100
                        },
                        {
                          "@odata.type": "#GroupService.GroupHierarchy",
                          "ChildGroupId": 1102,
                          "ParentGroupId": 1100
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupHierarchy)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupHierarchyModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "19_GroupService_2041"
      }
    },
    "/GroupService/GroupTypes": {
      "get": {
        "description": "Returns all the group types\n\nPrivilege: VIEW",
        "summary": "Returns all the group types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupsTypesExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupType",
                          "Description": "Internal group. This type is associated with a task operation.",
                          "Name": "Internal Group",
                          "@odata.id": "/api/GroupService/GroupTypes(1000)",
                          "Id": 1000
                        },
                        {
                          "@odata.type": "#GroupService.GroupType",
                          "Description": "Pre-existing group.",
                          "Name": "Pre-Defined Group",
                          "@odata.id": "/api/GroupService/GroupTypes(2000)",
                          "Id": 2000
                        },
                        {
                          "@odata.type": "#GroupService.GroupType",
                          "Description": "Information for this group comes from user input.",
                          "Name": "User Defined",
                          "@odata.id": "/api/GroupService/GroupTypes(3000)",
                          "Id": 3000
                        },
                        {
                          "@odata.type": "#GroupService.GroupType",
                          "Description": "Information for this group comes from an automatic operation.",
                          "Name": "Discovery Defined",
                          "@odata.id": "/api/GroupService/GroupTypes(4000)",
                          "Id": 4000
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupType)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InfrastructureGroupTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "20_GroupService_4786"
      }
    },
    "/GroupService/GroupTypes({typeId})": {
      "get": {
        "description": "Returns the details of a specific group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:typeId",
            "required": true,
            "name": "typeId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a specific group",
        "operationId": "21_GroupService_6783",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupsTypeByGroupTypeIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.GroupType",
                        "Description": "Internal group. This type is associated with a task operation.",
                        "@odata.id": "/api/GroupService/GroupTypes(1000)",
                        "@odata.context": "/api/$metadata#GroupService.GroupType",
                        "Id": 1000,
                        "Name": "Internal Group"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InfrastructureGroupTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/ChassisDiscoveryGroup({deviceId})": {
      "get": {
        "description": "Returns the details chassis discovery group for a given chassis\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a specific group",
        "operationId": "22_GroupService_5007",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getChassisDiscoveryGroupRequestExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.ChassisDiscoveryGroupModel",
                        "Description": "Group associated to specific chassis device.",
                        "@odata.id": "/api/GroupService/ChassisDiscoveryGroup(10094)",
                        "@odata.context": "/api/$metadata#GroupService.ChassisDiscoveryGroupModel",
                        "Id": 10144,
                        "Name": "cmc-servicetag"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ChassisDiscoveryGroupModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/MembershipTypes": {
      "get": {
        "description": "This method returns all the membership types\n\nPrivilege: VIEW",
        "summary": "This method returns all the membership types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupsMembershipTypesExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "@odata.type": "#GroupService.MembershipType",
                          "Description": "Static type",
                          "Name": "Static",
                          "@odata.id": "/api/GroupService/MembershipTypes(12)",
                          "Id": 12
                        },
                        {
                          "@odata.type": "#GroupService.MembershipType",
                          "Description": "Dynamic type",
                          "Name": "Dynamic",
                          "@odata.id": "/api/GroupService/MembershipTypes(24)",
                          "Id": 24
                        },
                        {
                          "@odata.type": "#GroupService.MembershipType",
                          "Description": "Virtual Static Type for VMs",
                          "Name": "Virtual Static",
                          "@odata.id": "/api/GroupService/MembershipTypes(36)",
                          "Id": 36
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.MembershipType)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MembershipTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "GroupService"
        ],
        "operationId": "23_GroupService_6489"
      }
    },
    "/GroupService/MembershipTypes({membershipTypeId})": {
      "get": {
        "description": "Returns the details of a specific membership type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:membershipTypeId",
            "required": true,
            "name": "membershipTypeId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a specific membership type",
        "operationId": "24_GroupService_5635",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getMembershipTypeByMembershipTypeIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.MembershipType",
                        "Description": "Static type",
                        "@odata.id": "/api/GroupService/MembershipTypes(12)",
                        "@odata.context": "/api/$metadata#GroupService.MembershipType",
                        "Id": 12,
                        "Name": "Static"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MembershipTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/SubGroups({subGroupId})": {
      "delete": {
        "description": "Deletes a subgroup\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:subGroupId",
            "required": true,
            "name": "subGroupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Deletes a subgroup",
        "operationId": "26_GroupService_6904",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/GroupService/Actions/GroupService.GroupsPrivilegesAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionGroupsPrivilegesPayload"
              }
            }
          },
          "required": true,
          "description": "update ActionGroupsPrivilegesPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the group privileges for the user. To view the privileges of multiple groups, provide the group IDs\n\nPrivilege: VIEW",
        "tags": [
          "GroupService"
        ],
        "operationId": "27_GroupService_6029",
        "summary": "Returns the group privileges for the user. To view the privileges of multiple groups, provide the group IDs"
      }
    },
    "/GroupService/Actions/GroupService.GroupsByPrivilegesAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionGroupsByPrivilegesPayload"
              }
            }
          },
          "required": true,
          "description": "update ActionGroupsByPrivilegesPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the groups and devices on which the user has the specified privilege. To view the groups and devices for multiple privileges, provide the privilege names separately by a comma\n\nPrivilege: VIEW",
        "tags": [
          "GroupService"
        ],
        "operationId": "28_GroupService_2623",
        "summary": "Returns the groups and devices on which the user has the specified privilege. To view the groups and devices for multiple privileges, provide the privilege names separately by a comma"
      }
    },
    "/GroupService/Actions/GroupService.CreateGroup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureGroupModelExtension"
              }
            }
          },
          "required": true,
          "description": "update InfrastructureGroupModelExtension object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a group\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "29_GroupService_1193",
        "summary": "Creates a group"
      }
    },
    "/GroupService/Actions/GroupService.UpdateGroup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfrastructureGroupModelExtension"
              }
            }
          },
          "required": true,
          "description": "update InfrastructureGroupModelExtension object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates a group\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "30_GroupService_5037",
        "summary": "Updates a group"
      }
    },
    "/GroupService/Actions/GroupService.Clone": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupModel"
              }
            }
          },
          "required": true,
          "description": "update GroupModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Clones a group\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "31_GroupService_8701",
        "summary": "Clones a group"
      }
    },
    "/GroupService/Actions/GroupService.DeleteGroup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupIdsList"
              }
            }
          },
          "required": true,
          "description": "update GroupIdsList object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Removes a group\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "32_GroupService_7499",
        "summary": "Removes a group"
      }
    },
    "/GroupService/Groups({groupId})/GroupQuery": {
      "get": {
        "description": "Returns the group query of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group query of a group",
        "operationId": "33_GroupService_9281",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupQueryExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#GroupService.QueryCondition",
                          "LogicalOperatorId": 1,
                          "OperatorId": 1,
                          "LeftParen": false,
                          "Value": "2000",
                          "RightParen": false,
                          "FieldId": 56
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.QueryCondition)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/QueryCondition"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/DeviceStatusSummary": {
      "get": {
        "description": "Returns the group device summary of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group device summary of a group",
        "operationId": "34_GroupService_9285",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceStatusSummaryExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 26,
                          "StatusType": 4000
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 3,
                          "StatusType": 3000
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 3,
                          "StatusType": 2000
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 23,
                          "StatusType": 1000
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.StatusSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StatusSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/EventStatusSummary": {
      "get": {
        "description": "Returns the group event status summary of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group event status summary of a group",
        "operationId": "35_GroupService_9139",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventStatusSummaryExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 287,
                          "StatusType": 16
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 1,
                          "StatusType": 8
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 19,
                          "StatusType": 4
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 24,
                          "StatusType": 2
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.StatusSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StatusSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Groups({groupId})/EventSeveritySummary": {
      "get": {
        "description": "Returns the group event severity summary of a group\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-StatusType",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group event severity summary of a group",
        "operationId": "36_GroupService_4330",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getEventSeveritySummaryExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 287,
                          "StatusType": 16
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 1,
                          "StatusType": 8
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 19,
                          "StatusType": 4
                        },
                        {
                          "@odata.type": "#GroupService.StatusSummary",
                          "Count": 24,
                          "StatusType": 2
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.StatusSummary)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/StatusSummary"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Actions/GroupService.AddUserToGroups": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupsModel"
              }
            }
          },
          "required": true,
          "description": "update UserGroupsModel object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Add user(s) to group(s)\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "37_GroupService_5374",
        "summary": "Add user(s) to group(s)"
      }
    },
    "/GroupService/Actions/GroupService.DeleteUserToGroups": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupsModel"
              }
            }
          },
          "required": true,
          "description": "update UserGroupsModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserGroupsModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Delete user(s) to group(s)\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "38_GroupService_7317",
        "summary": "Delete user(s) to group(s)"
      }
    },
    "/GroupService/GroupAudits": {
      "get": {
        "description": "Returns the group audits\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-AuditDateTime",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupTags",
                "GroupAttributes",
                "GroupActions"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group audits",
        "operationId": "39_GroupService_4775",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllGroupAuditExample": {
                    "value": {
                      "@odata.count": 3,
                      "value": [
                        {
                          "UpdatedTime": "2020-09-08 16:45:00.376",
                          "GlobalStatus": 5000,
                          "LastQueryTime": "2020-09-08 16:47:35.754",
                          "CreationTime": "2020-09-08 09:48:32.028",
                          "MembershipTypeId": 12,
                          "DefinitionDescription": "UserDefined",
                          "AuditDateTime": "2020-09-08 09:48:32.56686",
                          "GroupTags@odata.navigationLink": "/api/GroupService/GroupAudits(2)/GroupTags",
                          "@odata.type": "#GroupService.GroupAudit",
                          "TypeId": 3000,
                          "Description": "d1",
                          "AuditId": 2,
                          "IdOwner": 30,
                          "Name": "d2",
                          "@odata.id": "/api/GroupService/GroupAudits(2)",
                          "GroupHierarchyOperation": 1,
                          "DefinitionId": 400,
                          "ParentId": 1020,
                          "GroupOperation": 1,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupAudits(2)/GroupAttributes",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupAudits(2)/GroupActions",
                          "IsAccessAllowed": true,
                          "Visible": true,
                          "CreatedBy": "admin",
                          "UpdatedBy": "",
                          "Id": 10158
                        },
                        {
                          "UpdatedTime": "2020-09-08 16:45:00.376",
                          "GlobalStatus": 5000,
                          "LastQueryTime": "2020-09-08 16:47:35.754",
                          "CreationTime": "2020-09-08 09:48:32.028",
                          "MembershipTypeId": 12,
                          "DefinitionDescription": "UserDefined",
                          "AuditDateTime": "2020-09-08 09:59:44.359373",
                          "GroupTags@odata.navigationLink": "/api/GroupService/GroupAudits(3)/GroupTags",
                          "@odata.type": "#GroupService.GroupAudit",
                          "TypeId": 3000,
                          "Description": "d1",
                          "AuditId": 3,
                          "IdOwner": 30,
                          "Name": "d2",
                          "@odata.id": "/api/GroupService/GroupAudits(3)",
                          "GroupHierarchyOperation": 4,
                          "DefinitionId": 400,
                          "ParentId": 1020,
                          "GroupOperation": 2,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupAudits(3)/GroupAttributes",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupAudits(3)/GroupActions",
                          "IsAccessAllowed": true,
                          "Visible": true,
                          "CreatedBy": "admin",
                          "UpdatedBy": "",
                          "Id": 10158
                        },
                        {
                          "UpdatedTime": "2020-09-08 16:45:00.382",
                          "GlobalStatus": 5000,
                          "LastQueryTime": "2020-09-08 16:47:35.754",
                          "CreationTime": "2020-09-08 10:00:36.873",
                          "MembershipTypeId": 12,
                          "DefinitionDescription": "UserDefined",
                          "AuditDateTime": "2020-09-08 10:00:37.164461",
                          "GroupTags@odata.navigationLink": "/api/GroupService/GroupAudits(4)/GroupTags",
                          "@odata.type": "#GroupService.GroupAudit",
                          "TypeId": 3000,
                          "Description": "d1",
                          "AuditId": 4,
                          "IdOwner": 30,
                          "Name": "d22",
                          "@odata.id": "/api/GroupService/GroupAudits(4)",
                          "GroupHierarchyOperation": 1,
                          "DefinitionId": 400,
                          "ParentId": 1020,
                          "GroupOperation": 1,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupAudits(4)/GroupAttributes",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupAudits(4)/GroupActions",
                          "IsAccessAllowed": true,
                          "Visible": true,
                          "CreatedBy": "admin",
                          "UpdatedBy": "",
                          "Id": 10159
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAudit)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupAuditModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Actions/GroupService.RemoveMemberDevices": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemDevicesActionReqPayload"
              }
            }
          },
          "required": true,
          "description": "update MemDevicesActionReqPayload object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Removes group member devices\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "40_GroupService_9579",
        "summary": "Removes  group member devices"
      }
    },
    "/GroupService/Actions/GroupService.AddMemberDevices": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemDevicesActionReqPayload"
              }
            }
          },
          "required": true,
          "description": "update MemDevicesActionReqPayload object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Add member devices to a group\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "41_GroupService_1073",
        "summary": "Add member devices to a group"
      }
    },
    "/GroupService/GroupTags": {
      "get": {
        "description": "Returns a list of group tags\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupActions",
                "GroupAttributes",
                "GroupAttributeTypes"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns a list of group tags",
        "operationId": "42_GroupService_9882",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupTagsExample": {
                    "value": {
                      "@odata.count": 8,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "DATA_CENTER",
                          "@odata.id": "/api/GroupService/GroupTags(1)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(1)/Groups",
                          "IdOwner": 40,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupAttributes",
                          "Id": 1,
                          "Description": "Data Center"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(2)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(2)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "ROOM",
                          "@odata.id": "/api/GroupService/GroupTags(2)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(2)/Groups",
                          "IdOwner": 40,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(2)/GroupAttributes",
                          "Id": 2,
                          "Description": "Room"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(3)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(3)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "AISLE",
                          "@odata.id": "/api/GroupService/GroupTags(3)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(3)/Groups",
                          "IdOwner": 40,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(3)/GroupAttributes",
                          "Id": 3,
                          "Description": "Aisle"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(4)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(4)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "RACK",
                          "@odata.id": "/api/GroupService/GroupTags(4)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(4)/Groups",
                          "IdOwner": 40,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(4)/GroupAttributes",
                          "Id": 4,
                          "Description": "Rack"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(5)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(5)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "PHYSICAL_HIERARCHY_ROOT",
                          "@odata.id": "/api/GroupService/GroupTags(5)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(5)/Groups",
                          "IdOwner": 40,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(5)/GroupAttributes",
                          "Id": 5,
                          "Description": "Physical hierarchy root"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(100)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(100)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "SUPPORTASSIST_ROOT",
                          "@odata.id": "/api/GroupService/GroupTags(100)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups",
                          "IdOwner": 50,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(100)/GroupAttributes",
                          "Id": 100,
                          "Description": "SupportAssist Extension Group tag"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(101)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(101)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "SUPPORTASSIST_FIXED_GROUP",
                          "@odata.id": "/api/GroupService/GroupTags(101)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(101)/Groups",
                          "IdOwner": 50,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(101)/GroupAttributes",
                          "Id": 101,
                          "Description": "SupportAssist Fixed Group Tag"
                        },
                        {
                          "@odata.type": "#GroupService.GroupTag",
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(102)/GroupActions",
                          "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(102)/GroupAttributeTypes",
                          "ParentTagId": 0,
                          "Name": "SUPPORTASSIST_USER_GROUP",
                          "@odata.id": "/api/GroupService/GroupTags(102)",
                          "Groups@odata.navigationLink": "/api/GroupService/GroupTags(102)/Groups",
                          "IdOwner": 50,
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(102)/GroupAttributes",
                          "Id": 102,
                          "Description": "SupportAssist User Group Tag"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupTag)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOTags"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupTags({id})": {
      "get": {
        "description": "Returns the details of a group tag\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupActions",
                "GroupAttributes",
                "GroupAttributeTypes"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the details of a group tag",
        "operationId": "43_GroupService_8749",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupTagByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#GroupService.GroupTag",
                        "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupActions",
                        "GroupAttributeTypes@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupAttributeTypes",
                        "ParentTagId": 0,
                        "Name": "DATA_CENTER",
                        "@odata.id": "/api/GroupService/GroupTags(1)",
                        "@odata.context": "/api/$metadata#GroupService.GroupTag",
                        "Groups@odata.navigationLink": "/api/GroupService/GroupTags(1)/Groups",
                        "IdOwner": 40,
                        "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(1)/GroupAttributes",
                        "Id": 1,
                        "Description": "Data Center"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOTag"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupTags({id})/Groups": {
      "get": {
        "description": "Returns the groups of a group tag\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the groups of a group tag",
        "operationId": "44_GroupService_3069",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupsByGroupTagIdExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "UpdatedTime": "2020-08-28 13:55:00.145",
                          "GlobalStatus": 5000,
                          "CreationTime": "2020-06-17 12:55:51.456",
                          "MembershipTypeId": 24,
                          "GroupActions@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupActions",
                          "HasAttributes": true,
                          "GroupTags@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupTags",
                          "@odata.type": "#GroupService.Group",
                          "TypeId": 2000,
                          "Description": "Dell network switches",
                          "GroupHierarchy@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupHierarchy",
                          "IdOwner": 30,
                          "EventStatusSummary@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/EventStatusSummary",
                          "AllLeafDeviceSummaries@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/AllLeafDeviceSummaries",
                          "GroupQuery@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupQuery",
                          "AllLeafDevices@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/AllLeafDevices",
                          "Name": "Dell Networking Switches",
                          "@odata.id": "/api/GroupService/GroupTags(100)/Groups(1007)",
                          "DefinitionId": 7000,
                          "SubGroups@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/SubGroups",
                          "ParentId": 1006,
                          "DeviceStatusSummary@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/DeviceStatusSummary",
                          "GroupAttributes@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupAttributes",
                          "DefinitionDescription": "Dell network switches",
                          "Visible": true,
                          "EventSeveritySummary@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/EventSeveritySummary",
                          "CreatedBy": "system",
                          "UpdatedBy": "",
                          "Id": 1007,
                          "Devices@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/Devices",
                          "GroupDevicesSummary@odata.navigationLink": "/api/GroupService/GroupTags(100)/Groups(1007)/GroupDevicesSummary"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.Group)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupsResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupTags({id})/GroupActions": {
      "get": {
        "description": "Returns the group actions of a group tag\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group actions of a group tag",
        "operationId": "45_GroupService_3910",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupsActionsByGroupTagIdExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAction",
                          "Description": "Safe Reboot",
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupActions(102)",
                          "IdOwner": 101,
                          "GroupIds": [
                            1007
                          ],
                          "TagIds": [
                            100
                          ],
                          "Id": 102,
                          "Name": "SAFE_REBOOT"
                        },
                        {
                          "@odata.type": "#GroupService.GroupAction",
                          "Description": "Expunge",
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupActions(103)",
                          "IdOwner": 101,
                          "GroupIds": [
                            1007
                          ],
                          "TagIds": [
                            100
                          ],
                          "Id": 103,
                          "Name": "EXPUNGE"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAction)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOActions"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupTags({id})/GroupAttributes": {
      "get": {
        "description": "Returns the group attributes of a group tag\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "GroupAttributeValidation"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group attributes of a group tag",
        "operationId": "46_GroupService_6017",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupsAttributesByGroupTagIdExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAttribute",
                          "Name": "ACTUAL_POWER",
                          "IsEditable": false,
                          "TypeName": "ACTUAL_POWER",
                          "IdCategory": 10,
                          "IdAttributeType": 100,
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupAttributes(1)",
                          "Value": "500",
                          "DataTypeName": "integer",
                          "IsRequired": true,
                          "GroupAttributeValidation": {
                            "@odata.id": "/api/GroupService/GroupTags(100)/GroupAttributes(1)/GroupAttributeValidation"
                          },
                          "IdOwner": 101,
                          "IsVisible": true,
                          "Units": "WATTS",
                          "TagIds": [
                            100
                          ],
                          "Id": 1,
                          "IdAttributeDataType": 2,
                          "CategoryName": "Power"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAttribute)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupDAOActions"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/GroupTags({id})/GroupAttributeTypes": {
      "get": {
        "description": "Returns the group attribute types of a group tag\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "GroupService"
        ],
        "summary": "Returns the group attribute types of a group tag",
        "operationId": "47_GroupService_4274",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getGroupsAttributeTypesByGroupTagIdExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#GroupService.GroupAttributeType",
                          "Name": "ACTUAL_POWER",
                          "IsEditable": false,
                          "IdAttributeCategory": 10,
                          "@odata.id": "/api/GroupService/GroupTags(100)/GroupAttributeTypes(100)",
                          "IsRequired": true,
                          "IdOwner": 101,
                          "IdAttributeUnits": 100,
                          "IsVisible": true,
                          "TagIds": [
                            100
                          ],
                          "AttributeValidationIds": [
                            20
                          ],
                          "Id": 100,
                          "Description": "Actual Power Capacity"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(GroupService.GroupAttributeType)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GroupAttributeTypes"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/GroupService/Actions/GroupService.UpdateGroupAttributes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAttributeTypeValues"
              }
            }
          },
          "required": true,
          "description": "update GroupAttributeTypeValues object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Update the group attributes\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "52_GroupService_3441",
        "summary": "Update the group attributes"
      }
    },
    "/GroupService/Actions/GroupService.DeleteGroupAttributes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupAttributeTypeValues"
              }
            }
          },
          "required": true,
          "description": "update GroupAttributeTypeValues object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Delete the group attributes\n\nPrivilege: GROUP_MANAGEMENT",
        "tags": [
          "GroupService"
        ],
        "operationId": "53_GroupService_8699",
        "summary": "Delete the group attributes"
      }
    },
    "/GroupService/Actions/GroupService.ResetTagCache": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupTagServiceAction"
              }
            }
          },
          "required": true,
          "description": "update GroupTagServiceAction object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Performs the reset of tag cache\n\nPrivilege: VIEW",
        "tags": [
          "GroupService"
        ],
        "operationId": "54_GroupService_9307",
        "summary": "Performs the reset of tag cache"
      }
    },
    "/GroupService/Actions/GroupService.LoadValidationContext": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupTagServiceAction"
              }
            }
          },
          "required": true,
          "description": "update GroupTagServiceAction object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ValidationActionMetadataCollection"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Loads the validations context\n\nPrivilege: VIEW",
        "tags": [
          "GroupService"
        ],
        "operationId": "55_GroupService_6890",
        "summary": "Loads the validations context"
      }
    },
    "/ConsoleUpdateService": {
      "get": {
        "description": "Returns the URI for various APIs present under Console Update Service.\n\nPrivilege: VIEW",
        "summary": "Returns the URI for various APIs present under Console Update Service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "1_ConsoleUpdateService_1015"
      }
    },
    "/ConsoleUpdateService/Updates": {
      "get": {
        "description": "Returns the update job status of OpenManage Enterprise.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Auto",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "ConsoleUpdateService"
        ],
        "summary": "Returns the update job status of OpenManage Enterprise.",
        "operationId": "2_ConsoleUpdateService_2598",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getUpdatesExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "Description": "New features include MX7000 support, Virtual identity management and migration, OMM integration, Alert policy  actions for foreign devices, Guided server templates",
                          "LastUpdateDateTime": "Fri Sep 14 17:08:06 UTC 2018",
                          "Auto": false,
                          "Version": "3.0.0.1008",
                          "ComponentName": "OME",
                          "Size": "921.68MB"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(ConsoleUpdateService.Update)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsoleUpdate"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ConsoleUpdateService/UpdateBundleInfo": {
      "get": {
        "description": "Returns the update job status of the downloaded console update bundle of the OpenManage Enterprise appliance.\n\nPrivilege: VIEW",
        "summary": "Returns the update job status of the downloaded console update bundle of the OpenManage Enterprise appliance.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getBundleInfoExample": {
                    "value": {
                      "@odata.type": "#ConsoleUpdateService.UpdateBundleInfo",
                      "DownloadDate": null,
                      "IsRemoteAndLocalFileSame": false,
                      "BundleName": null,
                      "DownloadSize": null,
                      "@odata.id": "/api/ConsoleUpdateService/UpdateBundleInfo",
                      "@odata.context": "/api/$metadata#ConsoleUpdateService.UpdateBundleInfo",
                      "TaskStatus": 0,
                      "Note": null,
                      "TaskId": 0,
                      "Folder": null
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/UpdateBundleInfo"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "3_ConsoleUpdateService_2631"
      }
    },
    "/ConsoleUpdateService/Actions/ConsoleUpdateService.DownloadBundle": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DownloadBundleRequest"
              }
            }
          },
          "required": true,
          "description": "update DownloadBundleRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "downloadBundleExample": {
                    "value": {
                      "Status": true,
                      "TaskId": 10042
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DownloadBundleResponse"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Downloads the console update bundle.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "4_ConsoleUpdateService_1473",
        "summary": "Downloads the console update bundle."
      }
    },
    "/ConsoleUpdateService/Actions/ConsoleUpdateService.DeleteUpgradeBundles": {
      "post": {
        "description": "Deletes the downloaded console update bundle.\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "Deletes the downloaded console update bundle.",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "5_ConsoleUpdateService_3198"
      }
    },
    "/ConsoleUpdateService/Actions/ConsoleUpdateService.UploadFileStream": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "File uploaded sucessfully"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Uploads Console update dup from a file.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "6_ConsoleUpdateService_7768",
        "summary": "Uploads Console update dup from a file."
      }
    },
    "/ConsoleUpdateService/LastUpdateResult": {
      "get": {
        "description": "Returns the information about the last attempted console upgrade.\n\nPrivilege: VIEW",
        "summary": "Returns the information about the last attempted console upgrade.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getLastUpdateResultExample": {
                    "value": {
                      "@odata.type": "#ConsoleUpdateService.LastUpdateResult",
                      "Status": true,
                      "Component": "OME",
                      "@odata.id": "/api/ConsoleUpdateService/LastUpdateResult",
                      "@odata.context": "/api/$metadata#ConsoleUpdateService.LastUpdateResult",
                      "UpdateSuccessful": true,
                      "TaskId": 10026,
                      "Message": "OpenManage Enterprise Console has been upgraded successfully to version: 3.6.0.3813",
                      "UpdateDateTime": "2021-01-19T13:40:23.369Z"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/LastUpdateResult"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "7_ConsoleUpdateService_8276"
      }
    },
    "/ConsoleUpdateService/Actions/ConsoleUpdateService.DeleteLastUpdateResult": {
      "post": {
        "description": "Deletes last console upgrade result.\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "Deletes last console upgrade result.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ConsoleUpdateService"
        ],
        "operationId": "8_ConsoleUpdateService_9611"
      }
    },
    "/SessionService": {
      "get": {
        "description": "Returns the session service information of the appliance.\n\nPrivilege: VIEW",
        "summary": "Returns the session service information of the appliance.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionServiceModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "SessionService"
        ],
        "operationId": "1_SessionService_9827"
      }
    },
    "/SessionService/Sessions": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionCredentialModel"
              }
            }
          },
          "required": true,
          "description": "update SessionCredentialModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Authenticates the user and establishes a session.\n\nPrivilege: ['SECURITY_SETUP', 'VIEW']",
        "tags": [
          "SessionService"
        ],
        "operationId": "5_SessionService_2860",
        "summary": "Authenticates the user and establishes a session."
      },
      "get": {
        "description": "Returns the session service information of the appliance.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "parameters": [
          {
            "schema": {
              "enum": [
                "UserName",
                "UserName desc",
                "IpAddress",
                "IpAddress desc",
                "StartTimeStamp",
                "StartTimeStamp desc",
                "Name",
                "Name desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "SessionService"
        ],
        "summary": "Returns the session service information of the appliance.",
        "operationId": "2_SessionService_1170",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllSessionsExample": {
                    "value": [
                      {
                        "@odata.type": "#SessionService.Session",
                        "UserName": "admin",
                        "Description": "admin",
                        "Roles": [
                          "ADMINISTRATOR"
                        ],
                        "StartTimeStamp": "2020-09-02 03:33:39.170",
                        "@odata.id": "/api/SessionService/Sessions('81167af8-61de-4ce8-b368-acb02e14078b')",
                        "LastAccessedTimeStamp": "2020-09-02 03:33:57.441",
                        "DirectoryGroup": [],
                        "Password": null,
                        "IpAddress": "10.135.68.109",
                        "Id": "81167af8-61de-4ce8-b368-acb02e14078b",
                        "Name": "GUI"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/SessionService/Sessions({indexId})": {
      "delete": {
        "description": "Deletes a specific session.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:indexId",
            "required": true,
            "name": "indexId",
            "in": "path"
          }
        ],
        "tags": [
          "SessionService"
        ],
        "summary": "Deletes a specific session.",
        "operationId": "6_SessionService_4579",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "description": "Returns the session details of a specific session id.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:indexId",
            "required": true,
            "name": "indexId",
            "in": "path"
          }
        ],
        "tags": [
          "SessionService"
        ],
        "summary": "Returns the session details of a specific session id.",
        "operationId": "3_SessionService_8757",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/SessionService/Sessions(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionContextModel"
              }
            }
          },
          "required": true,
          "description": "update SessionContextModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates details of a specific session.\n\nPrivilege: VIEW",
        "tags": [
          "SessionService"
        ],
        "operationId": "4_SessionService_360",
        "summary": "Updates details of a specific session."
      }
    },
    "/RedfishSessionService/Sessions/Members({indexId})": {
      "delete": {
        "description": "Deletes a specific redfish session.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "format": "String"
            },
            "description": "key:indexId",
            "required": true,
            "name": "indexId",
            "in": "path"
          }
        ],
        "tags": [
          "SessionService"
        ],
        "summary": "Deletes a specific redfish session.",
        "operationId": "7_SessionService_1373",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/SessionService/Actions/SessionService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionIdListModel"
              }
            }
          },
          "required": true,
          "description": "update SessionIdListModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes a specific redfish session.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "tags": [
          "SessionService"
        ],
        "operationId": "8_SessionService_2575",
        "summary": "Deletes a specific redfish session."
      }
    },
    "/SessionService/CurrentUser": {
      "get": {
        "description": "Returns the current user information like roles and privileges.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "summary": "Returns the current user information like roles and privileges.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionUserModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "SessionService"
        ],
        "operationId": "9_SessionService_1505"
      }
    },
    "/SessionService/SessionConfiguration": {
      "get": {
        "description": "Gets the session properties like the inactivity (not active sessions) timeout interval and the maximum         number of sessions that are enabled per session type. When these properties are changed, the properties of the         current active sessions are not terminated or modified.\n\nPrivilege: ['VIEW', 'SECURITY_SETUP']",
        "summary": "Gets the configured session properties.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllSessionAttributesExample": {
                    "value": [
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": 60000,
                        "MaxSessionsConfigurable": true,
                        "MinSessionsAllowed": 1,
                        "SessionTimeout": 1800000,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 100,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "GUI",
                        "MaxSessions": 6
                      },
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": 60000,
                        "MaxSessionsConfigurable": true,
                        "MinSessionsAllowed": 1,
                        "SessionTimeout": 1800000,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 100,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "API",
                        "MaxSessions": 100
                      },
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": -1,
                        "MaxSessionsConfigurable": false,
                        "MinSessionsAllowed": 0,
                        "SessionTimeout": -1,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 0,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "UniversalTimeout",
                        "MaxSessions": 0
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionConfigurationResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          }
        },
        "tags": [
          "SessionService"
        ],
        "operationId": "10_SessionService_9218"
      }
    },
    "/SessionService/Actions/SessionService.SessionConfigurationUpdate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "listModels": {
                    "items": {
                      "$ref": "#/components/schemas/SessionConfigurationModel"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "update SessionConfigurationModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllSessionAttributesExample": {
                    "value": [
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": 60000,
                        "MaxSessionsConfigurable": true,
                        "MinSessionsAllowed": 1,
                        "SessionTimeout": 1800000,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 100,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "GUI",
                        "MaxSessions": 6
                      },
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": 60000,
                        "MaxSessionsConfigurable": true,
                        "MinSessionsAllowed": 1,
                        "SessionTimeout": 1800000,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 100,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "API",
                        "MaxSessions": 100
                      },
                      {
                        "@odata.type": "#SessionService.SessionConfiguration",
                        "MinSessionTimeout": -1,
                        "MaxSessionsConfigurable": false,
                        "MinSessionsAllowed": 0,
                        "SessionTimeout": -1,
                        "SessionTimeoutConfigurable": true,
                        "MaxSessionsAllowed": 0,
                        "MaxSessionTimeout": 86400000,
                        "SessionType": "UniversalTimeout",
                        "MaxSessions": 0
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SessionConfigurationResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Update Session configuration values.\n\nPrivilege: SECURITY_SETUP",
        "tags": [
          "SessionService"
        ],
        "operationId": "11_SessionService_1197",
        "summary": "Update Session configuration values."
      }
    },
    "/SessionService/Actions/SessionService.Logoff": {
      "post": {
        "description": "Log out the current session.\n\nPrivilege: VIEW",
        "summary": "Log out the current session.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "tags": [
          "SessionService"
        ],
        "operationId": "12_SessionService_3065"
      }
    },
    "/JobService": {
      "get": {
        "description": "Get all the endpoints for Job Service\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "Jobs"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Get all the encpoints for Job Service",
        "operationId": "1_JobService_3729",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/Jobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobModel"
              }
            }
          },
          "required": true,
          "description": "update JobModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a job.\n\nPrivilege: JOB_MANAGEMENT",
        "tags": [
          "JobService"
        ],
        "operationId": "3_JobService_9645",
        "summary": "Creates a job."
      },
      "get": {
        "description": "Returns details of all the jobs.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,Targets/Id,JobType/Id,JobStatus/Id,LastRunStatus/Id,State,JobType/Internal,NextRunBegin,NextRunEnd,LastRunBegin,LastRunEnd,UserGenerated",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "State",
                "State desc",
                "JobName",
                "JobName desc",
                "JobDescription",
                "JobDescription desc",
                "Schedule",
                "Schedule desc",
                "LastRun",
                "LastRun desc",
                "JobType/Id",
                "JobType/Id desc",
                "LastRunStatus/Id",
                "LastRunStatus/Id desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ExecutionHistories"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of all the jobs.",
        "operationId": "2_JobService_9210",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/Jobs(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobModel"
              }
            }
          },
          "required": true,
          "description": "update JobModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates a specific job\n\nPrivilege: JOB_MANAGEMENT",
        "tags": [
          "JobService"
        ],
        "operationId": "4_JobService_8024",
        "summary": "Updates a specific job"
      }
    },
    "/JobService/Jobs({taskId})": {
      "get": {
        "description": "Returns details of a job\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:taskId",
            "required": true,
            "name": "taskId",
            "in": "path"
          },
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ExecutionHistories"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of a job",
        "operationId": "6_JobService_2928",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "description": "Deletes a specific job\n\nPrivilege: DEVICE_CONFIGURATION",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:taskId",
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Deletes a specific job",
        "operationId": "5_JobService_5745",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      }
    },
    "/JobService/Jobs({taskId})/ExecutionHistories": {
      "get": {
        "description": "Returns details of all execution histories for a job\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:taskId",
            "required": true,
            "name": "taskId",
            "in": "path"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of all execution histories for a job.",
        "operationId": "7_JobService_9502",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/Jobs({taskId})/ExecutionHistories({taskExecutionHistoryId})": {
      "get": {
        "description": "Returns details of a specific execution history\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:taskId",
            "required": true,
            "name": "taskId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:taskExecutionHistoryId",
            "required": true,
            "name": "taskExecutionHistoryId",
            "in": "path"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of a specific execution history.",
        "operationId": "8_JobService_2496",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/JobTypes": {
      "get": {
        "description": "Returns details of all job types\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Internal",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of all job types.",
        "operationId": "11_JobService_8301",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/JobTypes({typeId})": {
      "get": {
        "description": "Returns details of a specific job type\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:typeId",
            "required": true,
            "name": "typeId",
            "in": "path"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of a specific job type",
        "operationId": "12_JobService_9488",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getJobTypesByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#JobService.JobType",
                        "Name": "DeviceAction_Task",
                        "@odata.id": "/api/JobService/JobTypes(3)",
                        "@odata.context": "/api/$metadata#JobService.JobType",
                        "Internal": false,
                        "Id": 3
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/JobStatuses": {
      "get": {
        "description": "Returns all job statuses\n\nPrivilege: VIEW",
        "summary": "Returns all job statuses",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "JobService"
        ],
        "operationId": "13_JobService_3650"
      }
    },
    "/JobService/JobStatuses({statusId})": {
      "get": {
        "description": "Returns details of a specific job status\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:statusId",
            "required": true,
            "name": "statusId",
            "in": "path"
          }
        ],
        "tags": [
          "JobService"
        ],
        "summary": "Returns details of a specific job status",
        "operationId": "14_JobService_787",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getJobStatusesByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#JobService.JobStatus",
                        "Name": "Scheduled",
                        "@odata.id": "/api/JobService/JobStatuses(2020)",
                        "@odata.context": "/api/$metadata#JobService.JobStatus",
                        "Id": 2020
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/JobService/Actions/JobService.RemoveJobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update JobActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes the selected jobs. In one operation, you can delete one of the following: 1)A single job 2) A set of jobs based on the filters you provide 3) All jobs\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "15_JobService_2358",
        "summary": "Deletes the selected jobs"
      }
    },
    "/JobService/Actions/JobService.RunJobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update JobActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Executes the selected jobs. In one operation, you can execute one of the following: 1) A single job 2) A set of jobs based on the filters you provide 3) All jobs\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "16_JobService_8058",
        "summary": "Executes the selected jobs"
      }
    },
    "/JobService/Actions/JobService.StopJobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update JobActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Stops the selected jobs. In one operation, you can stop one of the following: 1) A single job 2) A set of jobs based on the filters you provide 3) All jobs\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "17_JobService_1746",
        "summary": "stops the selected jobs"
      }
    },
    "/JobService/Actions/JobService.EnableJobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update JobActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Enables the selected jobs. In one operation, you can enable one of the following: 1) A single job 2) A set of jobs based on the filters you provide 3)All jobs\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "18_JobService_3538",
        "summary": "Enables the selected jobs"
      }
    },
    "/JobService/Actions/JobService.DisableJobs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update JobActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Disables the selected jobs. In one operation, you can disable one of the following: 1) A single job 2) A set of jobs based on the filters you provide 3) All jobs\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "19_JobService_841",
        "summary": "Disables the selected jobs"
      }
    },
    "/JobService/Actions/JobService.ExecuteAction": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobModel"
              }
            }
          },
          "required": true,
          "description": "update JobModel object"
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/JobModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns information about jobs that are resumed\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "JobService"
        ],
        "operationId": "20_JobService_1754",
        "summary": "Returns information about jobs that are resumed"
      }
    },
    "/DiscoveryConfigService": {
      "get": {
        "description": "Returns the URIs of various Discovery Configure Service APIs.\n\nPrivilege: VIEW",
        "summary": "Returns the URIs of various Discovery Configure Service APIs.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "1_DiscoveryConfigService_1738"
      }
    },
    "/DiscoveryConfigService/DiscoveryConfigGroups": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
              }
            }
          },
          "required": true,
          "description": "update DiscoveryConfigGroupModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {
                  "createDiscoveryConfigGroupExample": {
                    "value": {
                      "DiscoveryConfigParentGroupId": 0,
                      "Schedule": {
                        "RunLater": false,
                        "RunNow": false,
                        "Cron": "startnow",
                        "StartTime": null,
                        "EndTime": null,
                        "Recurring": null
                      },
                      "DiscoveryConfigTaskParam": [
                        {
                          "TaskTypeId": 0,
                          "ExecutionSequence": 0,
                          "TaskId": 10240
                        }
                      ],
                      "DiscoveryConfigGroupName": "Discovery-testesx2",
                      "DiscoveryConfigModels": [
                        {
                          "ConnectionProfileId": 0,
                          "ConnectionProfile": "{\"profileName\":\"\",\"profileDescription\":\"\",\"type\":\"DISCOVERY\",\"credentials\":[{\"id\":0,\"type\":\"WSMAN\",\"authType\":\"Basic\",\"modified\":false,\"credentials\":{\"username\":\"root\",\"password\":\"<password>\",\"caCheck\":false,\"cnCheck\":false,\"port\":443,\"retries\":3,\"timeout\":60,\"isHttp\":false,\"keepAlive\":false}},{\"id\":0,\"type\":\"REDFISH\",\"authType\":\"Basic\",\"modified\":false,\"credentials\":{\"username\":\"root\",\"password\":\"<password>\",\"caCheck\":false,\"cnCheck\":false,\"port\":443,\"retries\":3,\"timeout\":60,\"isHttp\":false,\"keepAlive\":false}}]}",
                          "DiscoveryConfigTargets": [
                            {
                              "NetworkAddressDetail": "x.x.x.x",
                              "AddressType": 5,
                              "DiscoveryConfigTargetId": 0,
                              "Disabled": false,
                              "Exclude": false,
                              "SubnetMask": null
                            }
                          ],
                          "DeviceType": [
                            2000
                          ],
                          "DiscoveryConfigStatus": "",
                          "DiscoveryConfigDescription": "",
                          "DiscoveryConfigId": 916135421
                        }
                      ],
                      "DiscoveryConfigGroupId": 3,
                      "DiscoveryStatusEmailRecipient": null,
                      "DiscoveryConfigTasks": [],
                      "CreateGroup": true,
                      "CommunityString": false,
                      "ChassisIdentifier": null,
                      "TrapDestination": true,
                      "DiscoveryConfigGroupDescription": "Discovery-testesx2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Creates a discovery configuration group.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "2_DiscoveryConfigService_5065",
        "summary": "Creates a discovery configuration group."
      },
      "get": {
        "description": "Returns list of all discovery configuration groups.\n\nPrivilege: VIEW",
        "summary": "Returns list of all discovery configuration groups.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDiscoveryConfigGroupsExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoveryConfigGroup",
                          "DiscoveryConfigDiscoveredDeviceCount": null,
                          "Schedule": {
                            "RunLater": false,
                            "RunNow": false,
                            "Cron": "startnow",
                            "StartTime": null,
                            "EndTime": null,
                            "Recurring": null
                          },
                          "DiscoveryConfigGroupName": "Discovery-202005111644077",
                          "@odata.id": "/api/DiscoveryConfigService/DiscoveryConfigGroups(1)",
                          "DiscoveryConfigExpectedDeviceCount": null,
                          "DiscoveryConfigGroupId": 1,
                          "DiscoveryJobStatusModel": null,
                          "DiscoveryStatusEmailRecipient": null,
                          "CreateGroup": true,
                          "CommunityString": false,
                          "DiscoveryConfigModels": [
                            {
                              "ConnectionProfileId": 10071,
                              "ConnectionProfile": "{\n  \"profileId\" : 10071,\n  \"profileName\" : \"\",\n  \"profileDescription\" : \"\",\n  \"type\" : \"DISCOVERY\",\n  \"updatedBy\" : null,\n  \"updateTime\" : 1589195666001,\n  \"credentials\" : [ {\n    \"type\" : \"VMWARE\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 1,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : false\n    }\n  } ]\n}",
                              "DiscoveryConfigTargets": [
                                {
                                  "NetworkAddressDetail": "100.96.37.14",
                                  "AddressType": 3,
                                  "DiscoveryConfigTargetId": 1,
                                  "Disabled": false,
                                  "Exclude": false,
                                  "SubnetMask": null
                                }
                              ],
                              "DeviceType": [
                                1000
                              ],
                              "DiscoveryConfigStatus": null,
                              "DiscoveryConfigId": 1
                            }
                          ],
                          "TrapDestination": false
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoveryConfigGroup",
                          "DiscoveryConfigDiscoveredDeviceCount": null,
                          "Schedule": {
                            "RunLater": false,
                            "RunNow": false,
                            "Cron": "startnow",
                            "StartTime": null,
                            "EndTime": null,
                            "Recurring": null
                          },
                          "DiscoveryConfigGroupName": "Discovery-2020111012361919",
                          "@odata.id": "/api/DiscoveryConfigService/DiscoveryConfigGroups(2)",
                          "DiscoveryConfigExpectedDeviceCount": null,
                          "DiscoveryConfigGroupId": 2,
                          "DiscoveryJobStatusModel": null,
                          "DiscoveryStatusEmailRecipient": null,
                          "CreateGroup": true,
                          "CommunityString": false,
                          "DiscoveryConfigModels": [
                            {
                              "ConnectionProfileId": 10111,
                              "ConnectionProfile": "{\n  \"profileId\" : 10111,\n  \"profileName\" : \"\",\n  \"profileDescription\" : \"\",\n  \"type\" : \"DISCOVERY\",\n  \"updatedBy\" : null,\n  \"updateTime\" : 1604992024377,\n  \"credentials\" : [ {\n    \"type\" : \"WSMAN\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 2,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : false\n    }\n  } ]\n}",
                              "DiscoveryConfigTargets": [
                                {
                                  "NetworkAddressDetail": "100.96.20.0-100.96.20.255",
                                  "AddressType": 1,
                                  "DiscoveryConfigTargetId": 2,
                                  "Disabled": false,
                                  "Exclude": false,
                                  "SubnetMask": null
                                }
                              ],
                              "DeviceType": [
                                1000
                              ],
                              "DiscoveryConfigStatus": null,
                              "DiscoveryConfigId": 2
                            }
                          ],
                          "TrapDestination": false
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.DiscoveryConfigGroup)"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigurationGroupsModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "6_DiscoveryConfigService_5649"
      }
    },
    "/DiscoveryConfigService/DiscoveryConfigGroups(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
              }
            }
          },
          "required": true,
          "description": "update DiscoveryConfigGroupModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "updateDiscoveryConfigGroupExample": {
                    "value": {
                      "DiscoveryConfigParentGroupId": 0,
                      "Schedule": {
                        "RunLater": false,
                        "RunNow": false,
                        "Cron": "startnow",
                        "StartTime": null,
                        "EndTime": null,
                        "Recurring": null
                      },
                      "DiscoveryConfigTaskParam": [
                        {
                          "TaskTypeId": 0,
                          "ExecutionSequence": 0,
                          "TaskId": 10240
                        }
                      ],
                      "DiscoveryConfigGroupName": "Discovery-testesx2",
                      "DiscoveryConfigModels": [
                        {
                          "ConnectionProfileId": 10239,
                          "ConnectionProfile": "{\n  \"profileId\" : 10239,\n  \"profileName\" : \"\",\n  \"profileDescription\" : \"\",\n  \"type\" : \"DISCOVERY\",\n  \"updatedBy\" : null,\n  \"updateTime\" : 1609245841397,\n  \"credentials\" : [ {\n    \"type\" : \"WSMAN\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 3,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : false\n    }\n  }, {\n    \"type\" : \"REDFISH\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 4,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : true,\n      \"version\" : null\n    }\n  } ]\n}",
                          "DiscoveryConfigTargets": [
                            {
                              "NetworkAddressDetail": "x.x.x.x",
                              "AddressType": 5,
                              "DiscoveryConfigTargetId": 3,
                              "Disabled": false,
                              "Exclude": false,
                              "SubnetMask": null
                            }
                          ],
                          "DeviceType": [
                            2000
                          ],
                          "DiscoveryConfigStatus": null,
                          "DiscoveryConfigDescription": null,
                          "DiscoveryConfigId": 3
                        }
                      ],
                      "DiscoveryConfigGroupId": 3,
                      "DiscoveryStatusEmailRecipient": null,
                      "DiscoveryConfigTasks": [],
                      "CreateGroup": true,
                      "CommunityString": false,
                      "ChassisIdentifier": null,
                      "TrapDestination": true,
                      "DiscoveryConfigGroupDescription": "Discovery-testesx2"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Modifies a discovery configuration task with given ID.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "3_DiscoveryConfigService_4641",
        "summary": "Modifies a discovery configuration task with given ID."
      }
    },
    "/DiscoveryConfigService/Jobs": {
      "get": {
        "description": "Returns the list of all discovery jobs with details.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-JobName,JobSchedule,JobEnabled,LastUpdateTime,JobStatusId,JobStartTime,JobEndTime",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "JobName",
                "JobName desc",
                "JobSchedule",
                "JobSchedule desc",
                "LastUpdateTime",
                "LastUpdateTime desc",
                "JobStatusId",
                "JobStatusId desc",
                "JobEnabled",
                "JobEnabled desc",
                "JobStartTime",
                "JobStartTime desc",
                "JobEndTime",
                "JobEndTime desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Returns the list of all discovery jobs with details.",
        "operationId": "4_DiscoveryConfigService_6801",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllDiscoveryJobsExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoveryJob",
                          "JobEnabled": true,
                          "JobStatusId": 2060,
                          "DiscoveryConfigEmailRecipient": null,
                          "DiscoveryConfigDiscoveredDeviceCount": 1,
                          "LastUpdateTime": "2020-05-11 11:15:34.087",
                          "DiscoveredDevicesByType": [
                            {
                              "Count": 1,
                              "DeviceType": "SERVER"
                            }
                          ],
                          "DiscoveryConfigExpectedDeviceCount": 1,
                          "@odata.id": "/api/DiscoveryConfigService/Jobs(10072)",
                          "JobName": "Discovery-202005111644077",
                          "DiscoveryConfigGroupId": 1,
                          "JobDescription": null,
                          "JobStartTime": "2020-05-11 11:14:26.931",
                          "JobSchedule": "startnow",
                          "UpdatedBy": "admin",
                          "JobEndTime": "2020-05-11 11:14:26.931",
                          "JobId": 10072,
                          "JobNextRun": "2020-05-11 11:14:26.832",
                          "JobProgress": "100"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoveryJob",
                          "JobEnabled": true,
                          "JobStatusId": 2070,
                          "DiscoveryConfigEmailRecipient": null,
                          "DiscoveryConfigDiscoveredDeviceCount": 0,
                          "LastUpdateTime": "2020-12-30 09:42:07.519",
                          "DiscoveredDevicesByType": [],
                          "DiscoveryConfigExpectedDeviceCount": 1,
                          "@odata.id": "/api/DiscoveryConfigService/Jobs(10240)",
                          "JobName": "Discovery-testesx2",
                          "DiscoveryConfigGroupId": 3,
                          "JobDescription": null,
                          "JobStartTime": "2020-12-30 09:41:41.441",
                          "JobSchedule": "startnow",
                          "UpdatedBy": "admin",
                          "JobEndTime": "2020-12-30 09:41:41.441",
                          "JobId": 10240,
                          "JobNextRun": null,
                          "JobProgress": "100"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.DiscoveryJob)"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigurationGroupJobResponseModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DiscoveryConfigService/Jobs({jobId})": {
      "get": {
        "description": "Returns the discovery job information for given job ID.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:jobId",
            "required": true,
            "name": "jobId",
            "in": "path"
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Returns the discovery job information for given job ID.",
        "operationId": "5_DiscoveryConfigService_637",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDiscoveryJobByJobIdExample": {
                    "value": {
                      "@odata.type": "#DiscoveryConfigService.DiscoveryJob",
                      "JobEnabled": true,
                      "JobStatusId": 2060,
                      "DiscoveryConfigEmailRecipient": null,
                      "DiscoveryConfigDiscoveredDeviceCount": 1,
                      "LastUpdateTime": "2020-05-11 11:15:34.087",
                      "DiscoveredDevicesByType": [
                        {
                          "Count": 1,
                          "DeviceType": "SERVER"
                        }
                      ],
                      "DiscoveryConfigExpectedDeviceCount": 1,
                      "@odata.id": "/api/DiscoveryConfigService/Jobs(10072)",
                      "@odata.context": "/api/$metadata#DiscoveryConfigService.DiscoveryJob",
                      "JobName": "Discovery-202005111644077",
                      "DiscoveryConfigGroupId": 1,
                      "JobDescription": "Discovery-202005111644077",
                      "JobStartTime": "2020-05-11 11:14:26.931",
                      "JobSchedule": "startnow",
                      "UpdatedBy": "admin",
                      "JobEndTime": "2020-05-11 11:15:34.086",
                      "JobId": 10072,
                      "JobNextRun": "2020-05-11 11:14:26.832",
                      "JobProgress": "100"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryJobDetail"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DiscoveryConfigService/DiscoveryConfigGroups({groupId})": {
      "delete": {
        "description": "Deletes a discovery configuration group with given ID.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int64"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Deletes a discovery configuration group with given ID.",
        "operationId": "8_DiscoveryConfigService_6749",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Gives the details of a discovery configuration group with given ID.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int64"
            },
            "description": "key:groupId",
            "required": true,
            "name": "groupId",
            "in": "path"
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Gives the details of a discovery configuration group with given ID.",
        "operationId": "7_DiscoveryConfigService_5897",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDiscoveryConfigGroupByIdExample": {
                    "value": {
                      "@odata.type": "#DiscoveryConfigService.DiscoveryConfigGroup",
                      "DiscoveryConfigDiscoveredDeviceCount": null,
                      "Schedule": {
                        "RunLater": false,
                        "RunNow": false,
                        "Cron": "startnow",
                        "StartTime": null,
                        "EndTime": null,
                        "Recurring": null
                      },
                      "DiscoveryConfigGroupName": "Discovery-testesx2",
                      "@odata.id": "/api/DiscoveryConfigService/DiscoveryConfigGroups(3)",
                      "@odata.context": "/api/$metadata#DiscoveryConfigService.DiscoveryConfigGroup",
                      "DiscoveryConfigExpectedDeviceCount": null,
                      "DiscoveryConfigGroupId": 3,
                      "DiscoveryJobStatusModel": null,
                      "DiscoveryStatusEmailRecipient": null,
                      "CreateGroup": true,
                      "CommunityString": false,
                      "DiscoveryConfigModels": [
                        {
                          "ConnectionProfileId": 10245,
                          "ConnectionProfile": "{\n  \"profileId\" : 10245,\n  \"profileName\" : \"\",\n  \"profileDescription\" : \"\",\n  \"type\" : \"DISCOVERY\",\n  \"updatedBy\" : null,\n  \"updateTime\" : 1609321300156,\n  \"credentials\" : [ {\n    \"type\" : \"WSMAN\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 7,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : false\n    }\n  }, {\n    \"type\" : \"REDFISH\",\n    \"authType\" : \"Basic\",\n    \"modified\" : false,\n    \"id\" : 8,\n    \"credentials\" : {\n      \"username\" : \"root\",\n      \"password\" : null,\n      \"domain\" : null,\n      \"caCheck\" : false,\n      \"cnCheck\" : false,\n      \"certificateData\" : null,\n      \"certificateDetail\" : null,\n      \"port\" : 443,\n      \"retries\" : 3,\n      \"timeout\" : 60,\n      \"isHttp\" : false,\n      \"keepAlive\" : true,\n      \"version\" : null\n    }\n  } ]\n}",
                          "DiscoveryConfigTargets": [
                            {
                              "NetworkAddressDetail": "x.x.x.x",
                              "AddressType": 5,
                              "DiscoveryConfigTargetId": 5,
                              "Disabled": false,
                              "Exclude": false,
                              "SubnetMask": null
                            }
                          ],
                          "DeviceType": [
                            2000
                          ],
                          "DiscoveryConfigStatus": null,
                          "DiscoveryConfigId": 5
                        }
                      ],
                      "TrapDestination": true
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.Parse": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fileName": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "parseDiscoveryFileExample": {
                    "value": {
                      "FileError": [],
                      "AddressModel": [
                        {
                          "Exclude": false,
                          "NetworkAddress": "10.255.2.104",
                          "Subnet": null
                        },
                        {
                          "Exclude": false,
                          "NetworkAddress": "10.255.2.227",
                          "Subnet": null
                        },
                        {
                          "Exclude": false,
                          "NetworkAddress": "10.255.3.17",
                          "Subnet": null
                        },
                        {
                          "Exclude": false,
                          "NetworkAddress": "10.35.0.0-10.35.0.255",
                          "Subnet": "255.0.0.0"
                        }
                      ],
                      "DuplicateAddressModel": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/NetworkAddressParsedInfoModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Parses the discovery ranges from the .CSV file.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "9_DiscoveryConfigService_3962",
        "summary": "Parses the discovery ranges from the .CSV file."
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.RemoveDiscoveryGroup": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryConfigGroupActionPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update DiscoveryConfigGroupActionPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes the list of discovery configuration groups for which IDs are provided in request.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "11_DiscoveryConfigService_253",
        "summary": "Deletes the list of discovery configuration groups for which IDs are provided in request."
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.ValidateNetworkAddresses": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
              }
            }
          },
          "required": true,
          "description": "update DiscoveryConfigGroupModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "validateNetworkAddressExample": {
                    "value": {
                      "HasError": false,
                      "DiscoveryConfigRequestErrorModels": [
                        {
                          "DiscoveryConfigDescription": null,
                          "HasError": false,
                          "ErrorMessage": [],
                          "DiscoveryConfigId": 3
                        }
                      ],
                      "ScheduleError": null,
                      "GroupRequestError": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryConfigGroupErrorModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Validates discovery configuration request data.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "12_DiscoveryConfigService_2176",
        "summary": "Validates discovery configuration request data."
      }
    },
    "/DiscoveryConfigService/DiscoverableDeviceTypes": {
      "get": {
        "description": "Returns list of different device types that can be discovered.\n\nPrivilege: VIEW",
        "summary": "Returns list of different device types that can be discovered.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDiscoverableDeviceTypesExample": {
                    "value": {
                      "@odata.count": 4,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoverableDeviceTypeModel",
                          "Description": "Server Device",
                          "Id": 1000,
                          "Name": "SERVER"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoverableDeviceTypeModel",
                          "Description": "Chassis Device",
                          "Id": 2000,
                          "Name": "CHASSIS"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoverableDeviceTypeModel",
                          "Description": "Dell Storage",
                          "Id": 5000,
                          "Name": "DELL STORAGE"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.DiscoverableDeviceTypeModel",
                          "Description": "Network Switch",
                          "Id": 7000,
                          "Name": "NETWORK SWITCH"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.DiscoverableDeviceTypeModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DiscoverableDeviceTypeModelOdata"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "13_DiscoveryConfigService_5463"
      }
    },
    "/DiscoveryConfigService/Protocols": {
      "get": {
        "description": "Returns list of different protocols supported for discovery.\n\nPrivilege: VIEW",
        "summary": "Returns list of different protocols supported for discovery.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProtocolsExample": {
                    "value": {
                      "@odata.count": 8,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for SNMP",
                          "Id": 1,
                          "Name": "SNMP"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for WSMAN",
                          "Id": 2,
                          "Name": "WSMAN"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for REDFISH",
                          "Id": 3,
                          "Name": "REDFISH"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for ICMP",
                          "Id": 4,
                          "Name": "ICMP"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for IPMI",
                          "Id": 5,
                          "Name": "IPMI"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for SSH",
                          "Id": 6,
                          "Name": "SSH"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for VMWARE",
                          "Id": 7,
                          "Name": "VMWARE"
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolModel",
                          "Description": "Protocol definition for STORAGE",
                          "Id": 8,
                          "Name": "STORAGE"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.ProtocolModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProtocolModelOdata"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "14_DiscoveryConfigService_9986"
      }
    },
    "/DiscoveryConfigService/ProtocolToDeviceType": {
      "get": {
        "description": "Returns list of different devices and mapping to protocols supported for discovery.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-DeviceTypeId,ProtocolId,PriorityOrder,IsSelectedByDefault",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Returns list of different devices and mapping to protocols supported for discovery.",
        "operationId": "15_DiscoveryConfigService_6250",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProtocolToDeviceTypeMappingExample": {
                    "value": {
                      "@odata.count": 11,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 1,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "SNMP",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 500
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "DELL STORAGE",
                          "ProtocolId": 1,
                          "DeviceTypeId": 5000,
                          "ProtocolName": "SNMP",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "NETWORK SWITCH",
                          "ProtocolId": 1,
                          "DeviceTypeId": 7000,
                          "ProtocolName": "SNMP",
                          "IsSelectedByDefault": true,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 2,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "WSMAN",
                          "IsSelectedByDefault": true,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "CHASSIS",
                          "ProtocolId": 2,
                          "DeviceTypeId": 2000,
                          "ProtocolName": "WSMAN",
                          "IsSelectedByDefault": true,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 3,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "REDFISH",
                          "IsSelectedByDefault": true,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "CHASSIS",
                          "ProtocolId": 3,
                          "DeviceTypeId": 2000,
                          "ProtocolName": "REDFISH",
                          "IsSelectedByDefault": true,
                          "PriorityOrder": 100
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 5,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "IPMI",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 200
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 6,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "SSH",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 300
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "SERVER",
                          "ProtocolId": 7,
                          "DeviceTypeId": 1000,
                          "ProtocolName": "VMWARE",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 400
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.ProtocolToDeviceTypeModel",
                          "DeviceTypeName": "DELL STORAGE",
                          "ProtocolId": 8,
                          "DeviceTypeId": 5000,
                          "ProtocolName": "STORAGE",
                          "IsSelectedByDefault": false,
                          "PriorityOrder": 200
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.ProtocolToDeviceTypeModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProtocolToDeviceTypeModelOdata"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DiscoveryConfigService/SignaledNodes": {
      "get": {
        "description": "Gives the information, and status of the servers discovered using the server-initiated discovery feature.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-ServiceTag,HasCredentials,Ipv4Address,Ipv6Address,Status",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "ServiceTag",
                "ServiceTag desc",
                "HasCredentials",
                "HasCredentials desc",
                "Ipv4Address",
                "Ipv4Address desc",
                "Ipv6Address",
                "Ipv6Address desc",
                "Status",
                "Status desc",
                "AnnouncedTime",
                "AnnouncedTime desc",
                "DiscoveryTime",
                "DiscoveryTime desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "DiscoveryConfigService"
        ],
        "summary": "Gives the information, and status of the servers discovered using the server-initiated discovery feature.",
        "operationId": "16_DiscoveryConfigService_181",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllAnnouncedTargetsExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#DiscoveryConfigService.AnnouncedTarget",
                          "ServiceTag": "PFSTN19",
                          "HasCredentials": true,
                          "CreatedBy": "admin",
                          "Ipv6Address": "",
                          "AnnouncedTime": null,
                          "CreatedOn": "2021-01-06 07:22:13.906276",
                          "DiscoveryTime": null,
                          "@odata.id": "/api/DiscoveryConfigService/SignaledNodes(1)",
                          "Status": 2,
                          "TaskId": 0,
                          "Ipv4Address": "",
                          "Port": 0,
                          "Id": 1
                        },
                        {
                          "@odata.type": "#DiscoveryConfigService.AnnouncedTarget",
                          "ServiceTag": "R730XD2",
                          "HasCredentials": true,
                          "CreatedBy": "admin",
                          "Ipv6Address": "",
                          "AnnouncedTime": null,
                          "CreatedOn": "2021-01-06 07:22:13.906777",
                          "DiscoveryTime": null,
                          "@odata.id": "/api/DiscoveryConfigService/SignaledNodes(2)",
                          "Status": 2,
                          "TaskId": 0,
                          "Ipv4Address": "",
                          "Port": 0,
                          "Id": 2
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(DiscoveryConfigService.AnnouncedTarget)"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AnnouncedTargetOdataModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.UploadNodeInfo": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAnnouncedTargetRequest"
              }
            }
          },
          "required": true,
          "description": "update AddAnnouncedTargetRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Uploads the server credentials to the OpenManage Enterprise console.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "17_DiscoveryConfigService_9784",
        "summary": "Uploads the server credentials to the OpenManage Enterprise console."
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.SignalNodePresence": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignalNodeModel"
              }
            }
          },
          "required": true,
          "description": "update SignalNodeModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API is used by iDRAC to initiate contact with OpenManage Enterprise console. However, this API is accessible from the OpenManage Enterprise console only when the client certificate of the servers is signed by the Dell CA.",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "18_DiscoveryConfigService_898",
        "summary": "This method is used by iDRAC to initiate contact with OpenManage Enterprise console. However, this API is accessible from the OpenManage Enterprise console only when the client certificate of the servers is signed by the Dell CA."
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.DiscoverNodes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeIdModel"
              }
            }
          },
          "required": true,
          "description": "update NodeIdModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API is used to discover the servers manually after the servers initiate contact with the OpenManage Enterprise console and the credentials of the servers are added to the console.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "19_DiscoveryConfigService_6519",
        "summary": "This API is used to discover the servers manually after the servers initiate contact with the OpenManage Enterprise console and the credentials of the servers are added to the console."
      }
    },
    "/DiscoveryConfigService/Actions/DiscoveryConfigService.DeleteSignaledNodes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeIdModel"
              }
            }
          },
          "required": true,
          "description": "update NodeIdModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes the servers that are discovered by using the server-initiated discovery feature.\n\nPrivilege: DISCOVERY_MANAGEMENT",
        "tags": [
          "DiscoveryConfigService"
        ],
        "operationId": "20_DiscoveryConfigService_3659",
        "summary": "Deletes the servers that are discovered by using the server-initiated discovery feature."
      }
    },
    "/TemplateService": {
      "get": {
        "description": "This is a root service. It gets all the endpoints for Template Services.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for Template Services.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "1_TemplateService_4638"
      }
    },
    "/TemplateService/Templates": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTemplateRequest"
              }
            }
          },
          "required": true,
          "description": "update CreateTemplateRequest object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "16_TemplateService_5200",
        "summary": "Creates a template."
      },
      "get": {
        "description": "Gets a list of templates based on the filter parameters.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,Name,TypeId,Status,ViewTypeId",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Id",
                "Id desc",
                "Name",
                "Name desc",
                "TypeId",
                "TypeId desc",
                "Status",
                "Status desc",
                "ViewTypeId",
                "ViewTypeId desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets a list of templates based on the filter parameters.",
        "operationId": "2_TemplateService_9313",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllTemplatesExample": {
                    "value": [
                      {
                        "CreationTime": "2020-08-20 23:30:53.917305",
                        "IsStatelessAvailable": false,
                        "Content": null,
                        "IdentityPoolId": 0,
                        "Name": "iDRAC 13G Enable HPC Profile",
                        "@odata.type": "#TemplateService.Template",
                        "TypeId": 2,
                        "AttributeDetails": {
                          "@odata.id": "/api/TemplateService/Templates(1)/AttributeDetails"
                        },
                        "Description": "Tune workload for High Performance Computing Environment",
                        "LastUpdatedBy": null,
                        "IsPersistencePolicyValid": false,
                        "Status": 0,
                        "IsBuiltIn": true,
                        "LastUpdatedTime": "2020-08-20 23:30:53.917306",
                        "Views@odata.navigationLink": "/api/TemplateService/Templates(1)/Views",
                        "@odata.id": "/api/TemplateService/Templates(1)",
                        "HasIdentityAttributes": false,
                        "CreatedBy": "system",
                        "SourceDeviceId": 0,
                        "TaskId": 0,
                        "Id": 1,
                        "ViewTypeId": 4
                      },
                      {
                        "CreationTime": "2020-08-20 23:30:53.917407",
                        "IsStatelessAvailable": false,
                        "Content": null,
                        "IdentityPoolId": 0,
                        "Name": "iDRAC 13G Enable Low Latency Profile",
                        "@odata.type": "#TemplateService.Template",
                        "TypeId": 2,
                        "AttributeDetails": {
                          "@odata.id": "/api/TemplateService/Templates(2)/AttributeDetails"
                        },
                        "Description": "Tune workload for Low Latency Computing Environments",
                        "LastUpdatedBy": null,
                        "IsPersistencePolicyValid": false,
                        "Status": 0,
                        "IsBuiltIn": true,
                        "LastUpdatedTime": "2020-08-20 23:30:53.917407",
                        "Views@odata.navigationLink": "/api/TemplateService/Templates(2)/Views",
                        "@odata.id": "/api/TemplateService/Templates(2)",
                        "HasIdentityAttributes": false,
                        "CreatedBy": "system",
                        "SourceDeviceId": 0,
                        "TaskId": 0,
                        "Id": 2,
                        "ViewTypeId": 4
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TemplateResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/TemplateViewTypes": {
      "get": {
        "description": "Gets all template view types.\n\nPrivilege: VIEW",
        "summary": "Gets all template view types.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllTemplateViewTypesExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.TemplateViewTypeModel",
                        "Id": 0,
                        "Description": "None"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateViewTypeModel",
                        "Id": 1,
                        "Description": "Compliance"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateViewTypeModel",
                        "Id": 2,
                        "Description": "Deployment"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateViewTypeModel",
                        "Id": 3,
                        "Description": "Inventory"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateViewTypeModel",
                        "Id": 4,
                        "Description": "Sample"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TemplateViewTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "3_TemplateService_4060"
      }
    },
    "/TemplateService/Profiles": {
      "get": {
        "description": "Gets the list of all the available profiles.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-Id,ProfileName,AssociatedEntityId,AssociationType,Status,SourceTemplateId",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets the list of all the available profiles.",
        "operationId": "4_TemplateService_1035",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileViewModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/TemplateTypes": {
      "get": {
        "description": "Returns information about each type of template, indicating the types of devices for which configuration is supported, such as chassis and servers.\n\nPrivilege: VIEW",
        "summary": "Gets all supported template types.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllTemplateTypesExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.TemplateTypeModel",
                        "Id": 0,
                        "Name": "None"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateTypeModel",
                        "Id": 2,
                        "Name": "Server"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateTypeModel",
                        "Id": 4,
                        "Name": "Chassis"
                      },
                      {
                        "@odata.type": "#TemplateService.TemplateTypeModel",
                        "Id": 3,
                        "Name": "IO Module"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TemplateTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "5_TemplateService_4834"
      }
    },
    "/TemplateService/Templates({templateId})": {
      "put": {
        "description": "The method updates the specific template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "description": "templateId that need to be updated",
            "required": true,
            "name": "templateId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "The method updates the specific template.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateAttributesUpdateModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateAttributesUpdateModel object"
        },
        "operationId": "19_TemplateService_8330",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        }
      },
      "delete": {
        "description": "Deletes the specified template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Deletes the specified template.",
        "operationId": "17_TemplateService_8628",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Gets the details for the specific template.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets the details for the specific template. ",
        "operationId": "6_TemplateService_7726",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getTemplateExample": {
                    "value": [
                      {
                        "CreationTime": "2020-08-20 23:30:53.917305",
                        "IsStatelessAvailable": false,
                        "Content": null,
                        "IdentityPoolId": 0,
                        "Name": "iDRAC 13G Enable HPC Profile",
                        "@odata.type": "#TemplateService.Template",
                        "TypeId": 2,
                        "AttributeDetails": {
                          "@odata.id": "/api/TemplateService/Templates(1)/AttributeDetails"
                        },
                        "Description": "Tune workload for High Performance Computing Environment",
                        "@odata.context": "/api/$metadata#TemplateService.Template",
                        "LastUpdatedBy": null,
                        "IsPersistencePolicyValid": false,
                        "Status": 0,
                        "IsBuiltIn": true,
                        "LastUpdatedTime": "2020-08-20 23:30:53.917306",
                        "Views@odata.navigationLink": "/api/TemplateService/Templates(1)/Views",
                        "@odata.id": "/api/TemplateService/Templates(1)",
                        "HasIdentityAttributes": false,
                        "CreatedBy": "system",
                        "SourceDeviceId": 0,
                        "TaskId": 0,
                        "Id": 1,
                        "ViewTypeId": 4
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TemplateModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Profiles({profileId})": {
      "get": {
        "description": "Gets the details of the specific profiles.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:profileId",
            "required": true,
            "name": "profileId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets the details of the specific profiles.",
        "operationId": "7_TemplateService_2571",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/ProfileViewModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views": {
      "get": {
        "description": "Returns the views available for the specific template. Each view displays template data in a specific structure.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the views available for the specific template.",
        "operationId": "8_TemplateService_5589",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllAttributeViewsExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.AttributeView",
                        "Description": "The hierarchy consists of template specific component classes, groups (from the attribute registry) and attributes.",
                        "AttributeViewDetails": {
                          "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails"
                        },
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(1)",
                        "DeviceAttributeViewDetails@odata.navigationLink": "/api/TemplateService/Templates(1)/Views(1)/DeviceAttributeViewDetails",
                        "Id": 1,
                        "Name": "TemplateSpecific"
                      },
                      {
                        "@odata.type": "#TemplateService.AttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "AttributeViewDetails": {
                          "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/AttributeViewDetails"
                        },
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)",
                        "DeviceAttributeViewDetails@odata.navigationLink": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails",
                        "Id": 2,
                        "Name": "SystemSpecific"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AttributeViewModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views({viewId})": {
      "get": {
        "description": "Returns the details of the specific view related to the specific template.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:viewId",
            "required": true,
            "name": "viewId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the details of the specific view related to the specific template.",
        "operationId": "9_TemplateService_690",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAttributeViewExample": {
                    "value": {
                      "@odata.type": "#TemplateService.AttributeView",
                      "Description": "The hierarchy consists of template specific component classes, groups (from the attribute registry) and attributes.",
                      "AttributeViewDetails": {
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails"
                      },
                      "@odata.id": "/api/TemplateService/Templates(1)/Views(1)",
                      "@odata.context": "/api/$metadata#TemplateService.AttributeView",
                      "DeviceAttributeViewDetails@odata.navigationLink": "/api/TemplateService/Templates(1)/Views(1)/DeviceAttributeViewDetails",
                      "Id": 1,
                      "Name": "TemplateSpecific"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views({viewId})/AttributeViewDetails": {
      "get": {
        "description": "Returns the details for all attributes applicable to a specific template view. This does not return the information needed for editing the attributes.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:viewId",
            "required": true,
            "name": "viewId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the details for all attributes applicable to a specific template view.",
        "operationId": "10_TemplateService_2375",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAttributeViewDetailExample": {
                    "value": {
                      "@odata.type": "#TemplateService.TemplateAttributeViewDetail",
                      "Description": "The hierarchy consists of template specific component classes, groups (from the attribute registry) and attributes.",
                      "AttributeGroupNames": [],
                      "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails",
                      "@odata.context": "/api/$metadata#TemplateService.TemplateAttributeViewDetail",
                      "TemplateEditInfoDetails": {
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails/TemplateEditInfoDetails"
                      },
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [],
                              "DisplayName": "System Profile Settings",
                              "GroupNameId": 23079,
                              "Attributes": [
                                {
                                  "IsSecure": false,
                                  "DisplayName": "Workload Profile",
                                  "Description": null,
                                  "IsIgnored": false,
                                  "IsReadOnly": false,
                                  "IsLinkedToSecure": false,
                                  "TargetSpecificTypeId": 0,
                                  "Value": "HpcProfile",
                                  "AttributeEditInfoId": 446,
                                  "AttributeId": 1,
                                  "CustomId": 0
                                }
                              ]
                            }
                          ],
                          "DisplayName": "BIOS",
                          "GroupNameId": 1,
                          "Attributes": []
                        }
                      ],
                      "Id": 1,
                      "Name": "TemplateSpecific"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/ProfileViewDetails({deviceId})": {
      "get": {
        "description": "Gets a hierarchy of the target-specific attributes in the profile on a specified entity.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets a hierarchy of the target-specific attributes in the profile on a specified entity.",
        "operationId": "11_TemplateService_3889",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAttributeViewDetailExample": {
                    "value": {
                      "@odata.type": "#TemplateService.TemplateAttributeViewDetail",
                      "Description": "The hierarchy consists of template specific component classes, groups (from the attribute registry) and attributes.",
                      "AttributeGroupNames": [],
                      "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails",
                      "@odata.context": "/api/$metadata#TemplateService.TemplateAttributeViewDetail",
                      "TemplateEditInfoDetails": {
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(1)/AttributeViewDetails/TemplateEditInfoDetails"
                      },
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [],
                              "DisplayName": "System Profile Settings",
                              "GroupNameId": 23079,
                              "Attributes": [
                                {
                                  "IsSecure": false,
                                  "DisplayName": "Workload Profile",
                                  "Description": null,
                                  "IsIgnored": false,
                                  "IsReadOnly": false,
                                  "IsLinkedToSecure": false,
                                  "TargetSpecificTypeId": 0,
                                  "Value": "HpcProfile",
                                  "AttributeEditInfoId": 446,
                                  "AttributeId": 1,
                                  "CustomId": 0
                                }
                              ]
                            }
                          ],
                          "DisplayName": "BIOS",
                          "GroupNameId": 1,
                          "Attributes": []
                        }
                      ],
                      "Id": 1,
                      "Name": "TemplateSpecific"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views({viewId})/DeviceAttributeViewDetails": {
      "get": {
        "description": "Returns the device-specific attributes for a view of a template.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:viewId",
            "required": true,
            "name": "viewId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the device-specific attributes for a view of a template.",
        "operationId": "12_TemplateService_6173",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceListForAttributeViewDetailExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(10080)",
                        "Id": 10080
                      },
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(10126)",
                        "Id": 10126
                      },
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(18166)",
                        "Id": 18166
                      },
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(10103)",
                        "Id": 10103
                      },
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(18174)",
                        "Id": 18174
                      },
                      {
                        "@odata.type": "#TemplateService.DeviceAttributeView",
                        "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                        "Name": "SystemSpecific",
                        "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(10081)",
                        "Id": 10081
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AttributeViewModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views({viewId})/DeviceAttributeViewDetails({deviceId})": {
      "get": {
        "description": "Returns the details for all attributes applicable to a specific template view.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:viewId",
            "required": true,
            "name": "viewId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the details for all attributes applicable to a specific template view.",
        "operationId": "13_TemplateService_9381",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceAttributeViewDetailExample": {
                    "value": {
                      "@odata.type": "#TemplateService.DeviceAttributeView",
                      "TemplateEditInfo": {
                        "Id": 1
                      },
                      "Description": "The hierarchy consists of unique system specific related component classes, groups (from the attribute registry) and attributes.",
                      "@odata.id": "/api/TemplateService/Templates(1)/Views(2)/DeviceAttributeViewDetails(10126)",
                      "@odata.context": "/api/$metadata#TemplateService.DeviceAttributeView",
                      "Id": 2,
                      "Name": "SystemSpecific"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Templates({templateId})/Views({viewId})/AttributeViewDetails/TemplateEditInfoDetails": {
      "get": {
        "description": "Returns the editable attributes of a specific view of a template.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:viewId",
            "required": true,
            "name": "viewId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Returns the editable attributes of a specific view of a template.",
        "operationId": "14_TemplateService_23",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/TemplateEditInfoModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/AttributeRegistryDetail": {
      "get": {
        "description": "Returns the attribute registry details.\n\nPrivilege: VIEW",
        "summary": "Returns the attribute registry details.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/TemplateEditInfoModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "15_TemplateService_5167"
      }
    },
    "/TemplateService/Actions/TemplateService.DeleteTemplates": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTemplateRequest"
              }
            }
          },
          "required": true,
          "description": "update DeleteTemplateRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes the specified templates.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "18_TemplateService_9994",
        "summary": "Deletes the specified templates."
      }
    },
    "/TemplateService/Actions/TemplateService.IsSocRunning": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateModel object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Gets the details if a task is in progress against the template.\n\nPrivilege: VIEW",
        "tags": [
          "TemplateService"
        ],
        "operationId": "20_TemplateService_2826",
        "summary": "Returns if a task is in progress against a template. "
      }
    },
    "/TemplateService/Actions/TemplateService.RefreshSummary": {
      "post": {
        "description": "Creates and runs a task to generate summary of compliance.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "summary": "Creates and runs a task to generate summary of compliance.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "21_TemplateService_8307"
      }
    },
    "/TemplateService/Actions/TemplateService.Clone": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateClone"
              }
            }
          },
          "required": true,
          "description": "update TemplateClone object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Clones a template and returns the ID of the cloned template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "22_TemplateService_3545",
        "summary": "Clones a template and returns the ID of the cloned template."
      }
    },
    "/TemplateService/Actions/TemplateService.Export": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateExport"
              }
            }
          },
          "required": true,
          "description": "update TemplateExport object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/TemplateExport"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Exports a template.\n\nPrivilege: VIEW",
        "tags": [
          "TemplateService"
        ],
        "operationId": "23_TemplateService_90",
        "summary": "Exports a template."
      }
    },
    "/TemplateService/Actions/TemplateService.Import": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateImport"
              }
            }
          },
          "required": true,
          "description": "update TemplateImport object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method creates a template from a specified configuration text in .XML format. The text is generally from an exported template file or an SCP file that is created from a device. The text must use the same structure as SCP files.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "24_TemplateService_7771",
        "summary": "Creates a template from a specified configuration text in SCP XML format."
      }
    },
    "/TemplateService/Actions/TemplateService.Deploy": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateDeployModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateDeployModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deploys a template to one or more target entities and returns the ID of the job created to do the deployment processing.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "25_TemplateService_9960",
        "summary": "Deploys a template to one or more target entities."
      }
    },
    "/TemplateService/Actions/TemplateService.AssignIdentities": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignIdentitiesRequest"
              }
            }
          },
          "required": true,
          "description": "update AssignIdentitiesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/AssignIdentitiesReply"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Reserves virtual identities for target devices based on the configuration in a specified template. Identities are reserved from the identity pool associated with the specified template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "26_TemplateService_5164",
        "summary": "Reserves virtual identities for target devices."
      }
    },
    "/TemplateService/Actions/TemplateService.GetAssignedIdentities": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAssignedIdentitiesRequest"
              }
            }
          },
          "required": true,
          "description": "update GetAssignedIdentitiesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAssignedIdentitiesExample": {
                    "value": {
                      "TemplateEditInfo": {
                        "Id": 1
                      },
                      "Description": "Hierarchy containing NIC and BIOS Network Settings and Boot Options",
                      "AttributeGroupNames": [],
                      "Name": "NetModel",
                      "Id": 5,
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [
                                {
                                  "SubAttributeGroups": [
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "Ethernet",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "MAC Address",
                                          "Description": "MAC Address",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "10:10:10:10:10:0E",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iSCSI",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "iSCSI IQN",
                                          "Description": "iSCSI IQN",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iqn.pool1.0000005",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 2,
                                      "Attributes": [
                                        {
                                          "AttributeEditInfoId": 0,
                                          "CustomId": 0,
                                          "AttributeId": 0,
                                          "Description": "",
                                          "DisplayName": "Protocol"
                                        }
                                      ]
                                    }
                                  ],
                                  "DisplayName": "Port",
                                  "GroupNameId": 1
                                }
                              ],
                              "DisplayName": "Integrated NIC 1",
                              "GroupNameId": 3001
                            }
                          ],
                          "DisplayName": "NICModel",
                          "GroupNameId": 1001
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Returns a list of virtual identities reserved for a specified target device. The reply also includes boot option attributes.\n\nPrivilege: VIEW",
        "tags": [
          "TemplateService"
        ],
        "operationId": "27_TemplateService_1821",
        "summary": "Returns a list of virtual identities for a specific target device."
      }
    },
    "/TemplateService/Actions/TemplateService.GetReservedIdentities": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetReservedIdentitiesRequest"
              }
            }
          },
          "required": true,
          "description": "update GetReservedIdentitiesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAssignedIdentitiesExample": {
                    "value": {
                      "TemplateEditInfo": {
                        "Id": 1
                      },
                      "Description": "Hierarchy containing NIC and BIOS Network Settings and Boot Options",
                      "AttributeGroupNames": [],
                      "Name": "NetModel",
                      "Id": 5,
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [
                                {
                                  "SubAttributeGroups": [
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "Ethernet",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "MAC Address",
                                          "Description": "MAC Address",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "10:10:10:10:10:0E",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iSCSI",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "iSCSI IQN",
                                          "Description": "iSCSI IQN",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iqn.pool1.0000005",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 2,
                                      "Attributes": [
                                        {
                                          "AttributeEditInfoId": 0,
                                          "CustomId": 0,
                                          "AttributeId": 0,
                                          "Description": "",
                                          "DisplayName": "Protocol"
                                        }
                                      ]
                                    }
                                  ],
                                  "DisplayName": "Port",
                                  "GroupNameId": 1
                                }
                              ],
                              "DisplayName": "Integrated NIC 1",
                              "GroupNameId": 3001
                            }
                          ],
                          "DisplayName": "NICModel",
                          "GroupNameId": 1001
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets reserved identities for a template ID and device ID.\n\nPrivilege: VIEW",
        "tags": [
          "TemplateService"
        ],
        "operationId": "28_TemplateService_5336",
        "summary": "Gets reserved identities for a template ID and device ID."
      }
    },
    "/TemplateService/Actions/TemplateService.GetTargetSpecificAttributes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetTargetSpecificAttributesRequest"
              }
            }
          },
          "required": true,
          "description": "update GetTargetSpecificAttributesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAssignedIdentitiesExample": {
                    "value": {
                      "TemplateEditInfo": {
                        "Id": 1
                      },
                      "Description": "Hierarchy containing NIC and BIOS Network Settings and Boot Options",
                      "AttributeGroupNames": [],
                      "Name": "NetModel",
                      "Id": 5,
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [
                                {
                                  "SubAttributeGroups": [
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "Ethernet",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "MAC Address",
                                          "Description": "MAC Address",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "10:10:10:10:10:0E",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iSCSI",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "iSCSI IQN",
                                          "Description": "iSCSI IQN",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iqn.pool1.0000005",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 2,
                                      "Attributes": [
                                        {
                                          "AttributeEditInfoId": 0,
                                          "CustomId": 0,
                                          "AttributeId": 0,
                                          "Description": "",
                                          "DisplayName": "Protocol"
                                        }
                                      ]
                                    }
                                  ],
                                  "DisplayName": "Port",
                                  "GroupNameId": 1
                                }
                              ],
                              "DisplayName": "Integrated NIC 1",
                              "GroupNameId": 3001
                            }
                          ],
                          "DisplayName": "NICModel",
                          "GroupNameId": 1001
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Retrieves the target specific attribute information based on the profile id.\n\nPrivilege: VIEW",
        "tags": [
          "TemplateService"
        ],
        "operationId": "29_TemplateService_7166",
        "summary": "Retrieves the target specific attribute information based on the profile id."
      }
    },
    "/TemplateService/Templates({templateId})/AttributeDetails": {
      "get": {
        "description": "Gets attributes for the view template or edit template, for a given template ID.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:templateId",
            "required": true,
            "name": "templateId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "Gets attributes for the view template or edit template, for a given template ID.",
        "operationId": "30_TemplateService_1212",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAssignedIdentitiesExample": {
                    "value": {
                      "TemplateEditInfo": {
                        "Id": 1
                      },
                      "Description": "Hierarchy containing NIC and BIOS Network Settings and Boot Options",
                      "AttributeGroupNames": [],
                      "Name": "NetModel",
                      "Id": 5,
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [
                                {
                                  "SubAttributeGroups": [
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "Ethernet",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "MAC Address",
                                          "Description": "MAC Address",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "10:10:10:10:10:0E",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 1,
                                      "Attributes": [
                                        {
                                          "DisplayName": "Protocol",
                                          "Description": "",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iSCSI",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        },
                                        {
                                          "DisplayName": "iSCSI IQN",
                                          "Description": "iSCSI IQN",
                                          "IsIgnored": false,
                                          "IsReadOnly": true,
                                          "Value": "iqn.pool1.0000005",
                                          "AttributeEditInfoId": 0,
                                          "AttributeId": 0,
                                          "CustomId": 0
                                        }
                                      ]
                                    },
                                    {
                                      "SubAttributeGroups": [],
                                      "DisplayName": "Partition",
                                      "GroupNameId": 2,
                                      "Attributes": [
                                        {
                                          "AttributeEditInfoId": 0,
                                          "CustomId": 0,
                                          "AttributeId": 0,
                                          "Description": "",
                                          "DisplayName": "Protocol"
                                        }
                                      ]
                                    }
                                  ],
                                  "DisplayName": "Port",
                                  "GroupNameId": 1
                                }
                              ],
                              "DisplayName": "Integrated NIC 1",
                              "GroupNameId": 3001
                            }
                          ],
                          "DisplayName": "NICModel",
                          "GroupNameId": 1001
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Actions/TemplateService.FreeReservedIdentities": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignIdentitiesRequest"
              }
            }
          },
          "required": true,
          "description": "update AssignIdentitiesRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method is used to free the reserved identities\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "31_TemplateService_1697",
        "summary": "This method is used to free the reserved identities"
      }
    },
    "/TemplateService/Actions/TemplateService.UpdateNetworkConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkConfigModel"
              }
            }
          },
          "required": true,
          "description": "update NetworkConfigModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method updates the network configuration parameters of a template.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "32_TemplateService_6362",
        "summary": "This method updates the network configuration parameters of a template."
      }
    },
    "/TemplateService/Actions/TemplateService.UpdateProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateDeployModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateDeployModel object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates device-specific attributes in server profiles.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "33_TemplateService_75",
        "summary": "Updates device-specific attributes in server profiles."
      }
    },
    "/TemplateService/Actions/TemplateService.MigrateProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateProfileModel"
              }
            }
          },
          "required": true,
          "description": "update MigrateProfileModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Migrates server profiles from one server to another. The system unassigns the identity from the server before the migration.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "34_TemplateService_8694",
        "summary": "Migrates server profiles from one server to another. The system unassigns the identity from the server before the migration."
      }
    },
    "/TemplateService/Actions/TemplateService.AttachProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateDeployModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateDeployModel object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method attaches a profile to a slot or device\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "35_TemplateService_5532",
        "summary": "This method attaches a profile to a slot or device"
      }
    },
    "/TemplateService/Actions/TemplateService.DetachProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachProfileModel"
              }
            }
          },
          "required": true,
          "description": "update DetachProfileModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Detach the Profile associated with a specified entity (chassis slot or compute).\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "36_TemplateService_7810",
        "summary": "Detach the Profile associated with a specified entity (chassis slot or compute)."
      }
    },
    "/TemplateService/Actions/TemplateService.AssociateProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssociateProfileModel"
              }
            }
          },
          "required": true,
          "description": "update AssociateProfileModel object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Associates a profile to a device\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "37_TemplateService_9867",
        "summary": "Associates a profile to a device"
      }
    },
    "/TemplateService/Actions/TemplateService.UploadConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigPayload"
              }
            }
          },
          "required": true,
          "description": "update DeviceConfigPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method uploads the device configurations\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "38_TemplateService_301",
        "summary": "This method uploads the device configurations"
      }
    },
    "/TemplateService/Actions/TemplateService.DownloadConfig": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigPayload"
              }
            }
          },
          "required": true,
          "description": "update DeviceConfigPayload object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "This method downloads the device configurations\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "TemplateService"
        ],
        "operationId": "39_TemplateService_5899",
        "summary": "This method downloads the device configurations"
      }
    },
    "/TemplateService/ProfileState": {
      "get": {
        "description": "Retrieves profile state information for all the profiles. Profile State indicates its functional state -- unassigned, assigned, or deployed.\n\nPrivilege: VIEW",
        "summary": "Retrieves profile state information for all the profiles.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileStatesExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.ProfileState",
                        "Id": 0,
                        "Name": "NotAssigned"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileState",
                        "Id": 1,
                        "Name": "Assigned"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileState",
                        "Id": 4,
                        "Name": "Deployed"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileStateModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "40_TemplateService_6376"
      }
    },
    "/TemplateService/ProfileUsage": {
      "get": {
        "description": "Gets the profile usage for all the profiles. Profile Usage indicates what is using the profile -- nothing (unassigned), a device (only), a slot (only), a slot and the device in the slot, or assigned for auto-deploy.\n\nPrivilege: VIEW",
        "summary": "Returns the profile usage for all the profiles.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileUsagesExample": {
                    "value": [
                      {
                        "@odata.type": "#TemplateService.ProfileUsage",
                        "Id": 0,
                        "Name": "NotAssigned"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileUsage",
                        "Id": 1,
                        "Name": "Device"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileUsage",
                        "Id": 2,
                        "Name": "SlotOnly"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileUsage",
                        "Id": 3,
                        "Name": "SlotAndDevice"
                      },
                      {
                        "@odata.type": "#TemplateService.ProfileUsage",
                        "Id": 4,
                        "Name": "AutoDeploy"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileUsageModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "41_TemplateService_1803"
      }
    },
    "/TemplateService/Actions/TemplateService.Remediate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceConfigRemediationRequestPayload"
              }
            }
          },
          "required": true,
          "description": "update DeviceConfigRemediationRequestPayload object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "42_TemplateService_6341",
        "summary": "POST call for TemplateService"
      }
    },
    "/TemplateService/Baselines": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigComplianceModel"
              }
            }
          },
          "required": true,
          "description": "update ConfigComplianceModel object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "43_TemplateService_7677",
        "summary": "POST call for TemplateService"
      },
      "get": {
        "description": "Dummy_Description",
        "summary": "GET call for TemplateService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "45_TemplateService_2954"
      }
    },
    "/TemplateService/Baselines(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigComplianceModel"
              }
            }
          },
          "required": true,
          "description": "update ConfigComplianceModel object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "44_TemplateService_8063",
        "summary": "PUT call for TemplateService"
      }
    },
    "/TemplateService/Baselines({baselineId})": {
      "get": {
        "description": "Dummy_Description",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "GET call for TemplateService",
        "operationId": "46_TemplateService_6457",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Actions/TemplateService.RemoveBaseline": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselineIdsList"
              }
            }
          },
          "required": true,
          "description": "update BaselineIdsList object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "47_TemplateService_739",
        "summary": "POST call for TemplateService"
      }
    },
    "/TemplateService/Actions/TemplateService.DeviceInventory": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TargetInventoryActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update TargetInventoryActionRequestPayloadModel object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "48_TemplateService_356",
        "summary": "POST call for TemplateService"
      }
    },
    "/TemplateService/Actions/TemplateService.ConfigSummary": {
      "post": {
        "description": "Dummy_Description",
        "summary": "POST call for TemplateService",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TemplateService"
        ],
        "operationId": "49_TemplateService_4054"
      }
    },
    "/TemplateService/Baselines({baselineId})/DeviceConfigComplianceReports": {
      "get": {
        "description": "Verifies whether all devices are running the required configuration by comparing the running parameters of the device against the best practice.\n\nNote that when the parameter is compliant (compliance status: 1), only the expected value is returned whereas when there is a mismatch (compliance status: 3), both the current value and the expected value are returned.",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-Id,DeviceName,IpAddress,IpAddresses,DeviceType,Model,ServiceTag,ComplianceStatus,InventoryTimeBegin,InventoryTimeEnd",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "DeviceName",
                "DeviceName desc",
                "IpAddress",
                "IpAddress desc",
                "IpAddresses",
                "IpAddresses desc",
                "DeviceType",
                "DeviceType desc",
                "Model",
                "Model desc",
                "ServiceTag",
                "ServiceTag desc",
                "ComplianceStatus",
                "ComplianceStatus desc",
                "InventoryTime",
                "InventoryTime desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "GET call for TemplateService",
        "operationId": "50_TemplateService_8460",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Baselines({baselineId})/DeviceConfigComplianceReports({deviceId})/DeviceComplianceDetails": {
      "get": {
        "description": "Verifies whether all devices are running the required configuration by comparing the running parameters of the device against the best practice.\n\nNote that when the parameter is compliant (compliance status: 1), only the expected value is returned whereas when there is a mismatch (compliance status: 3), both the current value and the expected value are returned.",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceId",
            "required": true,
            "name": "deviceId",
            "in": "path"
          }
        ],
        "tags": [
          "TemplateService"
        ],
        "summary": "GET call for TemplateService",
        "operationId": "51_TemplateService_4389",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TemplateService/Actions/TemplateService.CheckRebootRequiredAttribute": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateModel"
              }
            }
          },
          "required": true,
          "description": "update TemplateModel object"
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "description": "Dummy_Description",
        "tags": [
          "TemplateService"
        ],
        "operationId": "52_TemplateService_1644",
        "summary": "POST call for TemplateService"
      }
    },
    "/UpdateService": {
      "get": {
        "description": "Get all the endpoints for Update Services\n\nPrivilege: VIEW",
        "summary": "Get all the endpoints for Update Services",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "UpdateService"
        ],
        "operationId": "1_UpdateService_6176"
      }
    },
    "/UpdateService/Catalogs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogsModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogsModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CatalogsModel"
                  }
                }
              }
            },
            "description": "Created"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Creates a catalog. Make sure that the repository name does not exist already by checking the GET /UpdateService/Catalogs\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "3_UpdateService_1244",
        "summary": "Creates a catalog."
      },
      "get": {
        "description": "Returns all the catalogs that are created in the appliance.\n\nPrivilege: VIEW",
        "summary": "Returns all the catalogs that are created in the appliance.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CatalogsModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "UpdateService"
        ],
        "operationId": "2_UpdateService_7961"
      }
    },
    "/UpdateService/Catalogs(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogsModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogsModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CatalogsModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Updates details of a specific catalog.\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "4_UpdateService_1109",
        "summary": "Updates details of a specific catalog."
      }
    },
    "/UpdateService/Actions/UpdateService.CheckForUpdate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogsModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogsModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CatalogsModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Check for update\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "5_UpdateService_590",
        "summary": "Check for update."
      }
    },
    "/UpdateService/Actions/UpdateService.RemoveCatalogs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes a catalog.\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "6_UpdateService_3431",
        "summary": "Deletes a catalog."
      }
    },
    "/UpdateService/Actions/UpdateService.RefreshCatalogs": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Refreshes catalogs by checking for and downloading newer versions of catalogs.\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "7_UpdateService_183",
        "summary": "Refreshes catalogs by checking for and downloading newer versions of catalogs."
      }
    },
    "/UpdateService/Actions/UpdateService.RemoveBaselines": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselineActionRequestPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update BaselineActionRequestPayloadModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Deletes baselines.\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "8_UpdateService_9665",
        "summary": "Deletes baselines."
      }
    },
    "/UpdateService/Actions/UpdateService.GetSingleDupDetails": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleUpdatePayload"
              }
            }
          },
          "required": true,
          "description": "update SingleUpdatePayload object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "postGetSingleDupUpdateExample": {
                    "value": [
                      {
                        "RequiresReboot": true,
                        "PackageType": "LW64",
                        "DellVersion": "1.4.3",
                        "ReleaseDate": "2016-01-11 00:00:00.000",
                        "ReleaseId": "G1JD51.4.3",
                        "VendorVersion": "1.4.3",
                        "PackageId": "G1JD5X03-00",
                        "Date": "2016-01-12 02:37:36.000",
                        "SchemaVersion": "1.0",
                        "XmlGenVersion": "1.0.3681"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SingleUpdateResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the details of a specific DUP.\n\nPrivilege: DEVICE_UPDATE",
        "tags": [
          "UpdateService"
        ],
        "operationId": "9_UpdateService_6208",
        "summary": "Returns the details of a specific DUP."
      }
    },
    "/UpdateService/Actions/UpdateService.GetSingleDupReport": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleUpdateReportPayload"
              }
            }
          },
          "required": true,
          "description": "update SingleUpdateReportPayload object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SingleUpdateReportResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the report of a DUP.\n\nPrivilege: DEVICE_UPDATE",
        "tags": [
          "UpdateService"
        ],
        "operationId": "10_UpdateService_3503",
        "summary": "Returns the report of a DUP."
      }
    },
    "/UpdateService/Actions/UpdateService.GetCertDetails": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertificateCheckPayload"
              }
            }
          },
          "required": true,
          "description": "update CertificateCheckPayload object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "postGetCertificateDetailsExample": {
                    "value": [
                      {
                        "SignatureAlgorithmOid": "1.2.840.113549.1.1.5",
                        "SerialNumber": "1183094576064516206207594277304256693",
                        "Issuer": "ST=Texas, C=USA, O=Dell Inc., L=Round Rock, CN=OMEDEV-DAHIR",
                        "ValidityFrom": "Wed Sep 17 12:49:56 UTC 2014",
                        "PublicKey": "X.509",
                        "Version": "3",
                        "ValidityTo": "Tue Sep 18 12:49:56 UTC 2074",
                        "Subject": "ST=Texas, C=USA, O=Dell Inc., L=Round Rock, CN=OMEDEV-DAHIR",
                        "SignatureAlgorithm": "SHA1withRSA"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CertificateCheckResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns the details of a certificate.\n\nPrivilege: DEVICE_UPDATE",
        "tags": [
          "UpdateService"
        ],
        "operationId": "11_UpdateService_5516",
        "summary": "Returns the details of a certificate."
      }
    },
    "/UpdateService/Actions/UpdateService.UploadFile": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RemoveFilePayload"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Uploads a file.\n\nPrivilege: DEVICE_UPDATE",
        "tags": [
          "UpdateService"
        ],
        "operationId": "12_UpdateService_983",
        "summary": "Uploads a file."
      }
    },
    "/UpdateService/Actions/UpdateService.RemoveFile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveFilePayload"
              }
            }
          },
          "required": true,
          "description": "update RemoveFilePayload object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Removes a file identified by the numeric token ID.\n\nPrivilege: ['DEVICE_UPDATE', 'APPLIANCE_SETUP']",
        "tags": [
          "UpdateService"
        ],
        "operationId": "13_UpdateService_8616",
        "summary": "Removes a file identified by the numeric token ID."
      }
    },
    "/UpdateService/Actions/UpdateService.GetBaselinesForDevices": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselineActionRequestForDevicePayloadModel"
              }
            }
          },
          "required": true,
          "description": "update BaselineActionRequestForDevicePayloadModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Returns the firmware compliance for specific devices.\n\nPrivilege: ['VIEW', 'DEVICE_UPDATE']",
        "tags": [
          "UpdateService"
        ],
        "operationId": "14_UpdateService_3202",
        "summary": "Returns the firmware compliance for specific devices."
      }
    },
    "/UpdateService/Actions/UpdateService.GetBaselinesReportByDeviceids": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselineActionRequestByDeviceIdsPayloadModel"
              }
            }
          },
          "required": true,
          "description": "update BaselineActionRequestByDeviceIdsPayloadModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaselinesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Returns the baseline report for specific device IDs.\n\nPrivilege: ['VIEW', 'DEVICE_UPDATE']",
        "tags": [
          "UpdateService"
        ],
        "operationId": "15_UpdateService_6434",
        "summary": "Returns the baseline report for specific device IDs."
      }
    },
    "/UpdateService/Catalogs({catalogId})": {
      "get": {
        "description": "Returns the details of a specific catalog.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:catalogId",
            "required": true,
            "name": "catalogId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the details of a specific catalog.",
        "operationId": "16_UpdateService_7642",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CatalogsModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Actions/UpdateService.CheckBaselinesAssociation": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CatalogBaselinesAssociationModel"
              }
            }
          },
          "required": true,
          "description": "update CatalogBaselinesAssociationModel object"
        },
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Returns information about baseline associations.\n\nPrivilege: DEVICE_UPDATE",
        "tags": [
          "UpdateService"
        ],
        "operationId": "17_UpdateService_7500",
        "summary": "Returns information about baseline associations."
      }
    },
    "/UpdateService/Baselines": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselinesModel"
              }
            }
          },
          "required": true,
          "description": "update BaselinesModel object"
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaselinesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Create a baseline\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "18_UpdateService_3356",
        "summary": "Create a baseline"
      },
      "get": {
        "description": "Returns the baselines.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "ComponentComplianceReports"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the baselines.",
        "operationId": "20_UpdateService_5894",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Baselines(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BaselinesModel"
              }
            }
          },
          "required": true,
          "description": "update BaselinesModel object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaselinesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Update a baseline\n\nPrivilege: BASELINE_MANAGEMENT",
        "tags": [
          "UpdateService"
        ],
        "operationId": "19_UpdateService_5995",
        "summary": "Update a baseline"
      }
    },
    "/UpdateService/Baselines({baselineId})": {
      "get": {
        "description": "Returns details of a specific baseline.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns details of a specific baseline.",
        "operationId": "21_UpdateService_7668",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BaselinesModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/RollbackSoftwares": {
      "get": {
        "description": "Returns the software rollback information.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-DeviceId",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the software rollback information.",
        "operationId": "22_UpdateService_3950",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RollbackSoftwaresModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/RollbackSoftwares({id})": {
      "get": {
        "description": "Returns the software rollback information by Id\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:id",
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the software rollback information by Id",
        "operationId": "23_UpdateService_3270",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RollbackSoftwaresModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Baselines({complianceReportId})/DeviceComplianceReports": {
      "get": {
        "description": "Returns the compliance reports for a baseline. The compliance report includes the URIs,     /api/ UpdateService/Baselines(Id)/DeviceComplianceReports(Id)/ ComponentComplianceReports and /api/UpdateService/Baselines(Id)/     DeviceComplianceReports(Id)/ComponentComplianceReports(Id), by default.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:complianceReportId",
            "required": true,
            "name": "complianceReportId",
            "in": "path"
          },
          {
            "in": "query",
            "description": "Filter items by property values:-Id,DeviceId,ServiceTag,DeviceModel,DeviceTypeName,DeviceName,FirmwareStatus,DeviceTypeId,RebootRequired,ComponentComplianceReports/Name,ComponentComplianceReports/Version,ComponentComplianceReports/CurrentVersion,ComponentComplianceReports/ComplianceStatus,ComponentComplianceReports/RebootRequired,ComponentComplianceReports/ComponentType,DeviceFirmwareUpdateCapable,DeviceUserFirmwareUpdateCapable,ComplianceStatus",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Id",
                "Id desc",
                "DeviceId",
                "DeviceId desc",
                "ServiceTag",
                "ServiceTag desc",
                "DeviceModel",
                "DeviceModel desc",
                "DeviceTypeName",
                "DeviceTypeName desc",
                "DeviceName",
                "DeviceName desc",
                "FirmwareStatus",
                "FirmwareStatus desc",
                "ComplianceStatus",
                "ComplianceStatus desc",
                "DeviceTypeId",
                "DeviceTypeId desc",
                "RebootRequired",
                "RebootRequired desc",
                "ComponentType",
                "ComponentType desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the compliance report for a specific baseline. ",
        "operationId": "24_UpdateService_3322",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceReportByBaselineIdStoredProcedureExample": {
                    "value": {
                      "@odata.count": 1,
                      "value": [
                        {
                          "@odata.type": "#UpdateService.DeviceComplianceReport",
                          "ServiceTag": "C4XF1S2",
                          "DeviceTypeName": "CHASSIS",
                          "DeviceModel": "PowerEdge MX7000",
                          "DeviceName": "MX-C4XF1S2",
                          "FirmwareStatus": "Compliant",
                          "@odata.id": "/api/UpdateService/Baselines(8)/DeviceComplianceReports(3)",
                          "ComplianceStatus": "DOWNGRADE",
                          "DeviceTypeId": 2000,
                          "DeviceUserFirmwareUpdateCapable": true,
                          "DeviceId": 10065,
                          "RebootRequired": true,
                          "DeviceFirmwareUpdateCapable": true,
                          "Id": 3,
                          "ComponentComplianceReports": [
                            {
                              "@odata.type": "#UpdateService.ComponentComplianceReport",
                              "PrerequisiteInfo": "",
                              "Version": "1.10.20",
                              "Name": "OpenManage Enterprise Modular",
                              "Criticality": "Ok",
                              "ComplianceStatus": "DOWNGRADE",
                              "UpdateAction": "DOWNGRADE",
                              "ComplianceDependencies": [],
                              "Uri": "https://www.dell.com/support/home/us/en/19/Drivers/DriversDetails?driverId=DNPRF",
                              "UniqueIdentifier": "DNPRFLW64b88a30ab60cea39f90e05fce526effaa",
                              "ComponentType": "FIRMWARE",
                              "SourceName": "MM1",
                              "CurrentVersion": "master",
                              "TargetIdentifier": "106452",
                              "ImpactAssessment": "",
                              "Path": "FOLDER06115326M/1/Chassis-System-Management_Firmware_DNPRF_WN64_1.10.20_A00.EXE",
                              "RebootRequired": true,
                              "DependencyUpgradeRequired": false,
                              "Id": 4
                            },
                            {
                              "@odata.type": "#UpdateService.ComponentComplianceReport",
                              "PrerequisiteInfo": "",
                              "Version": "1.10.20",
                              "Name": "OpenManage Enterprise Modular",
                              "Criticality": "Ok",
                              "ComplianceStatus": "DOWNGRADE",
                              "UpdateAction": "DOWNGRADE",
                              "ComplianceDependencies": [],
                              "Uri": "https://www.dell.com/support/home/us/en/19/Drivers/DriversDetails?driverId=DNPRF",
                              "UniqueIdentifier": "DNPRFLW64b88a30ab60cea39f90e05fce526effaa",
                              "ComponentType": "FIRMWARE",
                              "SourceName": "MM2",
                              "CurrentVersion": "master",
                              "TargetIdentifier": "106452",
                              "ImpactAssessment": "",
                              "Path": "FOLDER06115326M/1/Chassis-System-Management_Firmware_DNPRF_WN64_1.10.20_A00.EXE",
                              "RebootRequired": true,
                              "DependencyUpgradeRequired": false,
                              "Id": 3
                            }
                          ]
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(UpdateService.DeviceComplianceReport)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceComplianceReportModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Baselines({baselineId})/DeviceComplianceReports({deviceReportId})": {
      "get": {
        "description": "Returns the details of a specific compliance report.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceReportId",
            "required": true,
            "name": "deviceReportId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the details of a specific compliance report.",
        "operationId": "25_UpdateService_2409",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceComplianceReportModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Baselines({complianceReportId})/DeviceComplianceReports({componentComplianceReportId})/ComponentComplianceReports": {
      "get": {
        "description": "Returns the component compliance report for a baseline.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:complianceReportId",
            "required": true,
            "name": "complianceReportId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:componentComplianceReportId",
            "required": true,
            "name": "componentComplianceReportId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Returns the component compliance report for a baseline.",
        "operationId": "26_UpdateService_6709",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getComplianceDeviceComponentReportByReportDeviceIdExample": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#UpdateService.ComponentComplianceReport",
                          "PrerequisiteInfo": "",
                          "Version": "1.10.20",
                          "Name": "OpenManage Enterprise Modular",
                          "Criticality": "Ok",
                          "ComplianceStatus": "DOWNGRADE",
                          "UpdateAction": "DOWNGRADE",
                          "ComplianceDependencies": [],
                          "@odata.id": "/api/UpdateService/Baselines(8)/DeviceComplianceReports(3)/ComponentComplianceReports(4)",
                          "UniqueIdentifier": "DNPRFLW64b88a30ab60cea39f90e05fce526effaa",
                          "ComponentType": "FIRMWARE",
                          "SourceName": "MM1",
                          "CurrentVersion": "master",
                          "RebootRequired": true,
                          "TargetIdentifier": "106452",
                          "ImpactAssessment": "",
                          "Path": "FOLDER06115326M/1/Chassis-System-Management_Firmware_DNPRF_WN64_1.10.20_A00.EXE",
                          "Uri": "https://www.dell.com/support/home/us/en/19/Drivers/DriversDetails?driverId=DNPRF",
                          "DependencyUpgradeRequired": false,
                          "Id": 4
                        },
                        {
                          "@odata.type": "#UpdateService.ComponentComplianceReport",
                          "PrerequisiteInfo": "",
                          "Version": "1.10.20",
                          "Name": "OpenManage Enterprise Modular",
                          "Criticality": "Ok",
                          "ComplianceStatus": "DOWNGRADE",
                          "UpdateAction": "DOWNGRADE",
                          "ComplianceDependencies": [],
                          "@odata.id": "/api/UpdateService/Baselines(8)/DeviceComplianceReports(3)/ComponentComplianceReports(3)",
                          "UniqueIdentifier": "DNPRFLW64b88a30ab60cea39f90e05fce526effaa",
                          "ComponentType": "FIRMWARE",
                          "SourceName": "MM2",
                          "CurrentVersion": "master",
                          "RebootRequired": true,
                          "TargetIdentifier": "106452",
                          "ImpactAssessment": "",
                          "Path": "FOLDER06115326M/1/Chassis-System-Management_Firmware_DNPRF_WN64_1.10.20_A00.EXE",
                          "Uri": "https://www.dell.com/support/home/us/en/19/Drivers/DriversDetails?driverId=DNPRF",
                          "DependencyUpgradeRequired": false,
                          "Id": 3
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(UpdateService.ComponentComplianceReport)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComponentComplianceReportModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/Baselines({baselineId})/DeviceComplianceReports({deviceReportId})/ComponentComplianceReports({componentReportId})": {
      "get": {
        "description": "Get all the list of Update Services\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:baselineId",
            "required": true,
            "name": "baselineId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:deviceReportId",
            "required": true,
            "name": "deviceReportId",
            "in": "path"
          },
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:componentReportId",
            "required": true,
            "name": "componentReportId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Summary for Update Service",
        "operationId": "27_UpdateService_9968",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComponentComplianceReportModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/ComplianceStatuses": {
      "get": {
        "description": " Returns compliance statuses.\n\nPrivilege: VIEW",
        "summary": " Returns compliance statuses.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSupportedComplianceStatusesExample": {
                    "value": [
                      {
                        "@odata.type": "#UpdateService.ComplianceStatus",
                        "StatusName": "OK",
                        "@odata.id": "/api/UpdateService/ComplianceStatuses(1)",
                        "StatusId": 1
                      },
                      {
                        "@odata.type": "#UpdateService.ComplianceStatus",
                        "StatusName": "DOWNGRADE",
                        "@odata.id": "/api/UpdateService/ComplianceStatuses(2)",
                        "StatusId": 2
                      },
                      {
                        "@odata.type": "#UpdateService.ComplianceStatus",
                        "StatusName": "WARNING",
                        "@odata.id": "/api/UpdateService/ComplianceStatuses(3)",
                        "StatusId": 3
                      },
                      {
                        "@odata.type": "#UpdateService.ComplianceStatus",
                        "StatusName": "CRITICAL",
                        "@odata.id": "/api/UpdateService/ComplianceStatuses(4)",
                        "StatusId": 4
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComplianceStatusResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "UpdateService"
        ],
        "operationId": "28_UpdateService_5245"
      }
    },
    "/UpdateService/ComplianceStatuses({statusId})": {
      "get": {
        "description": "Get all the list of Update Services\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:statusId",
            "required": true,
            "name": "statusId",
            "in": "path"
          }
        ],
        "tags": [
          "UpdateService"
        ],
        "summary": "Summary for Update Service",
        "operationId": "29_UpdateService_1904",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getSupportedComplianceStatusByIdExample": {
                    "value": [
                      {
                        "@odata.type": "#UpdateService.ComplianceStatus",
                        "StatusName": "OK",
                        "@odata.id": "/api/UpdateService/ComplianceStatuses(1)",
                        "StatusId": 1
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ComplianceStatusResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/UpdateService/DeviceComponentTypes": {
      "get": {
        "description": "Gets the device component types.\n\nPrivilege: VIEW",
        "summary": "Get Device Component Types",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getDeviceComponentTypeModel": {
                    "value": {
                      "@odata.count": 2,
                      "value": [
                        {
                          "@odata.type": "#UpdateService.DeviceComponentTypeModel",
                          "Description": "Out-of-band components",
                          "Id": 1,
                          "Name": "FIRMWARE"
                        },
                        {
                          "@odata.type": "#UpdateService.DeviceComponentTypeModel",
                          "Description": "In-band components",
                          "Id": 2,
                          "Name": "DRIVER"
                        }
                      ],
                      "@odata.context": "/api/$metadata#Collection(UpdateService.DeviceComponentTypeModel)"
                    }
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceComponentTypeModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "tags": [
          "UpdateService"
        ],
        "operationId": "30_UpdateService_6430"
      }
    },
    "/ProfileService": {
      "get": {
        "description": "This is a root service. It gets all the endpoints for Profile Services.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for Profile Services.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ProfileService"
        ],
        "operationId": "1_ProfileService_5331"
      }
    },
    "/ProfileService/Profiles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProfilesModel"
              }
            }
          },
          "required": true,
          "description": "update CreateProfilesModel object"
        },
        "responses": {
          "201": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Creates one or more profiles and returns a list of profile IDs.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "3_ProfileService_9226",
        "summary": "Creates one or more profiles."
      },
      "get": {
        "description": "Gets a list of profiles based on the filter parameters.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-ProfileName,TemplateName,TargetTypeId,TargetName,ChassisName,ProfileState,LastRunStatus,ProfileModified",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "ProfileName",
                "ProfileName desc",
                "TemplateName",
                "TemplateName desc",
                "TargetTypeId",
                "TargetTypeId desc",
                "TargetName",
                "TargetName desc",
                "ChassisName",
                "ChassisName desc",
                "ProfileState",
                "ProfileState desc",
                "LastRunStatus",
                "LastRunStatus desc",
                "ProfileModified",
                "ProfileModified desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "ProfileService"
        ],
        "summary": "Gets a list of profiles based on the filter parameters.",
        "operationId": "2_ProfileService_970",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ProfileService/Profiles({profileId})": {
      "delete": {
        "description": "Deletes a profile based on the profile ID passed as an argument.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:profileId",
            "required": true,
            "name": "profileId",
            "in": "path"
          }
        ],
        "tags": [
          "ProfileService"
        ],
        "summary": "Deletes a profile based on the profile ID passed as an argument.",
        "operationId": "5_ProfileService_602",
        "responses": {
          "204": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "description": "Retrieves a profile information based on the profile ID being passed as an argument.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:profileId",
            "required": true,
            "name": "profileId",
            "in": "path"
          }
        ],
        "tags": [
          "ProfileService"
        ],
        "summary": "Gets a profile based on the profile ID passed as an argument.",
        "operationId": "4_ProfileService_179",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {},
                "schema": {
                  "$ref": "#/components/schemas/ProfileModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ProfileService/Actions/ProfileService.Delete": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteProfileRequest"
              }
            }
          },
          "required": true,
          "description": "update DeleteProfileRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Deletes a set of profiles based on the request payload and returns a status. Only unassigned profiles will be deleted.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "6_ProfileService_991",
        "summary": "Deletes a set of profiles."
      }
    },
    "/ProfileService/Profiles({profileId})/AttributeDetails": {
      "get": {
        "description": "Gets attribute details for the given profile ID.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "format": "Int32"
            },
            "description": "key:profileId",
            "required": true,
            "name": "profileId",
            "in": "path"
          }
        ],
        "tags": [
          "ProfileService"
        ],
        "summary": "Retrieves the attribute information for a profile ID.",
        "operationId": "7_ProfileService_1002",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileViewEditAttributesExample": {
                    "value": {
                      "@odata.type": "#ProfileService.ProfileAttributeViewEditDetail",
                      "Description": "The hierarchy consists of profile specific related component classes, groups (from the attribute registry) and attributes for view profile or edit profile.",
                      "AttributeGroupNames": [],
                      "@odata.id": "/api/ProfileService/Profiles(10610)/AttributeDetails",
                      "@odata.context": "/api/$metadata#ProfileService.ProfileAttributeViewEditDetail",
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [],
                              "DisplayName": "Network Settings",
                              "GroupNameId": 20597,
                              "Attributes": [
                                {
                                  "IsSecure": false,
                                  "DisplayName": "iSCSI Device1",
                                  "Description": null,
                                  "IsIgnored": false,
                                  "IsReadOnly": false,
                                  "IsLinkedToSecure": false,
                                  "TargetSpecificTypeId": 2,
                                  "Value": "Disabled",
                                  "AttributeEditInfoId": 328,
                                  "AttributeId": 581,
                                  "CustomId": 0
                                }
                              ]
                            }
                          ],
                          "DisplayName": "BIOS",
                          "GroupNameId": 1,
                          "Attributes": []
                        }
                      ],
                      "Id": 11,
                      "Name": "ProfileViewEditAttributes"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/ProfileService/Actions/ProfileService.GetTargetSpecificAttributes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProfileTargetSpecificAttributesRequest"
              }
            }
          },
          "required": true,
          "description": "update GetProfileTargetSpecificAttributesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileViewEditAttributesExample": {
                    "value": {
                      "@odata.type": "#ProfileService.ProfileAttributeViewEditDetail",
                      "Description": "The hierarchy consists of profile specific related component classes, groups (from the attribute registry) and attributes for view profile or edit profile.",
                      "AttributeGroupNames": [],
                      "@odata.id": "/api/ProfileService/Profiles(10610)/AttributeDetails",
                      "@odata.context": "/api/$metadata#ProfileService.ProfileAttributeViewEditDetail",
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [],
                              "DisplayName": "Network Settings",
                              "GroupNameId": 20597,
                              "Attributes": [
                                {
                                  "IsSecure": false,
                                  "DisplayName": "iSCSI Device1",
                                  "Description": null,
                                  "IsIgnored": false,
                                  "IsReadOnly": false,
                                  "IsLinkedToSecure": false,
                                  "TargetSpecificTypeId": 2,
                                  "Value": "Disabled",
                                  "AttributeEditInfoId": 328,
                                  "AttributeId": 581,
                                  "CustomId": 0
                                }
                              ]
                            }
                          ],
                          "DisplayName": "BIOS",
                          "GroupNameId": 1,
                          "Attributes": []
                        }
                      ],
                      "Id": 11,
                      "Name": "ProfileViewEditAttributes"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets target specific attribute details for the given profile ID.\n\nPrivilege: VIEW",
        "tags": [
          "ProfileService"
        ],
        "operationId": "8_ProfileService_4433",
        "summary": "Retrieves the target specific attribute information based on the profile ID."
      }
    },
    "/ProfileService/Actions/ProfileService.AssignProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProfileRequest"
              }
            }
          },
          "required": true,
          "description": "update AssignProfileRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Assigns a profile to the target provided and returns a job ID.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "9_ProfileService_7354",
        "summary": "Assigns a profile to a target."
      }
    },
    "/ProfileService/Actions/ProfileService.AssignProfileForAutoDeploy": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignProfileAutoDeployRequest"
              }
            }
          },
          "required": true,
          "description": "update AssignProfileAutoDeployRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Assigns a profile to a given auto-deploy identifier.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "10_ProfileService_9591",
        "summary": "Assigns a profile to the auto-deploy identifier."
      }
    },
    "/ProfileService/Actions/ProfileService.UnassignProfiles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnassignProfilesRequest"
              }
            }
          },
          "required": true,
          "description": "update UnassignProfilesRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Unassigns profiles from their targets and returns a job ID.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "11_ProfileService_2850",
        "summary": "Unassigns profiles from their targets."
      }
    },
    "/ProfileService/Actions/ProfileService.MigrateProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateProfileRequest"
              }
            }
          },
          "required": true,
          "description": "update MigrateProfileRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API migrates a server profile from one server to another. The system unassigns the identity from the server before the migration. If the migration to the selected server fails, the system displays a critical error. However, you can override the error and force the migration to another server. This API returns a job ID.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "12_ProfileService_9984",
        "summary": "Migrates a profile from one device to another."
      }
    },
    "/ProfileService/Profiles(arg1)": {
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProfileUpdateModel"
              }
            }
          },
          "required": true,
          "description": "update ProfileUpdateModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Updates the profile information, such as name, description, attributes, and boot ISO. It returns a status indicating success/failure.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "ProfileService"
        ],
        "operationId": "13_ProfileService_1901",
        "summary": "Updates the profile information, such as name, description, attributes, and boot ISO."
      }
    },
    "/ProfileService/Actions/ProfileService.GetIdentityAttributes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetProfileIdentityAttributesRequest"
              }
            }
          },
          "required": true,
          "description": "update GetProfileIdentityAttributesRequest object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileViewEditAttributesExample": {
                    "value": {
                      "@odata.type": "#ProfileService.ProfileAttributeViewEditDetail",
                      "Description": "The hierarchy consists of profile specific related component classes, groups (from the attribute registry) and attributes for view profile or edit profile.",
                      "AttributeGroupNames": [],
                      "@odata.id": "/api/ProfileService/Profiles(10610)/AttributeDetails",
                      "@odata.context": "/api/$metadata#ProfileService.ProfileAttributeViewEditDetail",
                      "AttributeGroups": [
                        {
                          "SubAttributeGroups": [
                            {
                              "SubAttributeGroups": [],
                              "DisplayName": "Network Settings",
                              "GroupNameId": 20597,
                              "Attributes": [
                                {
                                  "IsSecure": false,
                                  "DisplayName": "iSCSI Device1",
                                  "Description": null,
                                  "IsIgnored": false,
                                  "IsReadOnly": false,
                                  "IsLinkedToSecure": false,
                                  "TargetSpecificTypeId": 2,
                                  "Value": "Disabled",
                                  "AttributeEditInfoId": 328,
                                  "AttributeId": 581,
                                  "CustomId": 0
                                }
                              ]
                            }
                          ],
                          "DisplayName": "BIOS",
                          "GroupNameId": 1,
                          "Attributes": []
                        }
                      ],
                      "Id": 11,
                      "Name": "ProfileViewEditAttributes"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AttributeViewDetailModel"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Retrieves the virtual identities associated with a profile ID.\n\nPrivilege: VIEW",
        "tags": [
          "ProfileService"
        ],
        "operationId": "14_ProfileService_8",
        "summary": "Retrieves the virtual identities associated with a profile ID."
      }
    },
    "/ProfileService/Actions/ProfileService.SyncProfiles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncProfilesRequest"
              }
            }
          },
          "required": true,
          "description": "update SyncProfilesRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Redeploy one or more profiles; can redeploy entire profiles or just the changes since the last deploy.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "15_ProfileService_9671",
        "summary": "Redeploy one or more profiles; can redeploy entire profiles or just the changes since the last deploy."
      }
    },
    "/ProfileService/Actions/ProfileService.Rename": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameProfileRequest"
              }
            }
          },
          "required": true,
          "description": "update RenameProfileRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Renames a profile. It returns 0 on success; otherwise, it will fail throwing a proper error message.\n\nPrivilege: ['TEMPLATE_MANAGEMENT', 'AUTO_DEPLOY_MANAGEMENT']",
        "tags": [
          "ProfileService"
        ],
        "operationId": "16_ProfileService_6698",
        "summary": "Renames a profile."
      }
    },
    "/ProfileService/ProfileStates": {
      "get": {
        "description": "Retrieves profile state information for all the profiles. Profile State indicates its functional state -- unassigned, assigned, or deployed.\n\nPrivilege: VIEW",
        "summary": "Retrieves profile state information for all the profiles.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileStatesExample": {
                    "value": [
                      {
                        "@odata.type": "#ProfileService.ProfileStates",
                        "Id": 0,
                        "Name": "NotAssigned"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileStates",
                        "Id": 1,
                        "Name": "Assigned"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileStates",
                        "Id": 4,
                        "Name": "Deployed"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileStateModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ProfileService"
        ],
        "operationId": "17_ProfileService_8426"
      }
    },
    "/ProfileService/Actions/ProfileService.GetInvalidTargetsForAssignProfile": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInvalidTargetsRequest"
              }
            }
          },
          "required": true,
          "description": "update GetInvalidTargetsRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets a list of device IDs which are already assigned to a profile, whose profile ID is different than the one passed in.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "ProfileService"
        ],
        "operationId": "18_ProfileService_3618",
        "summary": "This URI provides the invalid targets for assigning profiles."
      }
    },
    "/ProfileService/Actions/ProfileService.GetInvalidTargetsForDeployTemplate": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetInvalidTargetsRequest"
              }
            }
          },
          "required": true,
          "description": "update GetInvalidTargetsRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "Gets a list of device IDs which are assigned to a profile whose template ID is different than the one passed in.\n\nPrivilege: TEMPLATE_MANAGEMENT",
        "tags": [
          "ProfileService"
        ],
        "operationId": "19_ProfileService_8593",
        "summary": "This URI provides the invalid targets for template deployment."
      }
    },
    "/ProfileService/ProfileUsage": {
      "get": {
        "description": "Gets the profile usage for all the profiles. Profile Usage indicates what is using the profile -- nothing (unassigned), a device (only), a slot (only), a slot and the device in the slot, or assigned for auto-deploy.\n\nPrivilege: VIEW",
        "summary": "Returns the profile usage for all the profiles.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getProfileUsageExample": {
                    "value": [
                      {
                        "@odata.type": "#ProfileService.ProfileUsage",
                        "Id": 0,
                        "Name": "NotAssigned"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileUsage",
                        "Id": 1,
                        "Name": "Device"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileUsage",
                        "Id": 2,
                        "Name": "SlotOnly"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileUsage",
                        "Id": 3,
                        "Name": "SlotAndDevice"
                      },
                      {
                        "@odata.type": "#ProfileService.ProfileUsage",
                        "Id": 4,
                        "Name": "AutoDeploy"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProfileUsageModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "ProfileService"
        ],
        "operationId": "20_ProfileService_1930"
      }
    },
    "/MetricService": {
      "get": {
        "description": "Get all the endpoints for the Metric Service\n\nPrivilege: VIEW",
        "parameters": [
          {
            "description": "Expand related entities, see [OData Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand)",
            "schema": {
              "enum": [
                "*",
                "RegisteredPlugins"
              ],
              "type": "string"
            },
            "name": "$expand",
            "in": "query"
          }
        ],
        "tags": [
          "MetricService"
        ],
        "summary": "Get all the endpoints for the Metric Service",
        "operationId": "1_MetricService_4871",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/MetricService/MetricTypes": {
      "get": {
        "description": "Return the list of metric types\n\nPrivilege: VIEW",
        "summary": "Return the list of metric types",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "MetricService"
        ],
        "operationId": "2_MetricService_3347"
      }
    },
    "/MetricService/Actions/MetricService.ExtensionStatus": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsRequest"
              }
            }
          },
          "required": true,
          "description": "update MetricsRequest object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Set the metric request status\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "MetricService"
        ],
        "operationId": "3_MetricService_5252",
        "summary": "Set the metric request status"
      }
    },
    "/MetricService/Actions/MetricService.SaveThreshold": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Threshold"
              }
            }
          },
          "required": true,
          "description": "update Threshold object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Save or Update the entity threshold\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "MetricService"
        ],
        "operationId": "4_MetricService_1225",
        "summary": "Save or Update the entity threshold"
      }
    },
    "/MetricService/Actions/MetricService.DeleteThreshold": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThresholdDelete"
              }
            }
          },
          "required": true,
          "description": "update ThresholdDelete object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Delete threshold by Entity Ids and plugin id\n\nPrivilege: DEVICE_CONFIGURATION",
        "tags": [
          "MetricService"
        ],
        "operationId": "5_MetricService_848",
        "summary": "Delete threshold by Entity Ids and plugin id"
      }
    },
    "/MetricService/Actions/MetricService.SetConsoleSettings": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsoleSettings"
              }
            }
          },
          "required": true,
          "description": "update ConsoleSettings object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Set console settings for plugin\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "MetricService"
        ],
        "operationId": "6_MetricService_8463",
        "summary": "Set console settings for plugin"
      }
    },
    "/MetricService/Metrics": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQueryData"
              }
            }
          },
          "required": true,
          "description": "update MetricsQueryData object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getMetrics": {
                    "value": [
                      {
                        "EntityId": 10143,
                        "Value": [
                          {
                            "Timestamp": "2021-03-03 22:31:06.754674",
                            "Type": "1",
                            "ComponentId": null,
                            "Value": "7.0"
                          },
                          {
                            "Timestamp": "2021-03-03 22:31:06.754674",
                            "Type": "3",
                            "ComponentId": null,
                            "Value": "6.0"
                          },
                          {
                            "Timestamp": "2021-03-03 22:31:06.754674",
                            "Type": "2",
                            "ComponentId": null,
                            "Value": "6.0"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MetricsResult"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Get the list of metrics\n\nPrivilege: VIEW",
        "tags": [
          "MetricService"
        ],
        "operationId": "7_MetricService_3222",
        "summary": "Get the list of metrics"
      }
    },
    "/MetricService/EnergyConsumption": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsEnergyConsumptionQueryData"
              }
            }
          },
          "required": true,
          "description": "update MetricsEnergyConsumptionQueryData object"
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "energyConsumptionExample": {
                    "value": [
                      {
                        "TotalEnergy": "0.003",
                        "ComponentId": "0"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnergyConsumptionResult"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Get the Energy consumption information\n\nPrivilege: VIEW",
        "tags": [
          "MetricService"
        ],
        "operationId": "8_MetricService_4706",
        "summary": "Get the Energy consumption information"
      }
    },
    "/MetricService/MetricsConsumption": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsQueryData"
              }
            }
          },
          "required": true,
          "description": "update MetricsQueryData object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Get the Power metrics consumption information\n\nPrivilege: VIEW",
        "tags": [
          "MetricService"
        ],
        "operationId": "9_MetricService_5159",
        "summary": "Get the Power metrics consumption information"
      }
    },
    "/MetricService/Threshold": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Threshold"
              }
            }
          },
          "required": true,
          "description": "update Threshold object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Get the Entity Threshold information\n\nPrivilege: VIEW",
        "tags": [
          "MetricService"
        ],
        "operationId": "10_MetricService_5240",
        "summary": "Get the Entity Threshold information"
      }
    },
    "/MetricService/TopEnergyConsumption": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopEnergyConsumer"
              }
            }
          },
          "required": true,
          "description": "update TopEnergyConsumer object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          }
        },
        "description": "Get Top Energy Consumers\n\nPrivilege: VIEW",
        "tags": [
          "MetricService"
        ],
        "operationId": "11_MetricService_9133",
        "summary": "Get Top Energy Consumers"
      }
    },
    "/MetricService/TopOffenders": {
      "get": {
        "description": "Get list of top offenders\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-ThresholdType,EntityType,ViolationState",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "schema": {
              "enum": [
                "Id",
                "Id desc",
                "EntityId",
                "EntityId desc",
                "EntityType",
                "EntityType desc",
                "ThresholdType",
                "ThresholdType desc",
                "ViolationState",
                "ViolationState desc",
                "UpperCriticalViolations",
                "UpperCriticalViolations desc",
                "UpperWarningViolations",
                "UpperWarningViolations desc",
                "LowerCriticalViolations",
                "LowerCriticalViolations desc",
                "LowerWarningViolations",
                "LowerWarningViolations desc",
                "TotalViolations",
                "TotalViolations desc",
                "UpperCritical",
                "UpperCritical desc",
                "UpperWarning",
                "UpperWarning desc",
                "LowerCritical",
                "LowerCritical desc",
                "LowerWarning",
                "LowerWarning desc",
                "EntityName",
                "EntityName desc"
              ],
              "type": "string"
            },
            "description": "Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby)",
            "name": "$orderby",
            "in": "query"
          }
        ],
        "tags": [
          "MetricService"
        ],
        "summary": "Get list of top offenders",
        "operationId": "12_MetricService_3968",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getTopOffendersExample": {
                    "value": [
                      {
                        "@odata.count": 0,
                        "value": [],
                        "@odata.context": "/api/$metadata#Collection(MetricService.TopOffender)"
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ThresholdOffenderResponse"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TroubleshootService": {
      "get": {
        "description": "This is a root service. It gets all the endpoints for Troubleshoot service.\n\nPrivilege: VIEW",
        "summary": "Gets all the endpoints for Troubleshoot service.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "201": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "1_TroubleshootService_9835"
      }
    },
    "/TroubleshootService/Files": {
      "get": {
        "description": "This API returns TechSupport Report (TSR) or diagnostic log files.\n\nPrivilege: VIEW",
        "parameters": [
          {
            "in": "query",
            "description": "Filter items by property values:-DeviceId,DeviceOperation,JobId",
            "name": "$filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": [
          "TroubleshootService"
        ],
        "summary": "Gets TechSupport Report (TSR) or diagnostic log files.",
        "operationId": "2_TroubleshootService_4129",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "getAllTroubleshootFilesExample": {
                    "value": [
                      {
                        "@odata.type": "#TroubleshootService.FileResponseModel",
                        "FilePath": "/shared/dell/omc/cifs/idrac/tsr/D9WS753/SERVER_EXECUTE_TSR/D9WS753_1600893004360/D9WS753_1600893004360.zip",
                        "DeviceOperation": "SERVER_EXECUTE_TSR",
                        "FileName": "D9WS753_1600893004360.zip",
                        "DeviceId": 10078,
                        "JobId": 0
                      }
                    ]
                  }
                },
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FileResponseModel"
                  }
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        }
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.GetTroubleshootDocument": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileRequestModel"
              }
            }
          },
          "required": true,
          "description": "update FileRequestModel object"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "description": "This API extracts TSR/Diagnostic job report.\n\nPrivilege: VIEW",
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "3_TroubleshootService_2837",
        "summary": "Extracts TSR/Diagnostic job report."
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.GetArchivedConsoleLogs": {
      "post": {
        "description": "Gets the various service logs (TES, MS, EPS, Tomcat), zips them and returns the zip file.\n\nPrivilege: VIEW",
        "summary": "Retrieves the appliance service log files.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "4_TroubleshootService_6199"
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.DeleteArchivedConsoleLogs": {
      "post": {
        "description": "This method deletes all available archived console logs on the appliance. This method ensures no archived logs are present on the file system.\n\nPrivilege: VIEW",
        "summary": "Deletes all available archived console logs on the appliance.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          }
        },
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "5_TroubleshootService_9420"
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.GetFSDStatus": {
      "post": {
        "description": "This method returns the FSD status enabled via TUI.\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "Returns if the FSD state is enabled or disabled.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Error"
          }
        },
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "6_TroubleshootService_3472"
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.DownloadFSDDatFile": {
      "post": {
        "description": "This method downloads the FSD DAT file. This option is available when fsd is enabled via TUI.\n\nPrivilege: APPLIANCE_SETUP",
        "summary": "Downloads the DAT file when FSD is enabled.",
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          },
          "404": {
            "content": {},
            "description": "Not Found"
          },
          "500": {
            "content": {},
            "description": "Internal Error"
          }
        },
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "7_TroubleshootService_1057"
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.UploadFSDDatFile": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          },
          "500": {
            "content": {},
            "description": "Internal Error"
          }
        },
        "description": "Uploads a signed FSD Dat file.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "8_TroubleshootService_7031",
        "summary": "Uploads a signed Dat file."
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.UploadSSHPublicKey": {
      "post": {
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "filename": {
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "type": "array"
                  }
                }
              }
            }
          },
          "description": "The file to upload"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          },
          "500": {
            "content": {},
            "description": "Internal Error"
          }
        },
        "description": "Uploads a SSH public key file.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "9_TroubleshootService_2168",
        "summary": "Uploads a SSH public key file."
      }
    },
    "/TroubleshootService/Actions/TroubleshootService.GrantFSDFiles": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operationName": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Action parameter"
        },
        "responses": {
          "200": {
            "content": {},
            "description": "Success"
          },
          "400": {
            "content": {},
            "description": "Bad Request"
          },
          "401": {
            "content": {},
            "description": "Unauthorized"
          },
          "403": {
            "content": {},
            "description": "Forbidden"
          },
          "500": {
            "content": {},
            "description": "Internal Error"
          }
        },
        "description": "Installs and grants signed FSD files.\n\nPrivilege: APPLIANCE_SETUP",
        "tags": [
          "TroubleshootService"
        ],
        "operationId": "10_TroubleshootService_9786",
        "summary": "Installs and grants  signed files."
      }
    }
  },
  "openapi": "3.0.0",
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "scheme": "basic",
        "type": "http"
      }
    },
    "schemas": {
      "AlertModel": {
        "type": "object",
        "properties": {
          "SeverityName": {
            "type": "string",
            "description": "Name of severity."
          },
          "AlertDeviceGroup": {
            "type": "integer",
            "description": "Device groupId of alert.",
            "format": "int32"
          },
          "AlertDeviceAssetTag": {
            "type": "string",
            "description": "Asset tag of Device."
          },
          "AlertDeviceType": {
            "type": "integer",
            "description": "Device type if Device.",
            "format": "int64"
          },
          "AlertEntityType": {
            "type": "string",
            "description": "Type of alert."
          },
          "TimeStamp": {
            "type": "string",
            "description": "Device type ID."
          },
          "AlertMessageType": {
            "type": "string",
            "description": "Type of message—Internal, SNMP, Redfish, and so on"
          },
          "OriginOfCondition": {
            "type": "string",
            "description": "Origin of condition."
          },
          "AlertDeviceMacAddress": {
            "type": "string",
            "description": "MAC address of device."
          },
          "DefinitionId": {
            "type": "integer",
            "description": "ID of the definition associated to the alert.",
            "format": "int64"
          },
          "AlertDeviceIpAddress": {
            "type": "string",
            "description": "Device IP address of alert."
          },
          "RecommendedAction": {
            "type": "string",
            "description": "Recommended action for the alert"
          },
          "SkipStoreEvent": {
            "type": "boolean",
            "description": "skip store event."
          },
          "SeverityType": {
            "type": "integer",
            "description": "ID of severity.",
            "format": "int32"
          },
          "StatusName": {
            "type": "string",
            "description": "Name of status type"
          },
          "StatusType": {
            "type": "integer",
            "description": "ID of status type.",
            "format": "int32"
          },
          "CategoryId": {
            "type": "integer",
            "description": "Category ID associated to alert.",
            "format": "int32"
          },
          "CategoryName": {
            "type": "string",
            "description": "Category name associated to alert."
          },
          "AlertEntityName": {
            "type": "string",
            "description": "Name of alert."
          },
          "EemiMessage": {
            "type": "string",
            "description": "Event and Error Message describing the issue, if applicable."
          },
          "OrignalDeviceType": {
            "type": "integer",
            "description": "Device type of original device.",
            "format": "int64"
          },
          "MessageArgs": {
            "type": "string",
            "description": "Device type ID."
          },
          "SubCategoryId": {
            "type": "integer",
            "description": "Sub category ID associated to alert.",
            "format": "int32"
          },
          "AlertDeviceIdentifier": {
            "type": "string",
            "description": "Identifier of Device."
          },
          "AlertEntityId": {
            "type": "integer",
            "description": "Entity Id of alert.",
            "format": "int32"
          },
          "AlertMessageId": {
            "type": "string",
            "description": "Event and Alert Message ID associated with the issue"
          },
          "SubCategoryName": {
            "type": "string",
            "description": "Sub category name associated to alert."
          },
          "Message": {
            "type": "string",
            "description": "Date and time when the alert was raised."
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert.",
            "format": "int32"
          },
          "AlertVarBindDetails": {
            "type": "string",
            "description": "List of variable bindings of the alert, if applicable"
          },
          "CatalogName": {
            "type": "string",
            "description": "Catalog name associated to alert."
          }
        }
      },
      "ConfigComplianceModel": {
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string"
          },
          "BaselineTargets": {
            "items": {
              "$ref": "#/components/schemas/BaselineTarget"
            },
            "type": "array"
          },
          "Description": {
            "type": "string"
          },
          "TemplateName": {
            "type": "string"
          },
          "ConfigComplianceSummary": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ComplianceSummaryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "PercentageComplete": {
            "type": "string"
          },
          "TemplateType": {
            "type": "integer",
            "format": "int32"
          },
          "TaskId": {
            "type": "integer",
            "format": "int64"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "TaskStatus": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "CapabilityTypeModel": {
        "required": [
          "CapabilityId"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Capability type description"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner of the capability type",
            "format": "int32"
          },
          "CapabilityId": {
            "type": "integer",
            "description": "Capability type id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Capability type name"
          }
        }
      },
      "NetworkRequestPayload": {
        "type": "object",
        "properties": {
          "NetworkIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "NetworkRequestPayload"
      },
      "GroupDAOAttributeTypeValues": {
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with the group DAO attribute type values",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "description": "Indicates the group associated with the group DAO attribute type values",
            "format": "int32"
          },
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeTypeValue"
            },
            "type": "array",
            "description": "List of group DAO attribute types"
          }
        }
      },
      "InventoryDetail": {
        "type": "object",
        "properties": {
          "InventoryType": {
            "type": "string",
            "nullable": true
          },
          "InventoryInfo": {
            "items": {
              "$ref": "#/components/schemas/InventoryInfo"
            },
            "type": "array"
          }
        },
        "title": "InventoryDetail"
      },
      "InfrastructureDeviceReducedModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "ManagedState": {
            "type": "integer",
            "description": "Indicates the managed state of the reduced infrastructure device ",
            "format": "int32"
          },
          "SlotConfiguration": {
            "type": "object",
            "description": "Provided details of the reduced infrastructure device slot configuration"
          },
          "PowerState": {
            "type": "integer",
            "description": "Indicates the current power state of the reduced infrastructure device ",
            "format": "int32"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Indicates the chassis service tag associated with the reduced infrastructure device"
          },
          "AssetTag": {
            "type": "string",
            "description": "Reduced Infrastructure device asset tag"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Indicates if the reduced infrastructure device is enabled"
          },
          "SubSystemRollupStatus": {
            "items": {
              "$ref": "#/components/schemas/SubsystemRollupStatusReducedModel"
            },
            "type": "array",
            "description": "Indicates the sub system rollup status associated to the reduced infrastructure device"
          },
          "DeviceSoftware": {
            "items": {
              "$ref": "#/components/schemas/ReducedDeviceSoftwareModel"
            },
            "type": "array",
            "description": "Reduced Infrastructure device device software component details"
          },
          "SystemId": {
            "type": "integer",
            "description": "Reduced Infrastructure device system identifier",
            "format": "int32"
          },
          "DeviceFru": {
            "items": {
              "$ref": "#/components/schemas/DeviceFruModel"
            },
            "type": "array",
            "description": "Reduced Infrastructure device field replaceable unit information"
          },
          "Model": {
            "type": "string",
            "description": "Reduced Infrastructure device model"
          },
          "Identifier": {
            "type": "string",
            "description": "Reduced Infrastructure device identifier"
          },
          "Type": {
            "type": "integer",
            "description": "Reduced Infrastructure device type",
            "format": "int64"
          },
          "DeviceLicense": {
            "items": {
              "$ref": "#/components/schemas/DeviceLicenseModel"
            },
            "type": "array",
            "description": "Reduced Infrastructure device license details"
          },
          "LastStatusTime": {
            "type": "string",
            "description": "Indicates the last status time of the reduced infrastructure device"
          },
          "Status": {
            "type": "integer",
            "description": "Indicates the current status of the reduced infrastructure device ",
            "format": "int64"
          },
          "DeviceName": {
            "type": "string",
            "description": "Reduced Infrastructure device name"
          },
          "DeviceSpecificData": {
            "type": "object",
            "description": "Indicates additional or specific data of the reduced infrastructure device"
          },
          "InventoryDetails": {
            "items": {
              "$ref": "#/components/schemas/InventoryDetailsModel"
            },
            "type": "array",
            "description": "List of inventory details associated to the reduced infrastructure device"
          },
          "DeviceSubscription": {
            "description": "Reduced Infrastructure device subscription information",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceSubscriptionModel"
              }
            ]
          },
          "DeviceManagement": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementReducedModel"
            },
            "type": "array",
            "description": "List of device managements associated to the reduced infrastructure device"
          },
          "Editable": {
            "type": "boolean",
            "description": "Indicates if the reduced infrastructure device is editable"
          },
          "ConnectionStateReason": {
            "type": "integer",
            "description": "Indicates the associated connection state reason for the reduced infrastructure device. ",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Reduced Infrastructure device id",
            "format": "int32"
          },
          "ConnectionState": {
            "type": "boolean",
            "description": "Indicates the current connection state of the reduced infrastructure device "
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates if the reduced infrastructure device is visible"
          },
          "LastInventoryTime": {
            "type": "string",
            "description": "Indicates the last time the reduced infrastructure device was inventoried"
          },
          "DeviceServiceTag": {
            "type": "string",
            "description": "Reduced Infrastructure device service tag"
          }
        }
      },
      "WorkingSetRequest": {
        "type": "object",
        "properties": {
          "Ids": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Device Id(s) to be monitored by the Power Manager."
          }
        }
      },
      "SessionConfiguration": {
        "type": "object",
        "properties": {
          "MinSessionTimeout": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "MaxSessionsConfigurable": {
            "type": "boolean",
            "nullable": true
          },
          "MinSessionsAllowed": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SessionTimeout": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SessionTimeoutConfigurable": {
            "type": "boolean",
            "nullable": true
          },
          "MaxSessionsAllowed": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "MaxSessionTimeout": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SessionType": {
            "type": "string",
            "nullable": true
          },
          "MaxSessions": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "SessionConfiguration"
      },
      "snmpVersion": {
        "type": "object",
        "properties": {},
        "title": "snmpVersion"
      },
      "ManagedDevicesSummaryRespModel": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "type": "integer",
            "description": "Total count of the managed devices summary.",
            "format": "int32"
          },
          "PowerStatus": {
            "description": "Power Status count of the managed devices.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagedDevicesPowerSummaryModel"
              }
            ]
          },
          "ConnectedStatus": {
            "description": "Connection state count of the managed devices.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagedDevicesConnectionSummaryModel"
              }
            ]
          },
          "GlobalHealth": {
            "description": "Health Status count of the managed devices.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagedDevicesStatusSummaryModel"
              }
            ]
          }
        }
      },
      "GetInvalidTargetsRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerNetworksUpdateTemplateModel": {
        "type": "object",
        "properties": {
          "ServerInterfaceProfiles": {
            "items": {
              "$ref": "#/components/schemas/ServerInterfaceProfileRequestModel"
            },
            "type": "array",
            "description": "Server profile interfaces"
          }
        }
      },
      "ChassisTemperature": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "LowerThresholdCritical": {
            "type": "string"
          },
          "MemberId": {
            "type": "string"
          },
          "ReadingCelsius": {
            "type": "string"
          },
          "UpperThresholdNonCritical": {
            "type": "string"
          },
          "SensorNumber": {
            "type": "string"
          },
          "LowerThresholdNonCritical": {
            "type": "string"
          },
          "UpperThresholdCritical": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "SensorName": {
            "type": "string"
          }
        }
      },
      "DeviceTypeModel": {
        "required": [
          "DeviceType"
        ],
        "type": "object",
        "properties": {
          "Visible": {
            "type": "boolean",
            "description": "Indicates if the device type is visible"
          },
          "Internal": {
            "type": "boolean",
            "description": "Indicates if the device type is internal"
          },
          "DeviceType": {
            "type": "integer",
            "description": "Device type id",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Device type name"
          },
          "Description": {
            "type": "string",
            "description": "Device type description"
          }
        }
      },
      "GlobalExcludeDetailModel": {
        "type": "object",
        "properties": {
          "Subnet": {
            "type": "string",
            "description": "Subnet address."
          },
          "AddressType": {
            "type": "string",
            "description": "Address type of device."
          },
          "NetworkAddress": {
            "type": "string",
            "description": "Network address."
          },
          "HighIP": {
            "type": "string",
            "description": "Highest IP address."
          },
          "LoIP": {
            "type": "string",
            "description": "Lowest IP address."
          },
          "Id": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int64"
          }
        }
      },
      "PowerResponseModel": {
        "type": "object",
        "properties": {
          "SystemEnergyConsumptionTimeStamp": {
            "type": "string",
            "description": "Indicates the system energy consumption timestamp"
          },
          "MinimumPower": {
            "type": "string",
            "description": "Indicates the minimum power"
          },
          "MinimumPowerTimeStamp": {
            "type": "string",
            "description": "Indicates the last timestamp when power reach minimum"
          },
          "PeakPower": {
            "type": "string",
            "description": "Indicates the peak power"
          },
          "Power": {
            "type": "string",
            "description": "Power details"
          },
          "Since": {
            "type": "string",
            "description": "Initial power time"
          },
          "PeakHeadroom": {
            "type": "string",
            "description": "Power peak headroom"
          },
          "CurrentRedundancyState": {
            "type": "string",
            "description": "Indicates the power  current redundancy state"
          },
          "InstantaneousHeadroom": {
            "type": "string",
            "description": "Power instantaneous headroom"
          },
          "PeakPowerTimeStamp": {
            "type": "string",
            "description": "Indicates the last timestamp when power reached peak status"
          },
          "SystemEnergyConsumption": {
            "type": "string",
            "description": "Indicates the system power consumption details"
          }
        }
      },
      "SNMPConfigList": {
        "type": "object",
        "properties": {
          "SNMPConfiguration": {
            "items": {
              "$ref": "#/components/schemas/SNMPConfiguration"
            },
            "type": "array"
          }
        }
      },
      "ConsoleSetting": {
        "type": "object",
        "properties": {
          "GroupName": {
            "type": "string",
            "description": "Settings group name"
          },
          "Name": {
            "type": "string",
            "description": "Settings Name"
          },
          "DataType": {
            "type": "string",
            "description": "Data type of value"
          },
          "Encrypted": {
            "type": "boolean",
            "description": "encrypted"
          },
          "DefaultValue": {
            "type": "string",
            "description": "Default value of settings"
          },
          "Value": {
            "type": "string",
            "description": "Settings value"
          }
        }
      },
      "AuditCategory": {
        "type": "object",
        "properties": {
          "SubCategoryDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AuditSubCategory"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "CatalogName": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AuditCategory"
      },
      "AlertSNMPForwardModel": {
        "type": "object",
        "properties": {
          "SnmpEvent": {
            "description": "SNMP Event of alert.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertSNMPEventModel"
              }
            ]
          },
          "VarbindMapping": {
            "type": "string",
            "description": "Varbind mapping of alert."
          },
          "Id": {
            "type": "integer",
            "description": "Id of alert.",
            "format": "int64"
          },
          "Criteria": {
            "type": "string",
            "description": "Criteria of alert."
          }
        }
      },
      "PowerUsageByDeviceResponseModel": {
        "type": "object",
        "properties": {
          "Fabric": {
            "type": "string",
            "description": "Fabric details"
          },
          "DeviceName": {
            "type": "string",
            "description": "Indicates the device name associated withe the power usage"
          },
          "SlotNumber": {
            "type": "string",
            "description": "Indicates the device slot number associated with the power usage"
          },
          "Chassissubtype": {
            "type": "string",
            "description": "Indicates the chassis sub type associated with the power usage"
          },
          "PeakPower": {
            "type": "string",
            "description": "Indicates the peak power"
          },
          "Chassistype": {
            "type": "string",
            "description": "Indicates the type of chassis associated with the power usage"
          },
          "PowerConsumption": {
            "type": "string",
            "description": "Indicates the peak consumption"
          },
          "MinPower": {
            "type": "string",
            "description": "Indicates the minimal power"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated with power usage",
            "format": "int32"
          }
        }
      },
      "AttributeEditInfo": {
        "type": "object",
        "properties": {
          "ValueMin": {
            "format": "double",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "example": 3.14,
            "nullable": true
          },
          "IsSecure": {
            "type": "boolean",
            "nullable": true
          },
          "DefaultOptionId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DataType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DependencyText": {
            "type": "string",
            "nullable": true
          },
          "OptionSetId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IsReadOnly": {
            "type": "boolean",
            "nullable": true
          },
          "TextMaxLength": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GenericNameId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TextMinLength": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ValueMax": {
            "format": "double",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "example": 3.14,
            "nullable": true
          }
        },
        "title": "AttributeEditInfo"
      },
      "DeviceProtocolDataModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "ProfileId": {
            "type": "string",
            "description": "Indicates the profile associated to the device protocol data"
          },
          "ProtocolDataVal": {
            "type": "string",
            "description": "Device protocol data value"
          },
          "Id": {
            "type": "integer",
            "description": "Device protocol data id",
            "format": "int32"
          },
          "ProtocolDataKey": {
            "type": "string",
            "description": "Device protocol data key"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated to the device protocol data",
            "format": "int32"
          }
        }
      },
      "WarrantySetting": {
        "type": "object",
        "properties": {
          "SettingValue": {
            "type": "string",
            "description": "Value of warranty setting"
          },
          "Id": {
            "type": "integer",
            "description": "ID of warranty setting",
            "format": "int32"
          },
          "SettingName": {
            "type": "string",
            "description": "Name of warranty setting"
          }
        }
      },
      "DSCertificate": {
        "type": "object",
        "properties": {
          "ValidFrom": {
            "type": "string"
          },
          "DirectoryServerId": {
            "type": "integer",
            "format": "int32"
          },
          "SubjectCN": {
            "type": "string"
          },
          "ValidTo": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "IssuerCN": {
            "type": "string"
          }
        }
      },
      "ManagementTypeModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Management type description"
          },
          "Name": {
            "type": "string",
            "description": "Management type name"
          },
          "ManagementType": {
            "type": "integer",
            "description": "Management type id",
            "format": "int64"
          }
        }
      },
      "ResourceRequirementsMet": {
        "type": "object",
        "properties": {
          "Meets": {
            "type": "boolean"
          },
          "ErrorMessage": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ResourceRequirementsError"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "ResourceRequirementsMet"
      },
      "AlertMessageDefinitionCategoriesModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category of alert message definition."
          },
          "SubCategoriesDetails": {
            "items": {
              "$ref": "#/components/schemas/AlertMessageDefinitionSubCategoriesModel"
            },
            "type": "array",
            "description": "List of alert message definition subcategories."
          }
        }
      },
      "AlertStatusModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AlertCommonAttributesModel"
          },
          {
            "type": "object",
            "properties": {}
          }
        ]
      },
      "WarrantyCount": {
        "type": "object",
        "properties": {
          "NumberOfActiveWarranties": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ReportType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NumberOfExpiredWarranties": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NumberOfWarrantiesExpiringSoon": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "WarrantyCount"
      },
      "ColumnDef": {
        "type": "object",
        "properties": {
          "Width": {
            "format": "double",
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "example": 3.14,
            "nullable": true
          },
          "Sequence": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ColumnDef"
      },
      "DeleteList": {
        "type": "object",
        "properties": {
          "SessionIds": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "DeleteList"
      },
      "ValidVlans": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "VLANs": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/VLANModel"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "ValidVlans"
      },
      "AttributeModel": {
        "type": "object",
        "properties": {
          "IsSecure": {
            "type": "boolean"
          },
          "DisplayName": {
            "type": "string",
            "description": "ID of the attribute (e.g. Workload Profile)"
          },
          "Description": {
            "type": "string"
          },
          "IsIgnored": {
            "type": "boolean",
            "description": "Is the attribute ignored during template deployment and compliance checks."
          },
          "IsReadOnly": {
            "type": "boolean",
            "description": "Determines if the attribute has been marked as read only in the attribute registry."
          },
          "IsLinkedToSecure": {
            "type": "boolean"
          },
          "TargetSpecificTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Value of the attribute."
          },
          "AttributeEditInfoId": {
            "type": "integer",
            "format": "int32"
          },
          "AttributeId": {
            "type": "integer",
            "description": "ID of the attribute",
            "format": "int64"
          },
          "CustomId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CommonServerProfileTemplateModel": {
        "required": [
          "BondingTechnology"
        ],
        "type": "object",
        "properties": {
          "ServerInterfaceProfiles": {
            "items": {
              "$ref": "#/components/schemas/ServerInterfaceProfileRequestModel"
            },
            "type": "array",
            "description": "Server profile interfaces"
          },
          "BondingTechnology": {
            "type": "string",
            "description": "Indicates the NIC bonding technology that is configured for the server profile. Enables the NIC teaming type that you want to configure for a profile"
          }
        }
      },
      "ServerPowerSupply": {
        "type": "object",
        "properties": {
          "RequestedState": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "RatedMaxOutputPower": {
            "type": "integer",
            "format": "int32"
          },
          "State": {
            "type": "string"
          },
          "Location": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "SwitchingSupply": {
            "type": "boolean"
          },
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "InputPowerUnits": {
            "type": "string"
          },
          "RedundancyState": {
            "type": "string"
          },
          "OutputWatts": {
            "type": "integer",
            "format": "int32"
          },
          "Range1MaxInputPowerWatts": {
            "type": "integer",
            "format": "int32"
          },
          "OperationalStatus": {
            "type": "string"
          },
          "FirmwareVersion": {
            "type": "string"
          },
          "Range1MaxInputVoltageHighMilliVolts": {
            "type": "integer",
            "format": "int32"
          },
          "AcOutput": {
            "type": "boolean"
          },
          "PowerSupplyType": {
            "type": "integer",
            "format": "int32"
          },
          "InputVoltage": {
            "type": "integer",
            "format": "int32"
          },
          "AcInput": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ActiveInputVoltage": {
            "type": "string"
          },
          "Manufacturer": {
            "type": "string"
          }
        }
      },
      "FileRequestModel": {
        "type": "object",
        "properties": {
          "DeviceOperation": {
            "type": "string",
            "description": "Indicates either remote diagnostic or SupportAssist."
          },
          "FilePath": {
            "type": "string",
            "description": "Location where the file is stored."
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "JobId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OIDCAuthorizationServer": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "DiscoveryURI": {
            "type": "string",
            "description": "Discovery URI of the OpenID Server"
          },
          "UserName": {
            "type": "string",
            "description": "User name of OpenID Server"
          },
          "AuthType": {
            "type": "string",
            "description": "Authentication type for the OpenID Provider"
          },
          "Name": {
            "type": "string",
            "description": "Name of the OpenID Provider – The name must be unique for each OpenID Provider that is created"
          },
          "RegisteredBy": {
            "type": "string",
            "description": "RegisteredBy user or system information"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Enable flag to enable or disable OpenID Provider"
          },
          "ClientId": {
            "type": "string",
            "description": "Client ID of OpenID Provider"
          },
          "Token": {
            "type": "string",
            "description": "Initial access token of OpenID Server"
          },
          "RegistrationStatus": {
            "type": "string",
            "description": "RegistrationStatus of OpenID Provider"
          },
          "UniqueId": {
            "type": "string",
            "description": "UniqueId for the registered OpenID Provider"
          },
          "OIDCClientInfo": {
            "items": {
              "$ref": "#/components/schemas/OIDCClientInfo"
            },
            "type": "array"
          },
          "Password": {
            "type": "string",
            "description": "Password of OpenID Server"
          },
          "CertificateFile": {
            "type": "string",
            "description": "Certificate file for OpenID Provider registration"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConsoleUpdateCriteria": {
        "type": "object",
        "properties": {
          "VersionMaximum": {
            "type": "string",
            "description": "Maximum version which can be updated to latest available version."
          },
          "Note": {
            "type": "string",
            "description": "Notes to be taken care before upgrade."
          },
          "DirectUpgradeSupported": {
            "type": "boolean",
            "description": "Consoles can be updated directly to new version or need some dependency."
          },
          "VersionMinimum": {
            "type": "string",
            "description": "Minimum version which can be updated to latest available version."
          }
        }
      },
      "OperationResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status"
          }
        }
      },
      "JobTypeModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Internal": {
            "type": "boolean",
            "description": "Indicates whether the job is internal."
          },
          "Id": {
            "type": "integer",
            "description": "Id of the job type",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the job type"
          }
        }
      },
      "RegistrationStatusModel": {
        "type": "object",
        "properties": {
          "SiteName": {
            "type": "string",
            "description": "Site Name provided by customer."
          },
          "SerialNumber": {
            "type": "string",
            "description": "Serial number of the site."
          },
          "SiteId": {
            "type": "string",
            "description": "Unique identifier of the site."
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the registration."
          }
        }
      },
      "MIBEventDefinition": {
        "type": "object",
        "properties": {
          "EventCatalog": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventCatalog"
              }
            ]
          },
          "EventDefinitionId": {
            "type": "integer",
            "description": "Id of the event definition.",
            "format": "int64"
          },
          "EventSubCategory": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventSubCategory"
              }
            ]
          },
          "EventType": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventType"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Description of the event definition"
          },
          "Severity": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventSeverity"
              }
            ]
          },
          "EventCategory": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventCategory"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name of the event definition (e.g. alertSystemSoftwareEvent)"
          }
        }
      },
      "SyslogPriority": {
        "type": "object",
        "properties": {},
        "title": "SyslogPriority"
      },
      "GroupDevicesStatusSummary": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "StatusType": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "GroupDevicesStatusSummary"
      },
      "ConnectionStateReason": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "ConnectionStateReason"
      },
      "RepositoryModelType": {
        "type": "object",
        "properties": {},
        "title": "RepositoryModelType"
      },
      "InvalidVlans": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "nullable": true
          },
          "VLANs": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/VLANModel"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "MessageId": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "InvalidVlans"
      },
      "TemplateAttributeViewDetail": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AttributeGroupNames": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroupName"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "TemplateEditInfoDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TemplateEditInfo"
              }
            ],
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "TemplateAttributeViewDetail"
      },
      "EventSeverity": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "EventSeverity"
      },
      "AutoDeploy": {
        "type": "object",
        "properties": {
          "AutoDeployDevice": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AutoDeployDevices"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "AutoDeploy"
      },
      "EventDaoModel": {
        "type": "object",
        "properties": {
          "SeverityName": {
            "type": "string"
          },
          "AlertDeviceGroup": {
            "type": "integer",
            "format": "int32"
          },
          "AlertDeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertDeviceAssetTag": {
            "type": "string"
          },
          "AlertDeviceType": {
            "type": "integer",
            "format": "int64"
          },
          "AlertEntityType": {
            "type": "string"
          },
          "TimeStamp": {
            "type": "string"
          },
          "AlertMessageType": {
            "type": "string"
          },
          "AlertDeviceMacAddress": {
            "type": "string"
          },
          "DefinitionId": {
            "type": "integer",
            "format": "int64"
          },
          "AlertDeviceIpAddress": {
            "type": "string"
          },
          "RecommendedAction": {
            "type": "string"
          },
          "StatusName": {
            "type": "string"
          },
          "SeverityType": {
            "type": "integer",
            "format": "int32"
          },
          "StatusType": {
            "type": "integer",
            "format": "int32"
          },
          "CategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertDeviceName": {
            "type": "string"
          },
          "CategoryName": {
            "type": "string"
          },
          "AlertEntityName": {
            "type": "string"
          },
          "EemiMessage": {
            "type": "string"
          },
          "UserName": {
            "type": "string"
          },
          "MessageArgs": {
            "type": "string"
          },
          "SubCategoryId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertDeviceIdentifier": {
            "type": "string"
          },
          "AlertEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "AlertMessageId": {
            "type": "string"
          },
          "SubCategoryName": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "AlertVarBindDetails": {
            "type": "string"
          },
          "CatalogName": {
            "type": "string"
          }
        }
      },
      "PrivilegeType": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "PrivilegeType"
      },
      "ProfileUsageModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AttributeOptionSet": {
        "type": "object",
        "properties": {
          "OptionId": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "AttributeOptionSet"
      },
      "DiscoveryConfigGroupActionPayloadModel": {
        "type": "object",
        "properties": {
          "DiscoveryGroupIds": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of discovery configuration IDs to be processed."
          }
        }
      },
      "DataSyncHistoryModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category of the Data Sync"
          },
          "Status": {
            "type": "string",
            "description": "Status Data Sync"
          },
          "TimeStamp": {
            "type": "string",
            "description": "Tiemstamp of the  Data Sync"
          },
          "MessageId": {
            "type": "string",
            "description": "Message Id of Data Sync"
          },
          "DataSyncStartTime": {
            "type": "string",
            "description": "Start time of Data Sync"
          },
          "Message": {
            "type": "string",
            "description": "Message of Data Sync"
          },
          "DataSyncEndTime": {
            "type": "string",
            "description": "End time of Data Sync"
          },
          "Id": {
            "type": "integer",
            "description": "Id of the Data Sync History",
            "format": "int32"
          },
          "AdditionalDetails": {
            "type": "object",
            "description": "Additional Details of Data Sync"
          }
        }
      },
      "IPv6StaticAddress": {
        "type": "object",
        "properties": {
          "PrefixLength": {
            "items": {
              "$ref": "#/components/schemas/PrefixLength"
            },
            "type": "array"
          },
          "Oem": {
            "items": {
              "$ref": "#/components/schemas/Oem"
            },
            "type": "array"
          },
          "Address": {
            "type": "string",
            "description": "IPv6 static address."
          }
        }
      },
      "SignalNodeModel": {
        "required": [
          "ServiceTag",
          "RedfishPort",
          "WebSSLCertificate"
        ],
        "type": "object",
        "properties": {
          "Ipv6Addresses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of IPv6 address that can be used."
          },
          "ServiceTag": {
            "type": "string",
            "description": "Service tag of the server."
          },
          "Ipv4Addresses": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of IPv4 address that can be used."
          },
          "WebSSLCertificate": {
            "type": "string",
            "description": "SSL certificate of the server."
          },
          "RedfishPort": {
            "type": "integer",
            "description": "Port to be used to connect to server.",
            "format": "int32"
          }
        }
      },
      "AssociatedBaseline": {
        "type": "object",
        "properties": {
          "BaselineName": {
            "type": "string",
            "nullable": true
          },
          "BaselineId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "AssociatedBaseline"
      },
      "FabricRequestModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/FabricModel"
          },
          {
            "type": "object",
            "properties": {
              "ValidationErrors": {
                "items": {
                  "$ref": "#/components/schemas/ValidationErrorsModel"
                },
                "type": "array"
              },
              "FabricDesign": {
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/FabricDesignModel"
                },
                "type": "array",
                "maxItems": 1
              },
              "UpLinks": {
                "items": {
                  "$ref": "#/components/schemas/UplinkModel"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "SMTPConfiguration": {
        "type": "object",
        "properties": {
          "Credential": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credential"
            }
          },
          "DestinationAddress": {
            "type": "string",
            "description": "Destination address.",
            "maxLength": 255
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Use SSL."
          },
          "UseCredentials": {
            "type": "boolean",
            "description": "Use credentials."
          }
        }
      },
      "QueryContextDetail": {
        "type": "object",
        "properties": {
          "Tables": {
            "items": {
              "$ref": "#/components/schemas/tables"
            },
            "type": "array",
            "description": "Tables of query context"
          },
          "BaseCategoryId": {
            "type": "integer",
            "description": "Base category id of query context",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of query context"
          },
          "Fields": {
            "items": {
              "$ref": "#/components/schemas/fields"
            },
            "type": "array",
            "description": "Fields of query context"
          },
          "ReportSettings": {
            "items": {
              "$ref": "#/components/schemas/reportSettings"
            },
            "type": "array",
            "description": "Report settings of query context"
          },
          "Id": {
            "type": "integer",
            "description": "ID of query context",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of query context"
          }
        }
      },
      "LicensingTypeModel": {
        "required": [
          "LicenseId"
        ],
        "type": "object",
        "properties": {
          "LicenseId": {
            "type": "integer",
            "description": "Licensing type id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Licensing type name"
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "nullable": true
          },
          "GlobalStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "nullable": true
          },
          "MembershipTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DefinitionDescription": {
            "type": "string",
            "nullable": true
          },
          "HasAttributes": {
            "type": "boolean",
            "nullable": true
          },
          "SubGroups": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "TypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DeviceStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/StatusSummary"
            },
            "type": "array"
          },
          "GroupDevicesSummary": {
            "items": {
              "$ref": "#/components/schemas/GroupDevicesSummary"
            },
            "type": "array"
          },
          "AllLeafDeviceSummaries": {
            "items": {
              "$ref": "#/components/schemas/DeviceMinModel"
            },
            "type": "array"
          },
          "IdOwner": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AllLeafDevices": {
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "type": "array"
          },
          "DefinitionId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupQuery": {
            "items": {
              "$ref": "#/components/schemas/QueryCondition"
            },
            "type": "array"
          },
          "ParentId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EventSeveritySummary": {
            "items": {
              "$ref": "#/components/schemas/StatusSummary"
            },
            "type": "array"
          },
          "GroupHierarchy": {
            "items": {
              "$ref": "#/components/schemas/GroupHierarchy"
            },
            "type": "array"
          },
          "IsAccessAllowed": {
            "type": "boolean",
            "nullable": true
          },
          "EventStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/StatusSummary"
            },
            "type": "array"
          },
          "Visible": {
            "type": "boolean",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Group"
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "ValidFrom": {
            "type": "string"
          },
          "DirectoryServerId": {
            "type": "integer",
            "format": "int32"
          },
          "SubjectCN": {
            "type": "string"
          },
          "ValidTo": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "IssuerCN": {
            "type": "string"
          }
        }
      },
      "TemplateClone": {
        "required": [
          "SourceTemplateId",
          "NewTemplateName"
        ],
        "type": "object",
        "properties": {
          "SourceTemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "ViewTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "NewTemplateName": {
            "type": "string"
          }
        }
      },
      "OIDCTaskHelperModel": {
        "type": "object",
        "properties": {
          "AuditUserName": {
            "type": "string"
          },
          "ConfigParamType": {
            "type": "string"
          },
          "AuditIpAddress": {
            "type": "string"
          }
        }
      },
      "AttributeViewModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "AttributeViewDetail": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AttributeViewDetailModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the attribute view - Template Specific/System Specific"
          }
        }
      },
      "DeviceModels": {
        "type": "object",
        "properties": {
          "Models": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of device models."
          }
        }
      },
      "MultipleSyslogSettings": {
        "type": "object",
        "properties": {
          "SimpleSyslogSettings": {
            "items": {
              "$ref": "#/components/schemas/SimpleSyslogSettings"
            },
            "type": "array",
            "description": "List of syslog settings."
          }
        }
      },
      "Health": {
        "enum": [
          "OK",
          "Warning",
          "Critical"
        ],
        "type": "string",
        "title": "Health"
      },
      "DeviceBladeSlots": {
        "type": "object",
        "title": "DeviceBladeSlots"
      },
      "SocStatus": {
        "type": "object",
        "title": "SocStatus"
      },
      "DeviceSettingsMetadata": {
        "type": "object",
        "title": "DeviceSettingsMetadata"
      },
      "HostDetail": {
        "type": "object",
        "properties": {
          "Host": {
            "type": "string",
            "description": "Host."
          }
        }
      },
      "DeviceCredentialMapModel": {
        "type": "object",
        "properties": {
          "CredentialId": {
            "type": "integer",
            "description": "Indicates the credential id associated to the device credentials",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated to the device credentials",
            "format": "int32"
          },
          "OperationType": {
            "type": "string",
            "description": "Indicates the type of operation for the device credentials"
          }
        }
      },
      "AnnouncedTargetRequest": {
        "required": [
          "ServiceTag",
          "UserName",
          "Password"
        ],
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "Username to connect to the server."
          },
          "ServiceTag": {
            "type": "string",
            "description": "Service tag of the server."
          },
          "Password": {
            "type": "string",
            "description": "Password to connect to the server."
          },
          "CredentialType": {
            "type": "string",
            "description": "Type of the credential."
          }
        }
      },
      "DeleteSyslogSettings": {
        "type": "object",
        "properties": {
          "SyslogsToDelete": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of syslog IDs."
          }
        }
      },
      "GroupAttributeValidationInteger": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer",
            "description": "Group attribute validation integer max",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group attribute validation integer id",
            "format": "int32"
          },
          "Min": {
            "type": "integer",
            "description": "Group attribute validation integer name",
            "format": "int32"
          }
        }
      },
      "ProfileReducedAttributeModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "IsIgnored": {
            "type": "boolean",
            "description": "Indicates whether or not attributes will be deployed (true = don't deploy, false = deploy)"
          }
        }
      },
      "VlanValidationReportModel": {
        "type": "object",
        "properties": {
          "Failure": {
            "items": {
              "$ref": "#/components/schemas/InvalidVlansModel"
            },
            "type": "array"
          },
          "Success": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ValidVlansModel"
              }
            ]
          }
        }
      },
      "reportSettings": {
        "type": "object",
        "properties": {
          "Required": {
            "type": "boolean",
            "description": "Required"
          },
          "Description": {
            "type": "string",
            "description": "Description of report setting"
          },
          "FieldTypeId": {
            "type": "integer",
            "description": "Field type id of report setting",
            "format": "int32"
          },
          "EnumOpts": {
            "items": {
              "$ref": "#/components/schemas/enumOpts"
            },
            "type": "array",
            "description": "EnumOpts of report setting"
          },
          "DefaultValue": {
            "type": "integer",
            "description": "Default value of report setting",
            "format": "int32"
          },
          "StrMaxLen": {
            "type": "integer",
            "description": "Length of report setting",
            "format": "int32"
          },
          "FieldIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Field IDs of report setting"
          },
          "Id": {
            "type": "integer",
            "description": "ID of report setting",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of report setting"
          }
        }
      },
      "VersionDetailsModel": {
        "type": "object",
        "properties": {
          "BuildNumber": {
            "type": "integer",
            "description": "Build number.",
            "format": "int32"
          },
          "VersionMinor": {
            "type": "string",
            "description": "Minor version."
          },
          "VersionRelease": {
            "type": "string",
            "description": "Release version."
          },
          "BuildDate": {
            "type": "string",
            "description": "Build date.",
            "format": "date-time"
          },
          "SubcomponentCount": {
            "type": "integer",
            "description": "Subcomponent count.",
            "format": "int32"
          },
          "ComponentName": {
            "type": "string",
            "description": "Component name."
          },
          "Subcomponent": {
            "items": {
              "$ref": "#/components/schemas/VersionDetailModel"
            },
            "type": "array",
            "description": "List of subcomponents."
          },
          "IpAddress": {
            "type": "string",
            "description": "IP address."
          },
          "VersionMajor": {
            "type": "string",
            "description": "Major version."
          }
        }
      },
      "SessionContextModel": {
        "type": "object",
        "properties": {
          "SessionContext": {
            "type": "string",
            "description": "The session context information."
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the session."
          }
        }
      },
      "PrivilegeResponseModel": {
        "type": "object",
        "properties": {
          "Usercontext": {
            "description": "User context of a privilege response ",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/UserContext"
              }
            ]
          }
        }
      },
      "operators": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of operator",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of operator"
          }
        }
      },
      "VirtualSessionModel": {
        "type": "object",
        "properties": {
          "CurrentPlugin": {
            "type": "string",
            "description": "Current plugin name."
          },
          "ConsoleUrl": {
            "type": "string",
            "description": "Console URL."
          }
        }
      },
      "SMTPRecipient": {
        "type": "object",
        "properties": {
          "Recipient": {
            "type": "string",
            "description": "Recipient information."
          },
          "Enabled": {
            "type": "boolean",
            "description": "SMTP recipient is enabled."
          },
          "Id": {
            "type": "string",
            "description": "SMTP Recipient ID."
          }
        }
      },
      "BaselineIdsList": {
        "type": "object",
        "properties": {
          "BaselineIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "BaselineIdsList"
      },
      "PluginsResModel": {
        "type": "object",
        "properties": {
          "Compatible": {
            "type": "boolean",
            "description": "Indicates if plugin is compatible"
          },
          "Id": {
            "type": "string",
            "description": "Plugin id"
          }
        }
      },
      "JobTypesResponseModel": {
        "type": "object",
        "properties": {
          "JobTypes": {
            "items": {
              "$ref": "#/components/schemas/JobTypeModel"
            },
            "type": "array"
          }
        }
      },
      "GroupInfoList": {
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "string",
            "description": "Group Id"
          },
          "Devices": {
            "description": "List of metric devices",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MetricsDeviceModel"
              }
            ]
          }
        }
      },
      "DeleteProfileRequest": {
        "type": "object",
        "properties": {
          "SelectAll": {
            "type": "boolean"
          },
          "ProfileIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "Filters": {
            "type": "string"
          }
        }
      },
      "ManagementProfile": {
        "type": "object",
        "properties": {
          "ManagementProfileId": {
            "type": "integer",
            "format": "int64"
          },
          "Status": {
            "type": "integer",
            "format": "int64"
          },
          "StatusDateTime": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "AgentName": {
            "type": "string"
          },
          "ProfileId": {
            "type": "string"
          },
          "HasCreds": {
            "type": "integer",
            "format": "int32"
          },
          "ManagementUrl": {
            "type": "string"
          }
        }
      },
      "ReportResultRowModel": {
        "type": "object",
        "properties": {
          "Report_result_id": {
            "type": "integer",
            "description": "Report result ID",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report result row ID",
            "format": "int32"
          },
          "RowValues": {
            "type": "string",
            "description": "Row values"
          }
        }
      },
      "DeviceIdsList": {
        "type": "object",
        "properties": {
          "DeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of device Ids."
          }
        }
      },
      "StatusSummary": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "StatusType": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "StatusSummary"
      },
      "MoveDeviceRequest": {
        "required": [
          "EntityId",
          "FromGroup",
          "ToGroup"
        ],
        "type": "object",
        "properties": {
          "FromGroup": {
            "type": "integer",
            "description": "FromGroup",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "description": "EntityId",
            "format": "int32"
          },
          "ToGroup": {
            "type": "integer",
            "description": "ToGroup",
            "format": "int32"
          }
        }
      },
      "GetProfileIdentityAttributesRequest": {
        "required": [
          "ProfileId"
        ],
        "type": "object",
        "properties": {
          "ProfileId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConfigComplianceStatusSummaryResponse": {
        "type": "object",
        "properties": {
          "ConfigComplianceStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/ConfigComplianceStatusSummary"
            },
            "type": "array"
          }
        }
      },
      "CommonServerProfileModel": {
        "type": "object",
        "properties": {
          "ServerProfile": {
            "description": "Server profiles",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommonServerProfileTemplateModel"
              }
            ]
          },
          "ServersServiceTag": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of compute service tags to modify profile interfaces"
          }
        }
      },
      "DeviceUnitSizeSupportedResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "boolean"
          },
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/DeviceUnitSizeSupportedStatus"
            },
            "type": "array"
          }
        }
      },
      "BaselineTargetType": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "BaselineTargetType"
      },
      "TargetTypeModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID for the device type. DeviceType IDs can be determined through /API/DeviceService/DeviceType",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Type of the target (DEVICE or GROUP)"
          }
        }
      },
      "ServerStorageEnclosureModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Status of server storage enclosure.",
            "format": "int32"
          },
          "MediaType": {
            "type": "string",
            "description": "Media type of server storage enclosure."
          },
          "Version": {
            "type": "string",
            "description": "Version of server storage enclosure."
          },
          "Name": {
            "type": "string",
            "description": "Name of server storage enclosure."
          },
          "Fqdd": {
            "type": "string",
            "description": "FQDD of server storage enclosure."
          },
          "InstanceId": {
            "type": "string",
            "description": "Instance Id of server storage enclosure."
          },
          "Number": {
            "type": "string",
            "description": "Number of server storage enclosure."
          },
          "NumberOfFanPacks": {
            "type": "integer",
            "description": "Number of fan packs.",
            "format": "int32"
          },
          "BackplanePartNum": {
            "type": "string",
            "description": "Back plane part number."
          },
          "ChannelNumber": {
            "type": "string",
            "description": "Channel number of server storage enclosure."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "SlotCount": {
            "type": "integer",
            "description": "Slot count of server storage enclosure.",
            "format": "int32"
          },
          "StatusTypeString": {
            "type": "string",
            "description": "Status type of server storage enclosure."
          },
          "RollupStatus": {
            "type": "integer",
            "description": "Rollup status of server storage enclosure.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server storage enclosure.",
            "format": "int32"
          }
        }
      },
      "DeviceLocationModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Datacenter": {
            "type": "string",
            "description": "Device location datacenter information"
          },
          "Rackslot": {
            "type": "string",
            "description": "Device location rack slot information"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the location",
            "format": "int32"
          },
          "Aisle": {
            "type": "string",
            "description": "Device location aisle information"
          },
          "ManagementSystemUnit": {
            "type": "integer",
            "description": "Indicates the unit used for the managed system",
            "format": "int32"
          },
          "Room": {
            "type": "string",
            "description": "Device location room information"
          },
          "Rack": {
            "type": "string",
            "description": "Device location rack information"
          },
          "Id": {
            "type": "integer",
            "description": "Device location id",
            "format": "int64"
          }
        }
      },
      "MemberDevice": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "SlotNumber": {
            "type": "integer",
            "description": "SlotNumber",
            "format": "int32"
          }
        }
      },
      "ServerStorageEnclosureCollectionModel": {
        "type": "object",
        "properties": {
          "ServerStorageEnclosures": {
            "items": {
              "$ref": "#/components/schemas/ServerStorageEnclosureModel"
            },
            "type": "array",
            "description": "List of server storage enclosures."
          }
        }
      },
      "ServerProcessorCollectionModel": {
        "type": "object",
        "properties": {
          "Processors": {
            "items": {
              "$ref": "#/components/schemas/ServerProcessorModel"
            },
            "type": "array",
            "description": "List of server processors."
          }
        }
      },
      "GlobalExcludeIdsList": {
        "type": "object",
        "properties": {
          "GlobalExcludeIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of device Ids."
          }
        }
      },
      "HardwareLogsResponseModel": {
        "type": "object",
        "properties": {
          "HardwareLogs": {
            "items": {
              "$ref": "#/components/schemas/LogModel"
            },
            "type": "array",
            "description": "List of hardware logs"
          }
        }
      },
      "BaselineTarget": {
        "type": "object",
        "properties": {
          "Type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BaselineTargetType"
              }
            ],
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "BaselineTarget"
      },
      "ConfigComplianceReponseModel": {
        "type": "object",
        "properties": {
          "ConfigComplianceModel": {
            "items": {
              "$ref": "#/components/schemas/ConfigComplianceModel"
            },
            "type": "array"
          }
        }
      },
      "ThresholdOffender": {
        "type": "object",
        "properties": {
          "EntityType": {
            "type": "integer",
            "description": "Entity Type",
            "format": "int32"
          },
          "UpperCriticalViolations": {
            "type": "integer",
            "description": "Upper Critical Violation",
            "format": "int32"
          },
          "EntityName": {
            "type": "string",
            "description": "Entity name"
          },
          "LowerWarningViolations": {
            "type": "integer",
            "description": "Lower Warning Violation",
            "format": "int32"
          },
          "UpperCritical": {
            "type": "integer",
            "description": "Upper Critical",
            "format": "int32"
          },
          "ViolationState": {
            "type": "integer",
            "description": "Violation State",
            "format": "int32"
          },
          "ThresholdType": {
            "type": "integer",
            "description": "Threshold Type",
            "format": "int32"
          },
          "TotalViolations": {
            "type": "integer",
            "description": "Count of Total Violations",
            "format": "int32"
          },
          "UpperWarningViolations": {
            "type": "integer",
            "description": "Upper Warning Violation",
            "format": "int32"
          },
          "LowerCritical": {
            "type": "integer",
            "description": "Lower critical",
            "format": "int32"
          },
          "LowerWarning": {
            "type": "integer",
            "description": "Lower warning",
            "format": "int32"
          },
          "EntityId": {
            "type": "integer",
            "description": "Entity Id",
            "format": "int32"
          },
          "UpperWarning": {
            "type": "integer",
            "description": "Upper warning",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Threshold offender Id",
            "format": "int32"
          },
          "LowerCriticalViolations": {
            "type": "integer",
            "description": "Lower Critical Violation",
            "format": "int32"
          }
        }
      },
      "ApiValidator": {
        "type": "object",
        "properties": {
          "ApiValidationResult": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ApiValidator"
      },
      "DeviceStatusSummary": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "StatusType": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          }
        },
        "title": "DeviceStatusSummary"
      },
      "FileResponseModel": {
        "type": "object",
        "properties": {
          "DeviceOperation": {
            "type": "string",
            "description": "Indicates either remote diagnostic or SupportAssist."
          },
          "FilePath": {
            "type": "string",
            "description": "Location where the file is stored."
          },
          "JobId": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "FileName": {
            "type": "string",
            "description": "Name of the remote diagnostic or SupportAssist report."
          }
        }
      },
      "SingleUpdateReportContentsResponseModel": {
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "Components": {
            "items": {
              "$ref": "#/components/schemas/SingleUpdateReportComponentsResponseModel"
            },
            "type": "array"
          },
          "DeviceId": {
            "type": "string"
          },
          "DeviceModel": {
            "type": "string"
          },
          "DeviceTypeId": {
            "type": "string"
          },
          "DeviceIPAddress": {
            "type": "string"
          },
          "DeviceServiceTag": {
            "type": "string"
          },
          "DeviceTypeName": {
            "type": "string"
          }
        }
      },
      "PluginService": {
        "type": "object",
        "properties": {
          "PluginCatalogInfo": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PluginCatalogLocation"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "PluginAvailability": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Availability"
              }
            ],
            "nullable": true
          },
          "Plugins": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Plugin"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "PluginService"
      },
      "OperatorInfo": {
        "type": "object",
        "properties": {
          "Operators": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Operator"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "FieldTypes": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/FieldType"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "OperatorInfo"
      },
      "ChassisSlot": {
        "type": "object",
        "properties": {
          "PowerState": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "Type": {
            "type": "integer",
            "format": "int64"
          },
          "IsPrimarySlot": {
            "type": "string"
          },
          "Number": {
            "type": "string"
          },
          "VlanId": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceType": {
            "type": "integer",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "HealthStatus": {
            "type": "integer",
            "format": "int64"
          },
          "SlotIdentifier": {
            "type": "string"
          },
          "Occupied": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "VlanCapable": {
            "type": "boolean"
          },
          "SlotDeviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FIPSModeConfiguration": {
        "type": "object",
        "properties": {
          "FipsMode": {
            "type": "string",
            "description": "FIPS Mode staus"
          },
          "SettingType": {
            "type": "string",
            "description": "Setting Type"
          }
        }
      },
      "IscsiSettings": {
        "type": "object",
        "properties": {
          "Mac": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MacSettings"
              }
            ],
            "nullable": true
          },
          "InitiatorIpPoolSettings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InitiatorIpPoolSettings"
              }
            ],
            "nullable": true
          },
          "InitiatorConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InitiatorConfig"
              }
            ],
            "nullable": true
          }
        },
        "title": "IscsiSettings"
      },
      "GroupDAOTag": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with teh group DAO tag",
            "format": "int32"
          },
          "ParentTagId": {
            "type": "integer",
            "description": "Indicates the parent tag for the group DAO tag",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Group DAO tag description"
          },
          "IdAttributeType": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the attribute type(s) associated with the group DAO tag"
          },
          "IdGroup": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the groups associated with the group DAO tag"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO tag id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Group DAO tag name"
          }
        }
      },
      "AddressConfigurationSettings": {
        "type": "object",
        "properties": {
          "AddressConfigurationDetails": {
            "type": "string",
            "description": "Address configuration details."
          },
          "ReturnValue": {
            "type": "integer",
            "description": "Return value of address configuration settings.",
            "format": "int32"
          }
        }
      },
      "SessionConfigurationResponseModel": {
        "type": "object",
        "properties": {
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/SessionConfigurationModel"
            },
            "type": "array",
            "description": "List of session configuration models."
          }
        }
      },
      "Rpms": {
        "type": "object",
        "properties": {
          "Rpm": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "AttributeOption": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AttributeOption"
      },
      "MemorySummary": {
        "type": "object",
        "properties": {
          "Status": {
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "type": "array"
          },
          "TotalSystemMemoryGiB": {
            "type": "integer",
            "description": "Total system memory in GiB.",
            "format": "int64"
          }
        }
      },
      "AlertMessageDefinitionSubCategoriesModel": {
        "type": "object",
        "properties": {
          "SubCategory": {
            "type": "string",
            "description": "Subcategory name of alert message definition."
          }
        }
      },
      "QueryCondition": {
        "type": "object",
        "properties": {
          "LogicalOperatorId": {
            "type": "integer",
            "description": "Indicates the logical operator id for the query condition",
            "format": "int32"
          },
          "RightParen": {
            "type": "boolean",
            "description": "Indicates the right parent for the query condition"
          },
          "OperatorId": {
            "type": "integer",
            "description": "The operation to use in the logical condition",
            "format": "int32"
          },
          "LeftParen": {
            "type": "boolean",
            "description": "Indicates the left parent for the query condition"
          },
          "FieldId": {
            "type": "integer",
            "description": "Indicates the field id for the logical condition",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "The value to set in the logical condition"
          }
        }
      },
      "DeviceSpecificData": {
        "type": "object",
        "title": "DeviceSpecificData"
      },
      "GroupHierarchy": {
        "type": "object",
        "properties": {
          "ChildGroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ParentGroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "GroupHierarchy"
      },
      "TroubleshootService": {
        "type": "object",
        "properties": {
          "Files": {
            "items": {
              "$ref": "#/components/schemas/FileResponseModel"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          }
        },
        "title": "TroubleshootService"
      },
      "NetworkAddressParsedInfoModel": {
        "type": "object",
        "properties": {
          "FileError": {
            "items": {
              "$ref": "#/components/schemas/FileError"
            },
            "type": "array",
            "description": "Any error occurred in reading file."
          },
          "AddressModel": {
            "items": {
              "$ref": "#/components/schemas/AddressModel"
            },
            "type": "array",
            "description": "List of addresses specified in file."
          },
          "DuplicateAddressModel": {
            "items": {
              "$ref": "#/components/schemas/AddressModel"
            },
            "type": "array",
            "description": "List of any duplicate addresses."
          }
        }
      },
      "SubsystemRollupStatusReducedModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the reduced subsystem rollup status",
            "format": "int32"
          },
          "SubSystemName": {
            "type": "string",
            "description": "Subsystem name of the reduced subsystem rollup status"
          }
        }
      },
      "UsersDocumentModel": {
        "type": "object",
        "properties": {
          "UserEnb": {
            "type": "string"
          },
          "TypCat": {
            "type": "string"
          },
          "ScopeCheckRequired": {
            "type": "string"
          },
          "UserDirSvcTyp": {
            "type": "string"
          },
          "OwnershipCheckRequired": {
            "type": "string"
          },
          "UserId": {
            "type": "string"
          },
          "CustomTags": {
            "type": "string"
          },
          "UserDesc": {
            "type": "string"
          },
          "UserTyp": {
            "type": "string"
          },
          "DeviceIdAccessList": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "UserNm": {
            "type": "string"
          }
        }
      },
      "ActionGroupsPrivilegesPayload": {
        "type": "object",
        "properties": {
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of group ids"
          }
        }
      },
      "SubSystemRollupStatus": {
        "type": "object",
        "properties": {
          "Status": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SubSystemName": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SubSystemRollupStatus"
      },
      "ManagementProfileMinModel": {
        "type": "object",
        "properties": {
          "ManagementProfileId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "ManagementURL": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "ManagementId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "AgentName": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ManagementProfileMinModel"
      },
      "SyslogDirective": {
        "type": "object",
        "properties": {
          "Priority": {
            "description": "Syslog Priority information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/SyslogPriority"
              }
            ]
          },
          "Protocol": {
            "description": "Syslog Protocol information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/SyslogProtocol"
              }
            ]
          },
          "Facility": {
            "description": "Syslog Facility information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/SyslogFacility"
              }
            ]
          },
          "Operator": {
            "description": "Syslog Operator information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/SyslogOperator"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "ID of Syslog Directive.",
            "format": "int32"
          },
          "Server": {
            "type": "string",
            "description": "Server."
          }
        }
      },
      "GlobalExclusionList": {
        "type": "object",
        "properties": {
          "Ids": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of device IDs."
          }
        }
      },
      "BaselineActionRequestByDeviceIdsPayload": {
        "type": "object",
        "properties": {
          "Ids": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "BaselineActionRequestByDeviceIdsPayload"
      },
      "Alert": {
        "type": "object",
        "properties": {
          "SeverityName": {
            "type": "string",
            "nullable": true
          },
          "AlertDeviceGroup": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AlertDeviceAssetTag": {
            "type": "string",
            "nullable": true
          },
          "AlertDeviceMacAddress": {
            "type": "string",
            "nullable": true
          },
          "AlertDeviceIpAddress": {
            "type": "string",
            "nullable": true
          },
          "RecommendedAction": {
            "type": "string",
            "nullable": true
          },
          "AlertMessageType": {
            "type": "string",
            "nullable": true
          },
          "StatusName": {
            "type": "string",
            "nullable": true
          },
          "StatusType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AlertDeviceName": {
            "type": "string",
            "nullable": true
          },
          "EemiMessage": {
            "type": "string",
            "nullable": true
          },
          "AlertDeviceIdentifier": {
            "type": "string",
            "nullable": true
          },
          "AlertVarBindDetails": {
            "type": "string",
            "nullable": true
          },
          "AlertMessageId": {
            "type": "string",
            "nullable": true
          },
          "MessageArgs": {
            "type": "string",
            "nullable": true
          },
          "CatalogName": {
            "type": "string",
            "nullable": true
          },
          "SubCategoryId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AlertDeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AlertDeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AlertEntityType": {
            "type": "string",
            "nullable": true
          },
          "TimeStamp": {
            "type": "string",
            "nullable": true
          },
          "DefinitionId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SeverityType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CategoryId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CategoryName": {
            "type": "string",
            "nullable": true
          },
          "AlertEntityName": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "SubCategoryName": {
            "type": "string",
            "nullable": true
          },
          "AlertEntityId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "Alert"
      },
      "GroupModelExtension": {
        "type": "object",
        "properties": {
          "ContextId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Conditions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/QueryCondition"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "FilterId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "GroupModelExtension"
      },
      "ServerRegisterResponse": {
        "type": "object",
        "properties": {
          "ServerSSLCert": {
            "type": "string"
          },
          "V": {
            "type": "string"
          },
          "Iv": {
            "type": "string"
          },
          "Response": {
            "type": "string"
          },
          "Hmac": {
            "type": "string"
          }
        }
      },
      "DiscoveryJobDetail": {
        "type": "object",
        "properties": {
          "JobEnabled": {
            "type": "boolean",
            "description": "True if job is enabled."
          },
          "JobNextRun": {
            "type": "string",
            "description": "If discovery job is scheduled, returns the next schedule time."
          },
          "DiscoveryConfigEmailRecipient": {
            "type": "string",
            "description": "Email ID of recipient whom job's completion state need to be sent."
          },
          "DiscoveryConfigDiscoveredDeviceCount": {
            "type": "integer",
            "description": "Total number of devices discovered by the job.",
            "format": "int64"
          },
          "LastUpdateTime": {
            "type": "string",
            "description": "Last updated time of the discovery job."
          },
          "DiscoveredDevicesByType": {
            "items": {
              "$ref": "#/components/schemas/discoveredDevicesByType"
            },
            "type": "array",
            "description": "List of number of discovered devices of different types."
          },
          "JobName": {
            "type": "string",
            "description": "Name of the discovery job."
          },
          "DiscoveryConfigExpectedDeviceCount": {
            "type": "integer",
            "description": "Total number of devices expected to be discovered by the job.",
            "format": "int32"
          },
          "JobStatus": {
            "type": "string",
            "description": "Status of the discovery job. For example, Complete, Failed, and so on."
          },
          "JobId": {
            "type": "integer",
            "description": "ID of the discovery job.",
            "format": "int32"
          },
          "DiscoveryConfigGroupId": {
            "type": "integer",
            "description": "ID of the discovery configuration group.",
            "format": "int64"
          },
          "JobDescription": {
            "type": "string",
            "description": "Description of the discovery job."
          },
          "JobStartTime": {
            "type": "string",
            "description": "Start time of the discovery job."
          },
          "JobSchedule": {
            "type": "string",
            "description": "Discovery job schedule information."
          },
          "UpdatedBy": {
            "type": "string",
            "description": "Name of the user who has updated the job."
          },
          "JobEndTime": {
            "type": "string",
            "description": "Completion time of the discovery job."
          },
          "JobStatusId": {
            "type": "integer",
            "description": "Status of the discovery job in Id form. For example, Complete-2060, Failed-2070, and so on.",
            "format": "int32"
          },
          "JobProgress": {
            "type": "string",
            "description": "Percentage of discovery job completion."
          }
        }
      },
      "Credential": {
        "type": "object",
        "properties": {
          "Password": {
            "type": "string",
            "description": "Password."
          },
          "User": {
            "type": "string",
            "description": "User name."
          }
        },
        "description": ""
      },
      "ProfileAttributeViewEditDetail": {
        "type": "object",
        "properties": {
          "AttributeGroupNames": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroupName"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ProfileAttributeViewEditDetail"
      },
      "CapabilityTypeContainer": {
        "type": "object",
        "properties": {
          "CapabilityType": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/CapabilityType"
            },
            "type": "array",
            "maxItems": 1
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProtocolModelOdata": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the protocol."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the protocol.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the protocol."
          }
        }
      },
      "SaveTrapPayload": {
        "required": [
          "EnterpriseOid",
          "SnmpEventStatus"
        ],
        "type": "object",
        "properties": {
          "GenericTrapId": {
            "type": "integer",
            "description": "Generic trap number",
            "format": "int32"
          },
          "SnmpEventId": {
            "type": "integer",
            "description": "Unique identifier for trap in the application",
            "format": "int64"
          },
          "SnmpEventStatus": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/TrapStatusEnum"
              }
            ]
          },
          "SpecificTrapId": {
            "type": "integer",
            "description": "Specific trap number",
            "format": "int32"
          },
          "EnterpriseOid": {
            "type": "string",
            "description": "Unique object identifier for the trap"
          },
          "EventDefinition": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventDefinition"
              }
            ]
          },
          "FormatString": {
            "type": "string",
            "description": "Trap message"
          }
        }
      },
      "GroupDAOAttributeTypeValue": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "AttributeTypeName": {
            "type": "string",
            "description": "Group DAO attribute type name"
          },
          "New": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type is new"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute type id",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Group DAO attribute type value"
          },
          "IdDataType": {
            "type": "integer",
            "description": "Group DAO attribute type data types",
            "format": "int32"
          }
        }
      },
      "GroupsByPrivilegesResponseModel": {
        "type": "object",
        "properties": {
          "Groups": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        }
      },
      "NTPState": {
        "type": "object",
        "properties": {},
        "title": "NTPState"
      },
      "DeviceConnectionStateModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "A brief description for the device connection state."
          },
          "Id": {
            "type": "integer",
            "description": "The device connection state id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The name associated with a device connection state."
          }
        }
      },
      "EnumerationEntryModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "Name": {
            "type": "string",
            "description": "Enumerations name"
          }
        }
      },
      "ProfileExport": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          },
          "ProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "ContentType": {
            "type": "string"
          },
          "ViewTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "ExportUseId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerDeviceCard": {
        "type": "object",
        "properties": {
          "Index": {
            "type": "integer",
            "format": "int32"
          },
          "SlotType": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "DatabusWidth": {
            "type": "string"
          },
          "SlotNumber": {
            "type": "string"
          },
          "SlotLength": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Manufacturer": {
            "type": "string"
          }
        }
      },
      "HostKeysList": {
        "type": "object",
        "properties": {
          "HostKeys": {
            "items": {
              "$ref": "#/components/schemas/HostKeyModel"
            },
            "type": "array",
            "description": "List of host keys."
          }
        }
      },
      "MSMConfigBlobModel": {
        "type": "object",
        "properties": {
          "TimeDetails": {
            "description": "Time details.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/TimeDetailsBlob"
              }
            ]
          },
          "RootModifiedHashedPwd": {
            "type": "string",
            "description": "Password."
          },
          "ConfigTransactionId": {
            "type": "integer",
            "description": "ID of configuration transaction.",
            "format": "int32"
          },
          "MCMBlobModel": {
            "items": {
              "$ref": "#/components/schemas/MCMBlobModel"
            },
            "type": "array"
          }
        }
      },
      "AccountList": {
        "type": "object",
        "properties": {
          "AccountIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "AccountList"
      },
      "InventoryTypes": {
        "type": "object",
        "title": "InventoryTypes"
      },
      "ChassisDeviceAssociationModel": {
        "type": "object",
        "properties": {
          "AssociatedDevicePowerState": {
            "type": "integer",
            "description": "Indicates the power state of the associated device",
            "format": "int32"
          },
          "SlotId": {
            "type": "string",
            "description": "Chassis device slot id"
          },
          "AssociatedDeviceModel": {
            "type": "string",
            "description": "Indicates the associated device model"
          },
          "AssociatedDeviceName": {
            "type": "string",
            "description": "Indicates the associated device name"
          },
          "AssociatedDeviceType": {
            "type": "string",
            "description": "Indicates the associated device type"
          },
          "AssociatedDeviceId": {
            "type": "integer",
            "description": "Indicates the chassis associated device id",
            "format": "int32"
          },
          "AssociatedFQDD": {
            "type": "string",
            "description": "Indicates the associated device FQDD"
          },
          "AssociatedDeviceAssetTag": {
            "type": "string",
            "description": "Indicates the chassis associated device asset tag"
          },
          "AssociatedDeviceServiceTag": {
            "type": "string",
            "description": "Indicates the chassis associated device service tag"
          },
          "AssociatedDeviceIP": {
            "type": "string",
            "description": "Indicates the associated device IP"
          }
        }
      },
      "ExternalAccountProvider": {
        "type": "object",
        "properties": {
          "DefaultSearchTimeOut": {
            "type": "integer",
            "format": "int32"
          },
          "ADAccountProvider": {
            "items": {
              "$ref": "#/components/schemas/ADAccountProvider"
            },
            "type": "array"
          },
          "DefaultADPort": {
            "type": "integer",
            "format": "int32"
          },
          "DefaultNetworkTimeOut": {
            "type": "integer",
            "format": "int32"
          },
          "LDAPAccountProvider": {
            "items": {
              "$ref": "#/components/schemas/LDAPAccountProvider"
            },
            "type": "array"
          },
          "DefaultLDAPPort": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerInterfaceProfileRequestModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerInterfaceProfileModel"
          },
          {
            "type": "object",
            "properties": {
              "Networks": {
                "items": {
                  "$ref": "#/components/schemas/NetworkModel"
                },
                "type": "array",
                "description": "Tagged VLANs"
              }
            }
          }
        ]
      },
      "SingleUpdateReportComponentsResponse": {
        "type": "object",
        "properties": {
          "": {
            "type": "string",
            "nullable": true
          },
          "DependencyUpgradeRequired": {
            "type": "boolean",
            "nullable": true
          }
        },
        "title": "SingleUpdateReportComponentsResponse"
      },
      "DeviceConfigComplianceReports": {
        "type": "object",
        "properties": {
          "DeviceComplianceDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceComplianceDetail"
              }
            ],
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "ServiceTag": {
            "type": "string",
            "nullable": true
          },
          "InventoryTime": {
            "type": "string",
            "nullable": true
          },
          "ComplianceStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IpAddresses": {
            "items": {
              "type": "string",
              "nullable": true
            },
            "type": "array"
          },
          "Model": {
            "type": "string",
            "nullable": true
          },
          "IpAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DeviceConfigComplianceReports"
      },
      "DeployOptionModel": {
        "enum": [
          "ShutdownType",
          "TimeToWaitBeforeShutdown",
          "EndHostPowerState",
          "PrecheckOnly",
          "ContinueOnWarning",
          "StrictCheckingVlan"
        ]
      },
      "MetricDataSummaryModel": {
        "type": "object",
        "properties": {
          "Min_value": {
            "type": "integer",
            "format": "int32"
          },
          "Job_target_id": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "Timestamp": {
            "type": "string"
          },
          "Duration": {
            "type": "integer",
            "format": "int32"
          },
          "Max_value": {
            "type": "integer",
            "format": "int32"
          },
          "Metric_type_id": {
            "type": "integer",
            "format": "int32"
          },
          "Average_data": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AssignIdentitiesReply": {
        "type": "object",
        "properties": {
          "ResultCode": {
            "type": "integer",
            "format": "int64"
          },
          "ResultMessage": {
            "type": "string"
          },
          "IsSuccessful": {
            "type": "boolean"
          },
          "Issues": {
            "items": {
              "$ref": "#/components/schemas/AssignIssue"
            },
            "type": "array"
          }
        }
      },
      "AlertMessageDefinition": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "type": "string",
            "nullable": true
          },
          "SequenceNo": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "RecommendedAction": {
            "type": "string",
            "nullable": true
          },
          "Prefix": {
            "type": "string",
            "nullable": true
          },
          "DetailedDescription": {
            "type": "string",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "SubCategory": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AlertMessageDefinition"
      },
      "DeleteAutoDeployDeviceRequest": {
        "type": "object",
        "properties": {
          "SelectAll": {
            "type": "boolean",
            "description": "Indicates whether or not to delete the AutoDeploy targets that satisfy the filter parameters."
          },
          "AutoDeployDeviceId": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "IDs of the target devices which will be deleted. This element is only used if selectAll is false."
          },
          "Filters": {
            "type": "string",
            "description": "Indicates the UI filters used to filter the records for deletion. This element is used only when selectAll is true."
          }
        }
      },
      "TemperatureResponseModel": {
        "type": "object",
        "properties": {
          "Temperatures": {
            "items": {
              "$ref": "#/components/schemas/Temperature"
            },
            "type": "array",
            "description": "List of temperatures"
          }
        }
      },
      "DeviceSubscriptionModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "ClientSubscriptionId": {
            "type": "string",
            "description": "Indicates a client subscription associated to the device subscription"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated with subscription",
            "format": "int32"
          },
          "IsValid": {
            "type": "boolean",
            "description": "Indicates if the device subscription is valid"
          },
          "SubscriptionId": {
            "type": "string",
            "description": "Device subscription GUID information"
          },
          "InactiveDuration": {
            "type": "string",
            "description": "Indicates the inactive duration of the device subscription"
          },
          "Id": {
            "type": "integer",
            "description": "Device subscription id",
            "format": "int32"
          }
        }
      },
      "VlanValidationReport": {
        "type": "object",
        "properties": {
          "Failure": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InvalidVlans"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Success": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ValidVlans"
              }
            ],
            "nullable": true
          }
        },
        "title": "VlanValidationReport"
      },
      "QosTypeModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the QoS type.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the QoS type."
          }
        }
      },
      "VLAN": {
        "type": "object",
        "properties": {
          "VLANEnable": {
            "type": "boolean",
            "description": "Indicates if VLAN is enabled."
          },
          "VLANId": {
            "items": {
              "$ref": "#/components/schemas/VLANId"
            },
            "type": "array"
          }
        }
      },
      "TransferEntityOwnershipRequest": {
        "type": "object",
        "properties": {
          "SourceUserId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TargetUserId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "TransferEntityOwnershipRequest"
      },
      "ServerRaidControllerModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Status of server RAID controller.",
            "format": "int32"
          },
          "RollupStatusString": {
            "type": "string",
            "description": "Rollup status string of server RAID controller."
          },
          "Name": {
            "type": "string",
            "description": "Name of server RAID controller."
          },
          "Fqdd": {
            "type": "string",
            "description": "FQDD of server RAID controller."
          },
          "CacheSizeInMb": {
            "type": "integer",
            "description": "Cache size in MB of server RAID controller.",
            "format": "int32"
          },
          "ServerVirtualDisks": {
            "items": {
              "$ref": "#/components/schemas/ServerVirtualDiskModel"
            },
            "type": "array",
            "description": "List of server virtual disks."
          },
          "DriverVersion": {
            "type": "string",
            "description": "Driver version of server RAID controller."
          },
          "PciSlot": {
            "type": "string",
            "description": "PCI slot of server RAID controller."
          },
          "StorageAssignmentAllowed": {
            "type": "string",
            "description": "Indicates if storage assignment is allowed."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "StatusTypeString": {
            "type": "string",
            "description": "Status type of server RAID controller."
          },
          "RollupStatus": {
            "type": "integer",
            "description": "Rollup status of server RAID controller.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server RAID controller.",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string",
            "description": "Firmware version of server RAID controller."
          },
          "DeviceDescription": {
            "type": "string",
            "description": "Description of device."
          }
        }
      },
      "ISLLinkModel": {
        "type": "object",
        "properties": {
          "Source": {
            "description": "Source connection endpoint",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ConnectionEndPointInformationModel"
              }
            ]
          },
          "Destination": {
            "description": "Destination connection endpoint ",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ConnectionEndPointInformationModel"
              }
            ]
          },
          "Id": {
            "type": "string"
          }
        }
      },
      "DeviceManagementCredentialAssociationModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Management": {
            "type": "integer",
            "description": "Indicates the associated management to the device management credentials association",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Device management credentials association id",
            "format": "int32"
          },
          "CredentialType": {
            "type": "integer",
            "description": "Indicates the type of associated credential",
            "format": "int32"
          },
          "CredentialAssociation": {
            "type": "integer",
            "description": "Indicates the associated credential",
            "format": "int32"
          }
        }
      },
      "AuditLogCategoriesModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "CategoriesDetails": {
            "items": {
              "$ref": "#/components/schemas/AuditLogCategoryModel"
            },
            "type": "array"
          }
        }
      },
      "ApplianceConfigurationProfile": {
        "type": "object",
        "properties": {
          "DeviceCount": {
            "type": "integer",
            "description": "The device count that the appliance is currently monitoring",
            "format": "int32"
          },
          "CurrentApplianceResources": {
            "description": "The list of the appliance resources configured (vcpu, mem, storage",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ApplianceResources"
              }
            ]
          },
          "CurrentConfigurationType": {
            "description": "The current configuration type - small or large plus supporting data",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ApplianceConfigurationType"
              }
            ]
          },
          "InstalledPluginsApplianceResources": {
            "description": "The list of the appliance resources required (vcpu, mem, storage",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ApplianceResources"
              }
            ]
          },
          "RequiredApplianceResources": {
            "description": "The list of the appliance resources required (vcpu, mem, storage",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ApplianceResources"
              }
            ]
          }
        }
      },
      "ComplianceSummaryModel": {
        "type": "object",
        "properties": {
          "ComplianceStatus": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ]
          },
          "NumberOfNormal": {
            "type": "integer",
            "format": "int64"
          },
          "NumberOfWarning": {
            "type": "integer",
            "format": "int64"
          },
          "NumberOfCritical": {
            "type": "integer",
            "format": "int64"
          },
          "NumberOfDowngrade": {
            "type": "integer",
            "format": "int64"
          },
          "NumberOfUnknown": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ServerDeviceCardModel": {
        "type": "object",
        "properties": {
          "SlotLength": {
            "type": "string",
            "description": "Slot length of server device card."
          },
          "SlotType": {
            "type": "string",
            "description": "Slot type of server device card."
          },
          "SlotNumber": {
            "type": "string",
            "description": "Slot number of server device card."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of server device card."
          },
          "DatabusWidth": {
            "type": "string",
            "description": "Databus width of server device card."
          },
          "DeviceCardIndex": {
            "type": "integer",
            "description": "Device card index.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server device card.",
            "format": "int32"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer of server device card."
          }
        }
      },
      "ForwardersByIdModel": {
        "type": "object",
        "properties": {
          "DataSyncHistory": {
            "description": "Enable status of the sforwarder.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DataSyncHistoryModel"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name of the forwarder."
          },
          "DataSyncConfiguration": {
            "description": "Enable status of the sforwarder.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DataSyncConfigurationModel"
              }
            ]
          },
          "ForwarderConfiguration": {
            "description": "Enable status of the sforwarder.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ForwarderConfigurationModel"
              }
            ]
          },
          "Enabled": {
            "type": "boolean",
            "description": "Enable status of the forwarder."
          },
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the forwarder.",
            "format": "int32"
          }
        }
      },
      "AlertDefinitionModel": {
        "type": "object",
        "properties": {
          "AlertType": {
            "description": "Alert type.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertTypeModel"
              }
            ]
          },
          "Severity": {
            "description": "Alert Severity.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertSeverityModel"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name of alert definition."
          },
          "AlertCatalog": {
            "description": "Alert Catalog.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertCatalogModel"
              }
            ]
          },
          "AlertSubCategory": {
            "description": "Alert Subcategory.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertSubCategoryModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert definition.",
            "format": "int64"
          },
          "AlertCategory": {
            "description": "Alert category.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertCategoryModel"
              }
            ]
          }
        }
      },
      "IndexModel": {
        "type": "object",
        "properties": {
          "IndexAlias": {
            "type": "string",
            "description": "Indicates a given alias for the index."
          },
          "IndexName": {
            "type": "string",
            "description": "Indicates the actual index name."
          }
        }
      },
      "PhysicalGrpDeviceResponseModel": {
        "type": "object",
        "properties": {
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/PhysicalGroupsDevices"
            },
            "type": "array"
          }
        }
      },
      "InventoryDetailResponseModel": {
        "type": "object",
        "properties": {
          "InventoryDetail": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "The list of inventory details"
          }
        }
      },
      "CertDetail": {
        "type": "object",
        "properties": {
          "DistinguishedName": {
            "type": "string"
          },
          "San": {
            "type": "string",
            "nullable": true
          },
          "Locality": {
            "type": "string",
            "nullable": true
          },
          "DepartmentName": {
            "type": "string",
            "nullable": true
          },
          "BusinessName": {
            "type": "string",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "KeySize": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Country": {
            "type": "string",
            "nullable": true
          },
          "Email": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "CertDetail"
      },
      "AttributeOptionModel": {
        "type": "object",
        "properties": {
          "Text": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the attribute option",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the attribute option"
          }
        }
      },
      "ManagementVLAN": {
        "type": "object",
        "properties": {
          "EnableVLAN": {
            "type": "boolean",
            "description": "Enable VLAN."
          },
          "Id": {
            "type": "integer",
            "description": "ID of management VLAN",
            "format": "int32"
          }
        }
      },
      "MetricTypeModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "MetricUnits": {
            "type": "string"
          },
          "MetricDeviceAssociation": {
            "items": {
              "$ref": "#/components/schemas/MetricDeviceAssociationModel"
            },
            "type": "array"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AddAutoDeployDeviceRequest": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "TemplateId": {
            "type": "integer",
            "description": "ID of the template which will be used for deployment after the devices are discovered.",
            "format": "int32"
          },
          "Identifiers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Identifier (service tag or node ID) of the devices to deploy to after they are discovered."
          },
          "AutoDeployId": {
            "type": "integer",
            "description": "AutoDeploy ID",
            "format": "int32"
          }
        }
      },
      "ThresholdDelete": {
        "type": "object",
        "properties": {
          "PluginId": {
            "type": "string",
            "description": "Plugin Id"
          },
          "EntityIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of entity Ids"
          }
        }
      },
      "ManagedDevicesConnectionSummaryModel": {
        "type": "object",
        "properties": {
          "ConnectedCount": {
            "type": "integer",
            "description": "Connected state count of the managed devices.",
            "format": "int32"
          },
          "DisconnectedCount": {
            "type": "integer",
            "description": "Disconnected state count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "PortModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of the port"
          },
          "AdminStatus": {
            "type": "string",
            "description": "Admin state"
          },
          "MaxSpeed": {
            "type": "string",
            "description": "Max Speed"
          },
          "Description": {
            "type": "string",
            "description": "Post description"
          },
          "Type": {
            "type": "string",
            "description": "Port type"
          },
          "MediaType": {
            "type": "string",
            "description": "Network type"
          },
          "OpticsType": {
            "type": "string",
            "description": "Optics type"
          },
          "PortNumber": {
            "type": "string",
            "description": "Port number"
          },
          "ConfiguredSpeed": {
            "type": "string",
            "description": "Configured speed"
          },
          "NodeServiceTag": {
            "type": "string",
            "description": "Identifier of the node"
          },
          "BlinkStatus": {
            "type": "string",
            "description": "Port blink status"
          },
          "CurrentSpeed": {
            "type": "string",
            "description": "Current speed"
          },
          "Id": {
            "type": "string",
            "description": "Port number along with switch identifier"
          },
          "Role": {
            "type": "string",
            "description": "role"
          },
          "Name": {
            "type": "string",
            "description": "Port Name"
          }
        }
      },
      "AlertCatalog": {
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "string"
          },
          "IsBuiltIn": {
            "type": "boolean",
            "nullable": true
          },
          "ReleaseVersion": {
            "type": "string",
            "nullable": true
          },
          "IsVisible": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "CatalogName": {
            "type": "string"
          }
        },
        "title": "AlertCatalog"
      },
      "VLanNetworkInterfaceCollection": {
        "type": "object",
        "properties": {
          "NetworkInterfaces": {
            "items": {
              "$ref": "#/components/schemas/VLanNetworkInterface"
            },
            "type": "array",
            "description": "ID of system processor."
          }
        }
      },
      "FieldType": {
        "type": "object",
        "properties": {
          "FieldTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "OperatorIds": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "FieldType"
      },
      "AutoDeployRequest": {
        "required": [
          "AutoDeployId"
        ],
        "type": "object",
        "properties": {
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/DeviceAttributesUpdateModel"
            },
            "type": "array"
          },
          "Options": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeployOptionModel"
              }
            ]
          },
          "NetworkBootIsoModel": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootIsoModel"
              }
            ]
          },
          "GroupId": {
            "type": "integer",
            "description": "Optional ID of the static group where the target devices will be placed once those devices are discovered.",
            "format": "int32"
          },
          "AutoDeployId": {
            "type": "integer",
            "description": "AutoDeploy ID",
            "format": "int32"
          }
        }
      },
      "RenameProfileRequest": {
        "required": [
          "ProfileId",
          "Name"
        ],
        "type": "object",
        "properties": {
          "ProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Profile name - Cannot be null/empty, must be unique."
          }
        }
      },
      "ScanKeysForHost": {
        "type": "object",
        "properties": {
          "Host": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of hosts."
          }
        }
      },
      "NodeModel": {
        "type": "object",
        "properties": {
          "Location": {
            "type": "string",
            "description": "Location of the node"
          },
          "NodeInformation": {
            "type": "object",
            "description": "Detailed information of the node in the fabric"
          },
          "Type": {
            "type": "string",
            "description": "Type of node which indicates chassis or switch"
          },
          "Id": {
            "type": "string",
            "description": "Identifier of the node in the fabric"
          },
          "ParentNodeId": {
            "type": "string",
            "description": "Parent node"
          }
        }
      },
      "MessageModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category"
          },
          "Severity": {
            "type": "string",
            "description": "Severity"
          },
          "MessageId": {
            "type": "string",
            "description": "Message Id"
          },
          "TimeStamp": {
            "type": "string",
            "description": "timeStamp when the fabric is not healthy"
          },
          "Message": {
            "type": "string",
            "description": "Describes why the fabric is not healthy"
          },
          "Resolution": {
            "type": "string",
            "description": "Resolution"
          },
          "MessageArgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Message arguments"
          },
          "DetailedDescription": {
            "type": "string",
            "description": "Detailed description"
          }
        }
      },
      "TemplateResponseModel": {
        "type": "object",
        "properties": {
          "Templates": {
            "items": {
              "$ref": "#/components/schemas/TemplateModel"
            },
            "type": "array"
          }
        }
      },
      "QueryReportSetting": {
        "type": "object",
        "properties": {
          "SettingId": {
            "type": "integer",
            "description": "Setting ID of query report setting",
            "format": "int32"
          },
          "OperatorId": {
            "type": "integer",
            "description": "Operator ID of query report setting",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Value of query report setting"
          }
        }
      },
      "AutoDeployOdataModel": {
        "type": "object",
        "properties": {}
      },
      "ActionGetDevicesPrivilegesPayload": {
        "type": "object",
        "properties": {
          "DeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of device ids"
          }
        }
      },
      "FabricDesignNodeModel": {
        "type": "object",
        "properties": {
          "Slot": {
            "type": "string",
            "description": "switch slot"
          },
          "Type": {
            "type": "string",
            "description": "Switch type"
          },
          "NodeName": {
            "type": "string",
            "description": "logical switch name"
          },
          "ChassisName": {
            "type": "string",
            "description": "Logical name to indicate same chassis or different chassis"
          }
        }
      },
      "JobStatusModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Job status id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Job status name"
          }
        }
      },
      "MigrateProfileModel": {
        "type": "object",
        "properties": {
          "ForceMigrate": {
            "type": "boolean",
            "description": "True indicates deploy to the destination device even if the profile cannot be removed from the source device."
          },
          "DestinationDeviceEntityId": {
            "type": "integer",
            "description": "ID of the target device where the profile will be deployed.",
            "format": "int32"
          },
          "SourceDeviceEntityId": {
            "type": "integer",
            "description": "ID of the source device where the profile is currently deployed. The profile will be removed from this device and then apply to the destination device.",
            "format": "int32"
          }
        }
      },
      "LogSeverityEnumModel": {
        "type": "object",
        "properties": {},
        "title": "LogSeverityEnumModel"
      },
      "Catalogs": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "nullable": true
          },
          "ManifestVersion": {
            "type": "string",
            "nullable": true
          },
          "ReleaseIdentifier": {
            "type": "string",
            "nullable": true
          },
          "Repository": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Repository"
              }
            ],
            "nullable": true
          },
          "Schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Schedule"
              }
            ],
            "nullable": true
          },
          "SourcePath": {
            "type": "string",
            "nullable": true
          },
          "NextUpdate": {
            "type": "string",
            "nullable": true
          },
          "LastUpdated": {
            "type": "string",
            "nullable": true
          },
          "Filename": {
            "type": "string",
            "nullable": true
          },
          "ManifestIdentifier": {
            "type": "string",
            "nullable": true
          },
          "BundlesCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AssociatedBaselines": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AssociatedBaseline"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "nullable": true
          },
          "PredecessorIdentifier": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "BaseLocation": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Catalogs"
      },
      "Repository": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DomainName": {
            "type": "string",
            "nullable": true
          },
          "RepositoryType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RepositoryType"
              }
            ],
            "nullable": true
          },
          "CheckCertificate": {
            "type": "boolean",
            "nullable": true
          },
          "Source": {
            "type": "string"
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "Repository"
      },
      "ApplianceSettings": {
        "type": "object",
        "properties": {
          "ConsoleSetting": {
            "items": {
              "$ref": "#/components/schemas/ConsoleSetting"
            },
            "type": "array"
          }
        }
      },
      "CertData": {
        "type": "object",
        "properties": {
          "CertificateData": {
            "type": "string"
          }
        },
        "title": "CertData"
      },
      "UplinkRequestPayloadModel": {
        "required": [
          "FabricId"
        ],
        "type": "object",
        "properties": {
          "FabricId": {
            "type": "string",
            "description": "Id of the fabric for which uplinks are part of"
          },
          "UplinkIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Ids of the uplinks"
          }
        }
      },
      "BaselineActionRequestForDevicePayloadModel": {
        "type": "object",
        "properties": {
          "DeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Array of device Ids"
          }
        }
      },
      "ServerOperatingSystemModel": {
        "type": "object",
        "properties": {
          "Hostname": {
            "type": "string",
            "description": "Host name of operating system."
          },
          "OsVersion": {
            "type": "string",
            "description": "Version of operating system."
          },
          "OsName": {
            "type": "string",
            "description": "Name of operating system."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server operating system.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          }
        }
      },
      "ValidVlansModel": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Vlans": {
            "items": {
              "$ref": "#/components/schemas/VLANModel"
            },
            "type": "array"
          }
        }
      },
      "DataSyncCategoryTypeModel": {
        "type": "object",
        "properties": {
          "CategoryType": {
            "type": "integer",
            "description": "Category Type for the Data Sync",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the category of the Data Sync"
          },
          "Description": {
            "type": "string",
            "description": "Description of the category type"
          }
        }
      },
      "PortInformationModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "PortNumber": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "InitiatorIpPoolSettings": {
        "type": "object",
        "properties": {
          "SubnetMask": {
            "type": "string",
            "description": "Subnet mask address of the iSCSI pool"
          },
          "PrimaryDnsServer": {
            "type": "string",
            "description": "Primary DNS server address"
          },
          "SecondaryDnsServer": {
            "type": "string",
            "description": "Secondary DNS server address"
          },
          "IpRange": {
            "type": "string",
            "description": "IP address range for the iSCSI initiator pool."
          },
          "Gateway": {
            "type": "string",
            "description": "Gateway address of the iSCSI pool."
          }
        }
      },
      "MetricsRequest": {
        "type": "object",
        "properties": {
          "AuthToken": {
            "type": "string",
            "description": "Auth token"
          },
          "TimeoutInHrs": {
            "type": "integer",
            "description": "Time out in hours",
            "format": "int32"
          },
          "DateAdded": {
            "type": "string",
            "description": "Date Added"
          },
          "PluginIdOwner": {
            "type": "integer",
            "description": "Plugin Id Owner",
            "format": "int32"
          },
          "MbTopic": {
            "type": "string",
            "description": "mb topic"
          },
          "PluginId": {
            "type": "string",
            "description": "Plugin Id"
          },
          "Devices": {
            "description": "List of metrics devices",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MetricsDeviceModel"
              }
            ]
          },
          "CollectInterval": {
            "description": "List of metric collection interval",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MetricsCollectionInterval"
              }
            ]
          },
          "Groups": {
            "description": "List of metrics group",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MetricsGroupModel"
              }
            ]
          },
          "DateUpdated": {
            "type": "string",
            "description": "Date Updated"
          },
          "RequestStatus": {
            "type": "integer",
            "description": "Request Status",
            "format": "int32"
          }
        }
      },
      "AlertActionRequestFilterPayload": {
        "type": "object",
        "properties": {
          "Category": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SourceName": {
            "type": "string",
            "nullable": true
          },
          "DeviceIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          },
          "DeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "StatusType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SubCategory": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "AlertActionRequestFilterPayload"
      },
      "ServerNetworkInterfaceModel": {
        "type": "object",
        "properties": {
          "LinkSpeed": {
            "type": "integer",
            "description": "Link speed of server network interface.",
            "format": "int32"
          },
          "VirtualFipMacAddress": {
            "type": "string",
            "description": "Virtual FIP MAC address of server network interface."
          },
          "PortId": {
            "type": "string",
            "description": "Port Id of server network interface."
          },
          "Fqdd": {
            "type": "string",
            "description": "FQDD of server network interface."
          },
          "IscsiMode": {
            "type": "string",
            "description": "iSCSI mode of server network interface."
          },
          "VirtualMacAddress": {
            "type": "string",
            "description": "Virtual MAC address of server network interface."
          },
          "TargetIpAddress": {
            "type": "string",
            "description": "Target IP address of server network interface."
          },
          "VirtualIscsiMacAddress": {
            "type": "string",
            "description": "Virtual iSCSI MAC address of server network interface."
          },
          "InitiatorName": {
            "type": "string",
            "description": "Initiator Name of server network interface."
          },
          "PermanentMacAddress": {
            "type": "string",
            "description": "Permanent MAC address of server network interface."
          },
          "Wwpn": {
            "type": "string",
            "description": "WWPN of server network interface."
          },
          "MaxBandwidth": {
            "type": "integer",
            "description": "Maximum bandwidth of server network interface.",
            "format": "int32"
          },
          "PermanentIscsiMacAddress": {
            "type": "string",
            "description": "Permanent iSCSI MAC address of server network interface."
          },
          "ProductName": {
            "type": "string",
            "description": "Product name of server network interface."
          },
          "TargetFcoeWwpn": {
            "type": "string",
            "description": "Target FCoE WWPN of server network interface."
          },
          "VendorName": {
            "type": "string",
            "description": "Vendor name of server network interface."
          },
          "FcoeMode": {
            "type": "string",
            "description": "FCoE mode of server network interface."
          },
          "InitiatorPrimaryDns": {
            "type": "string",
            "description": "Initiator primary DNS of server network interface."
          },
          "InitiatorSubnetMask": {
            "type": "string",
            "description": "Initiator subnet mask of server network interface."
          },
          "NicMode": {
            "type": "string",
            "description": "NIC mode of server network interface."
          },
          "InitiatorSecondaryDns": {
            "type": "string",
            "description": "Initiator secondary DNS of server network interface."
          },
          "MinBandwidth": {
            "type": "integer",
            "description": "Minimum bandwidth of server network interface.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Id of device.",
            "format": "int32"
          },
          "NicId": {
            "type": "string",
            "description": "NIC Id of server network interface."
          },
          "PermanentFcoeMacAddress": {
            "type": "string",
            "description": "Permanent FCoE MAC address of server network interface."
          },
          "VirtualWwn": {
            "type": "string",
            "description": "Virtual WWN of server network interface."
          },
          "CurrentMacAddress": {
            "type": "string",
            "description": "Current MAC address of server network interface."
          },
          "InitiatorIpAddress": {
            "type": "string",
            "description": "Initiator IP address of server network interface."
          },
          "Wwn": {
            "type": "string",
            "description": "WWN of server network interface."
          },
          "LinkStatus": {
            "type": "string",
            "description": "Link status of server network interface."
          },
          "Id": {
            "type": "integer",
            "description": "Id of server network interface.",
            "format": "int32"
          },
          "VirtualWwpn": {
            "type": "string",
            "description": "Virtal WWPN of server network interface."
          },
          "InitiatorGateway": {
            "type": "string",
            "description": "Initiator gateway of server network interface."
          }
        }
      },
      "chassisSlotModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string",
            "description": "Indicates the name of the device seated in the slot"
          },
          "PowerStatus": {
            "type": "integer",
            "description": "Indicates the power status of the chassis slot",
            "format": "int64"
          },
          "SlotType": {
            "type": "integer",
            "description": "Chassis slot type",
            "format": "int64"
          },
          "SlotName": {
            "type": "string",
            "description": "Chassis slot name"
          },
          "SlotDeviceId": {
            "type": "integer",
            "description": "The id of the device seated in the slot",
            "format": "int32"
          },
          "IsPrimarySlot": {
            "type": "string",
            "description": "Indicates if the slot is primary"
          },
          "DeviceType": {
            "type": "integer",
            "description": "Indicates the device type seated in the slot",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis slot",
            "format": "int32"
          },
          "SledBlockPowerOn": {
            "type": "string",
            "description": "Indicates if the sled seated in the chassis slot has block the power on"
          },
          "HealthStatus": {
            "type": "integer",
            "description": "Indicates the health status of the chassis slot",
            "format": "int64"
          },
          "Model": {
            "type": "string",
            "description": "Indicates the model of the device seated in teh slot"
          },
          "SlotIdentifier": {
            "type": "string",
            "description": "Indicates the identifier associated to the slot"
          },
          "Occupied": {
            "type": "string",
            "description": "Indicates if the chassis slot is occupied"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis slot id",
            "format": "int64"
          },
          "SlotNumber": {
            "type": "string",
            "description": "Chassis slot number"
          }
        }
      },
      "GroupAttributeValidationDecimal": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer",
            "description": "Group attribute validation decimal max value"
          },
          "Id": {
            "type": "integer",
            "description": "Group attribute validation decimal id",
            "format": "int32"
          },
          "Min": {
            "type": "integer",
            "description": "Group attribute validation decimal min value"
          }
        }
      },
      "NodeType": {
        "type": "object",
        "properties": {},
        "title": "NodeType"
      },
      "ServerNetworkInterfacePort": {
        "type": "object",
        "properties": {
          "LinkSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "PortId": {
            "type": "string"
          },
          "InitiatorPrimaryDns": {
            "type": "string"
          },
          "LinkStatus": {
            "type": "string"
          },
          "Pid": {
            "type": "integer",
            "format": "int32"
          },
          "SlotId": {
            "type": "string"
          },
          "TargetIpAddress": {
            "type": "string"
          },
          "InitiatorSecondaryDns": {
            "type": "string"
          },
          "InitiatorName": {
            "type": "string"
          },
          "InitiatorSubnetMask": {
            "type": "string"
          },
          "InitiatorIpAddress": {
            "type": "string"
          },
          "ProductName": {
            "type": "string"
          },
          "TargetFcoeWwpn": {
            "type": "string"
          },
          "Partitions": {
            "items": {
              "$ref": "#/components/schemas/ServerNetworkInterfacePartition"
            },
            "type": "array"
          },
          "InitiatorGateway": {
            "type": "string"
          }
        }
      },
      "DiagnosticModel": {
        "type": "object",
        "properties": {
          "Command": {
            "type": "string",
            "description": "Diagnostic command details"
          }
        }
      },
      "IdentityPool": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "FcSettings": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/FcSettings"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Description of the Identity Pool - The maximum length of the description is 255 characters."
          },
          "FcoeSettings": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/FcoeSettings"
              }
            ]
          },
          "UsageIdentitySets": {
            "items": {
              "$ref": "#/components/schemas/UsageIdentitySet"
            },
            "type": "array"
          },
          "IdentityUsageCounts": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/UsageCounts"
              }
            ]
          },
          "CreationTime": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "LastUpdatedBy": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "EthernetSettings": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/EthernetSettings"
              }
            ]
          },
          "LastUpdateTime": {
            "type": "string"
          },
          "IscsiSettings": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/IscsiSettings"
              }
            ]
          },
          "Name": {
            "type": "string",
            "description": "Name of the Identity Pool - It can have a maximum length of 255 characters."
          }
        }
      },
      "AlertSubCategoryModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of subcategory."
          },
          "Prefix": {
            "type": "string",
            "description": "Prefix of subcategory."
          },
          "Id": {
            "type": "integer",
            "description": "ID of subcategory.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of subcategory."
          }
        }
      },
      "DevicesMinResponse": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/DeviceMinModel"
            },
            "type": "array"
          }
        }
      },
      "AssignIssue": {
        "type": "object",
        "properties": {
          "Topic": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Code": {
            "type": "integer",
            "format": "int64"
          },
          "Severity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeviceUnitSizeSupportedStatus": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SessionService": {
        "type": "object",
        "properties": {
          "Status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Sessions": {
            "items": {
              "$ref": "#/components/schemas/Session"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "CurrentUser": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SessionUser"
              }
            ],
            "nullable": true
          },
          "SessionTimeout": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ServiceEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "SessionConfiguration": {
            "items": {
              "$ref": "#/components/schemas/SessionConfiguration"
            },
            "type": "array"
          },
          "Id": {
            "type": "string"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SessionService"
      },
      "TemplateImport": {
        "required": [
          "Name",
          "Type",
          "Content"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          },
          "Type": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "ViewTypeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ProtocolModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ProtocolModel"
      },
      "ApplianceConfigurationType": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Plugin owner for the appliance resource entry",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name for the appliance configuration"
          },
          "MinDeviceCount": {
            "type": "integer",
            "description": "Minimum number of devices for this config",
            "format": "int32"
          },
          "MaxDeviceCount": {
            "type": "integer",
            "description": "Maximum number of devices for this config",
            "format": "int32"
          },
          "Descripton": {
            "type": "string",
            "description": "Description for the appliance configuration"
          },
          "Id": {
            "type": "integer",
            "description": "Config id",
            "format": "int32"
          }
        }
      },
      "DeviceInfo": {
        "type": "object",
        "properties": {
          "ServerName": {
            "type": "string",
            "nullable": true
          },
          "ManagementIp": {
            "type": "string",
            "nullable": true
          },
          "SlotNumber": {
            "type": "string",
            "nullable": true
          },
          "ChassisName": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceInfo"
      },
      "InfrastructureGroupModel": {
        "required": [
          "GroupType",
          "GroupMembershipType",
          "GroupGlobalStatus"
        ],
        "type": "object",
        "properties": {
          "GroupType": {
            "description": "Indicates the group type",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/InfrastructureGroupTypeModel"
              }
            ]
          },
          "GroupCreationTime": {
            "type": "string",
            "description": "The date/time in which the group was created"
          },
          "GroupMembershipType": {
            "description": "Indicates the group membership type",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MembershipTypeModel"
              }
            ]
          },
          "GroupEditable": {
            "type": "boolean",
            "description": "Indicates whether the group can be edited"
          },
          "GroupDevices": {
            "items": {
              "$ref": "#/components/schemas/InfrastructureDeviceModel"
            },
            "type": "array",
            "description": "Indicates the devices associated to the group"
          },
          "GroupUpdatedBy": {
            "type": "string",
            "description": "User who updated the group"
          },
          "SubGroups": {
            "items": {
              "$ref": "#/components/schemas/InfrastructureGroupModel"
            },
            "type": "array",
            "description": "Indicates the subgroups associated to the group"
          },
          "GroupDefinitionId": {
            "type": "integer",
            "description": "The group definition id",
            "format": "int32"
          },
          "GroupCreatedBy": {
            "type": "string",
            "description": "User who created the group"
          },
          "CommonQuery": {
            "description": "Indicates the query associated to the group",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CommonQueryModel"
              }
            ]
          },
          "GroupParentId": {
            "type": "integer",
            "description": "Indicates the parent group associated to the group",
            "format": "int32"
          },
          "GroupUpdatedTime": {
            "type": "string",
            "description": "The date/time in which the group was updated"
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the group"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner for the group",
            "format": "int32"
          },
          "GroupDefinitionDescription": {
            "type": "string",
            "description": "Group definition description"
          },
          "GroupDescription": {
            "type": "string",
            "description": "Description of the group"
          },
          "GroupVisible": {
            "type": "boolean",
            "description": "Indicates whether the group is visible"
          },
          "GroupId": {
            "type": "integer",
            "description": "Id of the group",
            "format": "int32"
          },
          "GroupGlobalStatus": {
            "description": "Health status associated to the group",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceStatusModel"
              }
            ]
          }
        }
      },
      "GroupAuditModel": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "description": "The date/time in which the group was updated"
          },
          "Name": {
            "type": "string",
            "description": "Group name"
          },
          "GlobalStatus": {
            "type": "integer",
            "description": "the global status for the group",
            "format": "int64"
          },
          "LastQueryTime": {
            "type": "string",
            "description": "Last time the group audit was queried"
          },
          "CreationTime": {
            "type": "string",
            "description": "The date/time in which the group was created"
          },
          "GroupHierarchyOperation": {
            "type": "integer",
            "description": "Group hierarchy operation type",
            "format": "int32"
          },
          "MembershipTypeId": {
            "type": "integer",
            "description": "the membership type for the group",
            "format": "int32"
          },
          "DefinitionId": {
            "type": "integer",
            "description": "The group definition id",
            "format": "int32"
          },
          "DefinitionDescription": {
            "type": "string",
            "description": "Group definition description"
          },
          "ParentId": {
            "type": "integer",
            "description": "the group parent",
            "format": "int64"
          },
          "AuditDateTime": {
            "type": "string",
            "description": "The date/time of the group audit"
          },
          "GroupOperation": {
            "type": "integer",
            "description": "Group operation type",
            "format": "int32"
          },
          "TypeId": {
            "type": "integer",
            "description": "the group type for the group",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Group description"
          },
          "Visible": {
            "type": "boolean",
            "description": "whether the group is visible"
          },
          "Editable": {
            "type": "boolean",
            "description": "whether the group can be edited"
          },
          "IsAccessAllowed": {
            "type": "boolean",
            "description": "true if the user has scope access to the group"
          },
          "AuditId": {
            "type": "integer",
            "description": "the audit for the group audit",
            "format": "int64"
          },
          "IdOwner": {
            "type": "integer",
            "description": "the owner for the group audit",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "string",
            "description": "User who created the group"
          },
          "UpdatedBy": {
            "type": "string",
            "description": "User who updated the group"
          },
          "Id": {
            "type": "integer",
            "description": "Group id",
            "format": "int64"
          }
        }
      },
      "AutoDeployTarget": {
        "type": "object",
        "properties": {
          "ShareIp": {
            "type": "string",
            "nullable": true
          },
          "IsoPath": {
            "type": "string",
            "nullable": true
          },
          "TemplateName": {
            "type": "string",
            "nullable": true
          },
          "ShareType": {
            "type": "string",
            "nullable": true
          },
          "CreatedOn": {
            "type": "string",
            "nullable": true
          },
          "AutoDeployDeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "TemplateTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IsBootToNetworkIso": {
            "type": "boolean",
            "nullable": true
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TemplateId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TaskLastRunStatusId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "Identifier": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AutoDeployTarget"
      },
      "CategoryType": {
        "type": "object",
        "properties": {
          "CategoryType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "CategoryType"
      },
      "UpdateAction": {
        "enum": [
          "UPGRADE",
          "DOWNGRADE",
          "EQUAL",
          "UNKNOWN"
        ],
        "type": "string",
        "title": "UpdateAction"
      },
      "TargetModel": {
        "required": [
          "Id",
          "Type"
        ],
        "type": "object",
        "properties": {
          "Type": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/TargetTypeModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Id": {
            "type": "integer",
            "description": "DeviceIDs can be determined through /api/DeviceService/Devices and GroupIDs can be determined through /api/GroupService/Groups",
            "format": "int32"
          }
        }
      },
      "ServerSupportedPowerState": {
        "type": "object",
        "properties": {
          "PowerState": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UserGroupsModel": {
        "type": "object",
        "properties": {
          "UserId": {
            "type": "integer",
            "description": "Indicates the user id for the groups",
            "format": "int32"
          },
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the grops"
          }
        }
      },
      "Nic": {
        "type": "object",
        "properties": {
          "LinkSpeed": {
            "type": "integer",
            "description": "Nic link speed details",
            "format": "int32"
          },
          "VirtualFipMacAddress": {
            "type": "string",
            "description": "Nic virtual FIP mac address details"
          },
          "PortId": {
            "type": "string",
            "description": "Nic port id"
          },
          "Fqdd": {
            "type": "string",
            "description": "Nic FQDD"
          },
          "IscsiMode": {
            "type": "string",
            "description": "Nic ISCSI details"
          },
          "VirtualIscsiMacAddress": {
            "type": "string",
            "description": "Nic virtual ISCSI mac address details"
          },
          "InitiatorName": {
            "type": "string",
            "description": "Nic initiator name"
          },
          "PermanentMacAddress": {
            "type": "string",
            "description": "Nic permanent mac address"
          },
          "MaxBandwidth": {
            "type": "integer",
            "description": "Indicated the nic max bandwidth",
            "format": "int32"
          },
          "Wwpn": {
            "type": "string",
            "description": "Nic WWPN details"
          },
          "NicId": {
            "type": "string",
            "description": "Nic id"
          },
          "PermanentIscsiMacAddress": {
            "type": "string",
            "description": "Nic permanent ISCSI mac address"
          },
          "InitiatorSubnetMask": {
            "type": "string",
            "description": "Nic initiator subnet mask"
          },
          "TargetFcoeWwpn": {
            "type": "string",
            "description": "Nic target FCOE WWPN"
          },
          "VirtualWwn": {
            "type": "string",
            "description": "Nic virtual WWN details"
          },
          "MinBandwidth": {
            "type": "integer",
            "description": "Indicated the nic min bandwidth",
            "format": "int32"
          },
          "InitiatorGateway": {
            "type": "string",
            "description": "Nic initiator gateway"
          },
          "FcoeMode": {
            "type": "string",
            "description": "Nic FCO mode details"
          },
          "InitiatorPrimaryDns": {
            "type": "string",
            "description": "Nic initiator primary dns"
          },
          "TargetIpAddress": {
            "type": "string",
            "description": "Nic target ip address"
          },
          "NicMode": {
            "type": "string",
            "description": "Nic mode details"
          },
          "InitiatorSecondaryDns": {
            "type": "string",
            "description": "Nic initiator secondary dns"
          },
          "VirtualMacAddress": {
            "type": "string",
            "description": "Nic virtual mac address details"
          },
          "VirtualWwpn": {
            "type": "string",
            "description": "Nic virtual WWPN details"
          },
          "PermanentFcoeMacAddress": {
            "type": "string",
            "description": "Nic permanent FCO mac address"
          },
          "CurrentMacAddress": {
            "type": "string",
            "description": "Nic current mac address"
          },
          "InitiatorIpAddress": {
            "type": "string",
            "description": "Nic initiator ip address"
          },
          "Wwn": {
            "type": "string",
            "description": "Nic WWN details"
          },
          "LinkStatus": {
            "type": "string",
            "description": "Nic link status"
          },
          "VendorName": {
            "type": "string",
            "description": "Nic vendor name"
          },
          "ProductName": {
            "type": "string",
            "description": "Nic product name"
          }
        }
      },
      "EventCatalog": {
        "type": "object",
        "properties": {
          "EventCatalogId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "ReleaseVersion": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "EventCatalog"
      },
      "PluginsCompatibilityReq": {
        "type": "object",
        "properties": {
          "OmeVersion": {
            "type": "string",
            "description": "OME version"
          },
          "Plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginsRequestModel"
            },
            "type": "array",
            "description": "List of plugin information"
          }
        }
      },
      "BrandModel": {
        "type": "object",
        "properties": {
          "BrandType": {
            "description": "Brand type Default or De Branded",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/BrandType"
              }
            ]
          }
        }
      },
      "GroupAttributeTypeValue": {
        "type": "object",
        "properties": {
          "AttributeTypeName": {
            "type": "string",
            "description": "Group attribute type value name"
          },
          "New": {
            "type": "boolean",
            "description": "Indicates if the group attribute type value is new"
          },
          "IdAttributeType": {
            "type": "integer",
            "description": "Group attribute type value id",
            "format": "int32"
          },
          "IdDataType": {
            "type": "integer",
            "description": "Group attribute type value data type id",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Group attribute type value"
          }
        }
      },
      "SubSystem": {
        "type": "object",
        "properties": {
          "SubSystemHealth": {
            "type": "string",
            "description": "Health of subsystem."
          },
          "Type": {
            "type": "string",
            "description": "Type of subsystem."
          },
          "SubSystemName": {
            "type": "string",
            "description": "Name of subsystem."
          }
        }
      },
      "GroupReducedDevicesModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GroupModel"
          },
          {
            "type": "object",
            "properties": {
              "Devices": {
                "items": {
                  "$ref": "#/components/schemas/InfrastructureDeviceReducedModel"
                },
                "type": "array",
                "description": "List of devices containing minimal device details"
              },
              "SubGroups": {
                "items": {
                  "$ref": "#/components/schemas/GroupReducedDevicesModel"
                },
                "type": "array",
                "description": "List of subgroups"
              }
            }
          }
        ]
      },
      "TemplateDeployModel": {
        "type": "object",
        "properties": {
          "TargetIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "Schedule": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/DeviceAttributesUpdateModel"
            },
            "type": "array"
          },
          "NetworkBootIsoModel": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootIsoModel"
              }
            ]
          },
          "Options": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeployOptionModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AddAnnouncedTargetRequest": {
        "required": [
          "AnnouncedTarget"
        ],
        "type": "object",
        "properties": {
          "AnnouncedTarget": {
            "items": {
              "$ref": "#/components/schemas/AnnouncedTargetRequest"
            },
            "type": "array",
            "description": "List of servers and its credentials."
          }
        }
      },
      "DiscoveryConfigurationGroupJobResponseModel": {
        "type": "object",
        "properties": {
          "DiscoveryConfigurationGroupJobDetail": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryJobDetail"
            },
            "type": "array"
          }
        }
      },
      "DataSyncConfigurationModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category type of the configuration"
          },
          "AlertSeverityTypes": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Alert severities associated to the category"
          },
          "DeviceTypes": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Device types associated to the category"
          },
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group Ids associated to category"
          },
          "Schedule": {
            "type": "string",
            "description": "Schedule of the configuration"
          },
          "IsEnabled": {
            "type": "string",
            "description": "Forwarder enable status"
          },
          "FullSyncIterationNumber": {
            "type": "integer",
            "description": "Iteration number for the configuration",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the DataSyncConfigurationModel.",
            "format": "int32"
          }
        }
      },
      "ConsoleSettings": {
        "type": "object",
        "properties": {
          "PluginId": {
            "type": "string"
          },
          "Settings": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SettingsValueSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "ConsoleSettings"
      },
      "MIBEventType": {
        "required": [
          "EventTypeId"
        ],
        "type": "object",
        "properties": {
          "EventTypeId": {
            "type": "integer",
            "description": "Id of the event type.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name of the event type (e.g. SNMP)"
          },
          "Description": {
            "type": "string",
            "description": "Description of the event type."
          }
        }
      },
      "ApplianceTimeZoneModel": {
        "type": "object",
        "properties": {
          "ApplianceTZ": {
            "items": {
              "$ref": "#/components/schemas/ApplianceTimeZone"
            },
            "type": "array"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "OidcProviderName": {
            "type": "string"
          }
        }
      },
      "AuditLog": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "nullable": true
          },
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string"
          },
          "MessageArgs": {
            "type": "string",
            "nullable": true
          },
          "MessageID": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "AuditLog"
      },
      "DiscoveryConfigurationGroupsModel": {
        "type": "object",
        "properties": {
          "DiscoveryConfigGroupModel": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigGroupModel"
            },
            "type": "array"
          }
        }
      },
      "TemplateModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "TypeId": {
            "type": "integer",
            "description": "ID of the device type",
            "format": "int32"
          },
          "LastUpdatedTime": {
            "type": "string"
          },
          "IsBuiltIn": {
            "type": "boolean"
          },
          "Description": {
            "type": "string"
          },
          "Views": {
            "items": {
              "$ref": "#/components/schemas/AttributeViewModel"
            },
            "type": "array"
          },
          "CreationTime": {
            "type": "string"
          },
          "HasIdentityAttributes": {
            "type": "boolean",
            "description": "Determines if the template has identity attributes"
          },
          "IsStatelessAvailable": {
            "type": "boolean"
          },
          "Content": {
            "type": "string"
          },
          "IdentityPoolId": {
            "type": "integer",
            "format": "int32"
          },
          "LastUpdatedBy": {
            "type": "string"
          },
          "SourceDeviceId": {
            "type": "integer",
            "description": "ID of the device from which the template is created",
            "format": "int32"
          },
          "TaskId": {
            "type": "integer",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "string"
          },
          "IsPersistencePolicyValid": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the template",
            "format": "int32"
          },
          "ViewTypeId": {
            "type": "integer",
            "description": "ID of view type",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the template"
          }
        }
      },
      "ChassisIOModuleModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "FabricType": {
            "type": "integer",
            "description": "Chassis IO module fabric type",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis IO module",
            "format": "int32"
          },
          "Fqdd": {
            "type": "string",
            "description": "Chassis IO module FQDD"
          },
          "AssetTag": {
            "type": "string",
            "description": "Chassis IO module asset tag"
          },
          "Model": {
            "type": "string",
            "description": "Chassis IO module model"
          },
          "SerialNumber": {
            "type": "string",
            "description": "Chassis IO module serail number"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis IO module id",
            "format": "int64"
          }
        }
      },
      "UsageIdentitySet": {
        "type": "object",
        "properties": {
          "IdentitySetId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Ethernet/iSCSI/FCoE/FC"
          },
          "Details": {
            "items": {
              "$ref": "#/components/schemas/UsageDetail"
            },
            "type": "array"
          }
        }
      },
      "FabricDesignApplicableNodesResponseModel": {
        "type": "object",
        "properties": {
          "DesignCriteria": {
            "items": {
              "$ref": "#/components/schemas/FabricDesignCriterionModel"
            },
            "type": "array"
          }
        }
      },
      "ComplianceStatusModel": {
        "type": "object",
        "properties": {
          "StatusName": {
            "type": "string"
          },
          "StatusId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MembershipType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "MembershipType"
      },
      "Port": {
        "type": "object",
        "properties": {
          "LinkSpeed": {
            "type": "integer",
            "description": "indicates the nic link speed",
            "format": "int32"
          },
          "PortId": {
            "type": "string",
            "description": "Port id"
          },
          "InitiatorPrimaryDns": {
            "type": "string",
            "description": "Port initiator primary dns details"
          },
          "LinkStatus": {
            "type": "string",
            "description": "Port link status"
          },
          "Partitions": {
            "items": {
              "$ref": "#/components/schemas/Partition"
            },
            "type": "array",
            "description": "Nic list of partitions"
          },
          "TargetIpAddress": {
            "type": "string",
            "description": "Port target ip address details"
          },
          "InitiatorSecondaryDns": {
            "type": "string",
            "description": "Port initiator secondary dns details"
          },
          "InitiatorName": {
            "type": "string",
            "description": "Port initiator name details"
          },
          "InitiatorSubnetMask": {
            "type": "string",
            "description": "Port initiator subnet mask details"
          },
          "InitiatorIpAddress": {
            "type": "string",
            "description": "Port initiator ip address details"
          },
          "ProductName": {
            "type": "string",
            "description": "Port product name"
          },
          "TargetFcoeWwpn": {
            "type": "string",
            "description": "Port target FCOE WWPN details"
          },
          "InitiatorGateway": {
            "type": "string",
            "description": "Port initiator gateway details"
          }
        }
      },
      "ApplicationCapabilityModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Name of application capability."
          },
          "Description": {
            "type": "string",
            "description": "Description of application capability."
          }
        }
      },
      "GroupMembershipUpdateDetails": {
        "type": "object",
        "properties": {
          "devicesAdded": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          },
          "updated": {
            "type": "boolean",
            "nullable": true
          },
          "groupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "devicesRemoved": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "GroupMembershipUpdateDetails"
      },
      "AuditLogMessage": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Audit log Category"
          },
          "UserName": {
            "type": "string",
            "description": "User who performed the operation"
          },
          "Severity": {
            "type": "string",
            "description": "Audit log severity"
          },
          "MessageID": {
            "type": "string",
            "description": "Audit log message id"
          },
          "Message": {
            "type": "string",
            "description": "Audit log message"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Audit log creation date"
          },
          "IpAddress": {
            "type": "string",
            "description": "IP from where operation was performed"
          },
          "Id": {
            "type": "integer",
            "description": "Audit log id",
            "format": "int64"
          },
          "MessageArgs": {
            "type": "string",
            "description": "Message argumentes"
          }
        }
      },
      "AlertService": {
        "type": "object",
        "properties": {
          "AlertStatuses": {
            "items": {
              "$ref": "#/components/schemas/AlertStatus"
            },
            "type": "array"
          },
          "Alerts": {
            "items": {
              "$ref": "#/components/schemas/Alert"
            },
            "type": "array"
          },
          "AlertSeverities": {
            "items": {
              "$ref": "#/components/schemas/AlertSeverity"
            },
            "type": "array"
          },
          "AlertMessageDefinitionsCategories": {
            "items": {
              "$ref": "#/components/schemas/AlertMessageDefinitionCategory"
            },
            "type": "array"
          },
          "AlertCatalogs": {
            "items": {
              "$ref": "#/components/schemas/AlertCatalog"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "AlertCategories": {
            "items": {
              "$ref": "#/components/schemas/AlertCategories"
            },
            "type": "array"
          },
          "AlertMessageDefinitions": {
            "items": {
              "$ref": "#/components/schemas/AlertMessageDefinition"
            },
            "type": "array"
          },
          "Events": {
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "type": "array"
          }
        },
        "title": "AlertService"
      },
      "Hourly": {
        "type": "object",
        "properties": {
          "Frequency": {
            "type": "integer",
            "description": "No. of times job executes hourly.",
            "format": "int32"
          }
        }
      },
      "RemoveDeviceRequest": {
        "required": [
          "GroupId"
        ],
        "type": "object",
        "properties": {
          "GroupId": {
            "type": "integer",
            "description": "GroupId",
            "format": "int32"
          },
          "MemberDeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "MemberDeviceIds"
          }
        }
      },
      "WarrantyService": {
        "type": "object",
        "properties": {
          "WarrantySetting": {
            "items": {
              "$ref": "#/components/schemas/WarrantySetting"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Warranties": {
            "items": {
              "$ref": "#/components/schemas/Warranty"
            },
            "type": "array"
          }
        },
        "title": "WarrantyService"
      },
      "LocalizedMessage": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string",
            "description": "Localized message for API users"
          },
          "LocalizationKey": {
            "type": "string",
            "description": "Localization key"
          }
        }
      },
      "ServerProfileMinimalInfoModel": {
        "required": [
          "Id",
          "ServerServiceTag"
        ],
        "type": "object",
        "properties": {
          "ServerServiceTag": {
            "type": "string",
            "description": "The service tag of the compute"
          },
          "Id": {
            "type": "string",
            "description": "The identifier of the profile"
          }
        }
      },
      "SerialInterfaceValue": {
        "type": "object",
        "properties": {
          "SerialInterfaceValue": {
            "type": "string",
            "description": "Value for the serial interface"
          }
        }
      },
      "RegistrationModel": {
        "type": "object",
        "properties": {
          "AccessKey": {
            "type": "string",
            "description": "AccessKey for registration and can be obtained from Dell product support portal for registered user accounts."
          },
          "PIN": {
            "type": "string",
            "description": "PIN associated with the above Access Key  for registration and can be obtained from Dell product support portal for registered user accounts."
          }
        }
      },
      "Template": {
        "type": "object",
        "properties": {
          "Status": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TemplateAttributeViewEditDetail"
              }
            ],
            "nullable": true
          },
          "LastUpdatedTime": {
            "type": "string",
            "nullable": true
          },
          "IsBuiltIn": {
            "type": "boolean",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Views": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeView"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "CreationTime": {
            "type": "string",
            "nullable": true
          },
          "HasIdentityAttributes": {
            "type": "boolean",
            "nullable": true
          },
          "IsStatelessAvailable": {
            "type": "boolean",
            "nullable": true
          },
          "Content": {
            "type": "string",
            "nullable": true
          },
          "IdentityPoolId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastUpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "SourceDeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "IsPersistencePolicyValid": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ViewTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Template"
      },
      "sortFields": {
        "type": "object",
        "properties": {
          "FieldId": {
            "type": "integer",
            "description": "Field ID of sort field",
            "format": "int32"
          },
          "SortDir": {
            "type": "integer",
            "description": "SortDir of sort field",
            "format": "int32"
          }
        }
      },
      "SyslogProtocol": {
        "type": "object",
        "properties": {},
        "title": "SyslogProtocol"
      },
      "DeviceComponentTypeModel": {
        "type": "object",
        "title": "DeviceComponentTypeModel"
      },
      "ServerProfileRequestModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ServerProfileModel"
          },
          {
            "type": "object",
            "properties": {
              "ServerInterfaceProfiles": {
                "items": {
                  "$ref": "#/components/schemas/ServerInterfaceProfileRequestModel"
                },
                "type": "array",
                "description": "Server profiles networks"
              }
            }
          }
        ]
      },
      "ProfileStateModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "DnsSetting": {
        "type": "object",
        "properties": {
          "DnsFQDName": {
            "type": "string",
            "description": "DNS FQD name."
          },
          "DnsDomainName": {
            "type": "string",
            "description": "DNS domain Name."
          }
        }
      },
      "DeviceResponseModel": {
        "type": "object",
        "properties": {
          "Devices": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of devices enclosed in the response"
          }
        }
      },
      "ConnectionEndPointInformationModel": {
        "type": "object",
        "properties": {
          "Slot": {
            "type": "string",
            "description": "Slot of the IOM"
          },
          "PortNumber": {
            "type": "string",
            "description": "Port number"
          },
          "ChassisName": {
            "type": "string",
            "description": "Chassis Name of IOM"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Chassis Service tag of IOM"
          },
          "PortName": {
            "type": "string",
            "description": "Port name"
          },
          "NodeServiceTag": {
            "type": "string",
            "description": "IOM service tag"
          }
        }
      },
      "SettingRequestModel": {
        "type": "object",
        "properties": {
          "SettingType": {
            "type": "string",
            "description": "Type of setting."
          }
        }
      },
      "DeviceStatus": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "GlobalStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DeviceStatus"
      },
      "GroupTagServiceAction": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string"
          },
          "Command": {
            "type": "string"
          }
        }
      },
      "DeviceConnectionProfileModel": {
        "type": "object",
        "properties": {
          "DeviceId": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of deviceIds."
          },
          "CredentialProfile": {
            "description": "Credential profile.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CredentialProfile"
              }
            ]
          }
        }
      },
      "UnassignProfilesRequest": {
        "type": "object",
        "properties": {
          "SelectAll": {
            "type": "boolean"
          },
          "ProfileIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "IDs of the profiles to delete; only unassigned profiles will be deleted."
          },
          "ForceReclaim": {
            "type": "boolean"
          },
          "Filters": {
            "type": "string"
          }
        }
      },
      "DeviceAttributesUpdateModel": {
        "type": "object",
        "properties": {
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ReducedAttributeModel"
            },
            "type": "array"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "OIDCProvider": {
        "type": "object",
        "properties": {
          "OidcProviderName": {
            "type": "string"
          }
        }
      },
      "MetricDeviceAssociationModel": {
        "type": "object",
        "properties": {
          "ActionName": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "MetricType": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MetricTypeModel"
              }
            ]
          },
          "DeviceTypeId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Level": {
        "type": "object",
        "properties": {},
        "title": "Level"
      },
      "AlertsResponseModel": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "type": "integer",
            "description": "Total count of alerts.",
            "format": "int32"
          },
          "Alerts": {
            "items": {
              "$ref": "#/components/schemas/AlertModel"
            },
            "type": "array",
            "description": "List of alerts."
          }
        }
      },
      "QosTypeResponseModel": {
        "type": "object",
        "properties": {
          "QosTypes": {
            "items": {
              "$ref": "#/components/schemas/QosTypeModel"
            },
            "type": "array",
            "description": "The type of quality-of-service (QoS)."
          }
        }
      },
      "MetricsConsumptionResult": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsConsumptionValueSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "MetricsConsumptionResult"
      },
      "AutoDeployService": {
        "type": "object",
        "properties": {
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/AutoDeployTarget"
            },
            "type": "array"
          },
          "AutoDeploy": {
            "items": {
              "$ref": "#/components/schemas/AutoDeploy"
            },
            "type": "array"
          }
        },
        "title": "AutoDeployService"
      },
      "GroupDevicesSummaryModel": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceType": {
            "type": "integer",
            "description": "Indicates the device type (ex. 1000,2000,3000 etc).",
            "format": "int32"
          },
          "GroupDevicesStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/GroupDevicesStatusSummaryModel"
            },
            "type": "array",
            "description": "Indicates the group status summary details"
          }
        }
      },
      "ProfileUsage": {
        "type": "object",
        "title": "ProfileUsage"
      },
      "ServerDeviceModel": {
        "type": "object",
        "properties": {
          "IdracDnsName": {
            "type": "string",
            "description": "iDRAC DNS name."
          },
          "ServerOperatingSystems": {
            "items": {
              "$ref": "#/components/schemas/ServerOperatingSystemModel"
            },
            "type": "array",
            "description": "List of server operating system."
          },
          "ServerNetworkInterfaces": {
            "items": {
              "$ref": "#/components/schemas/ServerNetworkInterfaceModel"
            },
            "type": "array",
            "description": "List of server network interfaces."
          },
          "ServiceTag": {
            "type": "string",
            "description": "Service tag."
          },
          "ServerVirtualFlashes": {
            "items": {
              "$ref": "#/components/schemas/ServerVirtualFlashModel"
            },
            "type": "array",
            "description": "List of server virtual flashes."
          },
          "NodeId": {
            "type": "string",
            "description": "ID of node."
          },
          "PopulatedPCISlots": {
            "type": "integer",
            "description": "Populated PCI slots.",
            "format": "int32"
          },
          "SdCardPresent": {
            "type": "boolean",
            "description": "Indicates if SD card is present."
          },
          "PopulatedDIMMSlots": {
            "type": "integer",
            "description": "Populated DIMM slots.",
            "format": "int32"
          },
          "PopulatedCPUSockets": {
            "type": "integer",
            "description": "Populated CPU sockets.",
            "format": "int32"
          },
          "ExpressServiceCode": {
            "type": "string",
            "description": "Express service code."
          },
          "ServerDeviceCards": {
            "items": {
              "$ref": "#/components/schemas/ServerDeviceCardModel"
            },
            "type": "array",
            "description": "List of server device cards."
          },
          "ServerSupportedPowerStates": {
            "items": {
              "$ref": "#/components/schemas/ServerSupportedPowerStateModel"
            },
            "type": "array",
            "description": "List of server supported power states."
          },
          "ServerPowerSupplies": {
            "items": {
              "$ref": "#/components/schemas/ServerPowerSupplyModel"
            },
            "type": "array",
            "description": "List of server Power supplies."
          },
          "MaxCPUSockets": {
            "type": "integer",
            "description": "Maximum CPU sockets.",
            "format": "int32"
          },
          "ServerMemoryDevices": {
            "items": {
              "$ref": "#/components/schemas/ServerMemoryDeviceModel"
            },
            "type": "array",
            "description": "List of server memory devices."
          },
          "ResourceBlockModel": {
            "items": {
              "$ref": "#/components/schemas/ResourceBlockModel"
            },
            "type": "array"
          },
          "PlatformGuid": {
            "type": "string",
            "description": "Platform GUID."
          },
          "CsiorStatus": {
            "type": "string",
            "description": "CSIOR status."
          },
          "SystemGeneration": {
            "type": "string",
            "description": "iDRAC platform generation."
          },
          "MaxPCISlots": {
            "type": "integer",
            "description": "Maximum PCI slots.",
            "format": "int32"
          },
          "TotalMemory": {
            "type": "integer",
            "description": "Total memory of device.",
            "format": "int64"
          },
          "ServerProcessors": {
            "items": {
              "$ref": "#/components/schemas/ServerProcessorModel"
            },
            "type": "array",
            "description": "List of server processors."
          },
          "ServerStorageEnclosures": {
            "items": {
              "$ref": "#/components/schemas/ServerStorageEnclosureModel"
            },
            "type": "array",
            "description": "List of server storage enclosures."
          },
          "VlanId": {
            "type": "integer",
            "description": "ID of VLAN.",
            "format": "int32"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Chassis service tag."
          },
          "ServerRaidControllers": {
            "items": {
              "$ref": "#/components/schemas/ServerRaidControllerModel"
            },
            "type": "array",
            "description": "List of server RAID controllers."
          },
          "ServerFcCard": {
            "items": {
              "$ref": "#/components/schemas/ServerFcCardModel"
            },
            "type": "array",
            "description": "List of server FC card."
          },
          "ChassisSlot": {
            "type": "string",
            "description": "Chassis slot."
          },
          "MaxDIMMSlots": {
            "type": "integer",
            "description": "Maximum DIMM slots.",
            "format": "int32"
          },
          "ServerArrayDisks": {
            "items": {
              "$ref": "#/components/schemas/ServerArrayDiskModel"
            },
            "type": "array",
            "description": "List of server array disks."
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer of device."
          }
        }
      },
      "fields": {
        "type": "object",
        "properties": {
          "TableId": {
            "type": "integer",
            "description": "Table ID of field",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of field"
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Visibility of field"
          },
          "FieldTypeId": {
            "type": "integer",
            "description": "Field type ID of field",
            "format": "int32"
          },
          "EnumOpts": {
            "items": {
              "$ref": "#/components/schemas/enumOpts"
            },
            "type": "array",
            "description": "EnumOpts of field"
          },
          "StrMaxLen": {
            "type": "integer",
            "description": "Length of field",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of field",
            "format": "int32"
          }
        }
      },
      "ValidationAction": {
        "type": "object",
        "properties": {
          "Api": {
            "type": "string",
            "description": "Indicates the validation API"
          },
          "Valid": {
            "type": "boolean",
            "description": "Indicates if validation is valid"
          },
          "Validator": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/ApiValidator"
            },
            "type": "array",
            "description": "Reference to the API validator",
            "maxItems": 1
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with the validation",
            "format": "int32"
          },
          "ValidationClass": {
            "type": "string",
            "description": "Validation class type"
          },
          "BeanName": {
            "type": "string",
            "description": "Validation bean name"
          },
          "Method": {
            "type": "string",
            "description": "Indicates the validation method"
          }
        }
      },
      "ThresholdEntityType": {
        "type": "object",
        "properties": {},
        "title": "ThresholdEntityType"
      },
      "ComplianceAttributeModel": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ComplianceStatus": {
            "type": "integer",
            "format": "int32"
          },
          "IsReadOnly": {
            "type": "boolean",
            "description": "Determines if the attribute has been marked as read only in the attribute registry."
          },
          "IsIgnored": {
            "type": "boolean",
            "description": "Is the attribute ignored during template deployment and compliance checks."
          },
          "GroupNameId": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "AttributeId": {
            "type": "integer",
            "format": "int32"
          },
          "ExpectedValue": {
            "type": "string"
          },
          "AttributeEditInfoId": {
            "type": "integer",
            "format": "int32"
          },
          "CustomId": {
            "type": "integer",
            "format": "int32"
          },
          "ComplianceReason": {
            "type": "string"
          }
        }
      },
      "ServerInterfaceConfigurationModel": {
        "type": "object",
        "properties": {
          "NicBonded": {
            "type": "boolean",
            "description": "Indicates if NIC is bonded."
          },
          "NicIdentifier": {
            "type": "string",
            "description": "NIC identifier."
          },
          "UntaggedNetworkUUId": {
            "type": "string",
            "description": "Untagged network UUID."
          },
          "TaggedNetworksUUId": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of tagged network UUID."
          },
          "Partitions": {
            "items": {
              "$ref": "#/components/schemas/BandwidthPartitionModel"
            },
            "type": "array",
            "description": "List of partitions."
          }
        }
      },
      "GetIdentityCountsPayload": {
        "type": "object",
        "properties": {
          "IdentityPoolId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "GetIdentityCountsPayload"
      },
      "BaselineDetailsResponse": {
        "type": "object",
        "properties": {
          "BaselineDetail": {
            "items": {
              "$ref": "#/components/schemas/BaselineDetail"
            },
            "type": "array",
            "description": "List of baseline details."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          }
        }
      },
      "ConnectivityStatusModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of the connection."
          },
          "ConnectionCount": {
            "type": "integer",
            "description": "Number of plugins using connectivity service.",
            "format": "int32"
          },
          "Since": {
            "type": "string",
            "description": "Connection status since timestamp."
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the registration."
          }
        }
      },
      "ActionGetDevicesByPrivilegesPayload": {
        "type": "object",
        "properties": {
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of device privileges"
          }
        }
      },
      "PowerBounds": {
        "type": "object",
        "properties": {
          "LowerBound": {
            "type": "integer",
            "description": "Device Lower power bound.",
            "format": "int32"
          },
          "UpperBound": {
            "type": "integer",
            "description": "Device Upper power bound.",
            "format": "int32"
          }
        }
      },
      "StatusModel": {
        "type": "object",
        "properties": {
          "HealthRollup": {
            "type": "string",
            "description": "Indicates the health rollup status"
          },
          "State": {
            "type": "string",
            "description": "Indicates the state"
          },
          "Health": {
            "type": "string",
            "description": "Indicates the health status"
          }
        }
      },
      "MetricService": {
        "type": "object",
        "properties": {
          "TopOffenders": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TopOffender"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "TopEnergyConsumption": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/TopEnergyConsumersResponse"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "MetricsConsumption": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsConsumptionResult"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Metrics": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsResult"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Threshold": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Threshold"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "MetricTypes": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricType"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "EnergyConsumption": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnergyConsumptionResult"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "MetricService"
      },
      "ThresholdsModel": {
        "type": "object",
        "properties": {
          "LowerWarning": {
            "type": "integer",
            "description": "Lower warning value",
            "format": "int64"
          },
          "UpperCritical": {
            "type": "integer",
            "description": "Upper critical value",
            "format": "int64"
          },
          "UpperWarning": {
            "type": "integer",
            "description": "Upper warning value",
            "format": "int64"
          },
          "LowerCritical": {
            "type": "integer",
            "description": "Lower critical value",
            "format": "int64"
          }
        }
      },
      "ThresholdCountByType": {
        "type": "object",
        "properties": {
          "LowerWarning": {
            "type": "integer",
            "description": "Lower warning value",
            "format": "int32"
          },
          "UpperCritical": {
            "type": "integer",
            "description": "Upper critical value",
            "format": "int32"
          },
          "UpperWarning": {
            "type": "integer",
            "description": "Upper warning Value",
            "format": "int32"
          },
          "LowerCritical": {
            "type": "integer",
            "description": "Lower critical value",
            "format": "int32"
          }
        }
      },
      "EnergyConsumer": {
        "type": "object",
        "properties": {
          "ComponentId": {
            "type": "string",
            "description": "Component Id"
          },
          "Id": {
            "type": "integer",
            "description": "Energy consumer Id",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Energy consumer Value"
          },
          "Name": {
            "type": "string",
            "description": "Energy consumer Name"
          }
        }
      },
      "ReportDef": {
        "type": "object",
        "properties": {
          "LastRunDuration": {
            "type": "string",
            "nullable": true
          },
          "Category": {
            "type": "string",
            "nullable": true
          },
          "IsBuiltIn": {
            "type": "boolean",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "QsmQuery": {
            "type": "boolean",
            "nullable": true
          },
          "LastRunDate": {
            "type": "string",
            "nullable": true
          },
          "ColumnNames": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ColumnDef"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "FilterGroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastEditedBy": {
            "type": "string",
            "nullable": true
          },
          "QueryDef": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryDef"
              }
            ],
            "nullable": true
          },
          "FilterGroupName": {
            "type": "string",
            "nullable": true
          },
          "LastRunBy": {
            "type": "string",
            "nullable": true
          },
          "ReportResults": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReportResult"
              }
            ],
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ReportDef"
      },
      "ProfileState": {
        "type": "object",
        "title": "ProfileState"
      },
      "MulticastResponseModel": {
        "type": "object",
        "properties": {
          "MulticastNetworks": {
            "items": {
              "$ref": "#/components/schemas/MulticastNetworkModel"
            },
            "type": "array",
            "description": "List of multicast networks"
          }
        }
      },
      "Oem": {
        "type": "object",
        "properties": {}
      },
      "conditions": {
        "type": "object",
        "properties": {
          "LogicalOperatorId": {
            "type": "integer",
            "description": "Logical operator ID of condition",
            "format": "int32"
          },
          "RightParen": {
            "type": "boolean",
            "description": "RightParen of condition"
          },
          "OperatorId": {
            "type": "integer",
            "description": "Operator ID of condition",
            "format": "int32"
          },
          "LeftParen": {
            "type": "boolean",
            "description": "LeftParen of condition"
          },
          "FieldId": {
            "type": "integer",
            "description": "Field ID of condition",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Value of condition"
          }
        }
      },
      "PowerHoardersPayload": {
        "type": "object",
        "properties": {}
      },
      "Info": {
        "type": "object",
        "properties": {
          "Vendor": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Branding": {
            "type": "string",
            "nullable": true
          },
          "OperationStatus": {
            "type": "string",
            "nullable": true
          },
          "OperationName": {
            "type": "string",
            "nullable": true
          },
          "ManagementUri": {
            "type": "string",
            "nullable": true
          },
          "BuildNumber": {
            "type": "string",
            "nullable": true
          },
          "OperationJobId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "ProductType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "BuildDate": {
            "format": "date-time",
            "type": "string",
            "example": "2017-04-13T15:51:04Z",
            "nullable": true
          },
          "Guid": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Info"
      },
      "MetricsGroupModel": {
        "type": "object",
        "properties": {
          "Group": {
            "items": {
              "$ref": "#/components/schemas/GroupInfoList"
            },
            "type": "array",
            "description": "List of group information"
          }
        }
      },
      "GetUnallocatedSwitchesResponseModel": {
        "type": "object",
        "properties": {
          "ApplicableNodes": {
            "items": {
              "$ref": "#/components/schemas/FabricDesignApplicableNodeModel"
            },
            "type": "array"
          }
        }
      },
      "ReportDefOdataModel": {
        "type": "object",
        "properties": {}
      },
      "DeviceSummary": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "DeviceType": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "DeviceStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/DeviceStatusSummary"
            },
            "type": "array"
          }
        },
        "title": "DeviceSummary"
      },
      "TimeDetails": {
        "type": "object",
        "properties": {
          "TimeZoneIdWindows": {
            "type": "string",
            "description": "Time Zone Id in Windows"
          },
          "SystemTime": {
            "type": "string",
            "description": "Current System time"
          },
          "TimeSource": {
            "type": "string",
            "description": "Time Source"
          },
          "JobId": {
            "type": "string",
            "description": "Job Id for this process"
          },
          "UtcTime": {
            "type": "string",
            "description": "Universal Time Coordinated time"
          },
          "TimeZoneIdLinux": {
            "type": "string",
            "description": "Time Zone Id in Linux"
          },
          "SecondaryNTPAddress1": {
            "type": "string",
            "description": "Secondary NTP address 1"
          },
          "SecondaryNTPAddress2": {
            "type": "string",
            "description": "Secondary NTP address 2"
          },
          "TimeZone": {
            "type": "string",
            "description": "Time Zone Id"
          },
          "EnableNTP": {
            "type": "boolean",
            "description": "NTP is enabled or not"
          },
          "PrimaryNTPAddress": {
            "type": "string",
            "description": "Primary NTP address"
          }
        }
      },
      "TopEnergyConsumer": {
        "type": "object",
        "properties": {}
      },
      "TrapStatusEnum": {
        "type": "object",
        "properties": {},
        "title": "TrapStatusEnum"
      },
      "GroupSummaryDetailResponseModel": {
        "type": "object",
        "properties": {
          "GroupSummary": {
            "items": {
              "$ref": "#/components/schemas/GroupSummary"
            },
            "type": "array",
            "description": "List of group summary model."
          }
        }
      },
      "ServerInterfaceNetworksTemplateModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Networks": {
            "items": {
              "$ref": "#/components/schemas/NetworkModel"
            },
            "type": "array",
            "description": "Tagged VLANs"
          }
        }
      },
      "SingleUpdatePayload": {
        "required": [
          "FileToken"
        ],
        "type": "object",
        "properties": {
          "FileToken": {
            "type": "string"
          }
        }
      },
      "ClientAuthorizeResponse": {
        "type": "object",
        "properties": {
          "R": {
            "type": "string"
          },
          "Iv": {
            "type": "string"
          },
          "Response": {
            "type": "string"
          },
          "ClientSSLCert": {
            "type": "string"
          },
          "Hmac": {
            "type": "string"
          }
        }
      },
      "InventoryTypesModel": {
        "type": "object",
        "properties": {
          "InventoryTypes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of inventories types"
          }
        }
      },
      "DeviceMinModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int64"
          },
          "DeviceName": {
            "type": "string"
          },
          "ManagedState": {
            "type": "integer",
            "format": "int32"
          },
          "PowerState": {
            "type": "integer",
            "format": "int32"
          },
          "SlotName": {
            "type": "string"
          },
          "AssetTag": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "DeviceManagement": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementMinModel"
            },
            "type": "array"
          },
          "Enabled": {
            "type": "boolean"
          },
          "ConnectionStateReason": {
            "type": "integer",
            "description": "Indicates the associated connection state details for a device. ",
            "format": "int32"
          },
          "DeviceServiceTag": {
            "type": "string"
          },
          "ConnectionState": {
            "type": "boolean"
          },
          "ChassisName": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "Identifier": {
            "type": "string"
          },
          "Type": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FabricDesignMappingModel": {
        "required": [
          "DesignNode",
          "PhysicalNode"
        ],
        "type": "object",
        "properties": {
          "PhysicalNode": {
            "type": "string",
            "description": "Service Tag of the switch that you want to configure for the given fabric"
          },
          "DesignNode": {
            "type": "string",
            "description": "DesignNode must be identical to the name provided in the selected fabric design"
          }
        }
      },
      "InfrastructureGroupTypeModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the infrastructure group type"
          },
          "Id": {
            "type": "integer",
            "description": "Group Type Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group type"
          }
        }
      },
      "FilterSummary": {
        "type": "object",
        "properties": {
          "FilterText": {
            "type": "string",
            "description": "Filter text"
          },
          "UsageId": {
            "type": "integer",
            "description": "Usage ID of filter",
            "format": "int32"
          },
          "ContextId": {
            "type": "integer",
            "description": "Context ID of filter",
            "format": "int32"
          },
          "FilterId": {
            "type": "integer",
            "description": "Filter ID of filter",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of filter"
          }
        }
      },
      "Query": {
        "type": "object",
        "properties": {
          "ContextId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "SortFields": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/SortField"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ResultFields": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "UsageId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "FilterText": {
            "type": "string",
            "nullable": true
          },
          "ReportSettings": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/QueryReportSetting"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Conditions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Condition"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Query"
      },
      "QueryDetail": {
        "type": "object",
        "properties": {
          "ContextId": {
            "type": "integer",
            "description": "Context ID of query",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of query"
          },
          "UsageId": {
            "type": "integer",
            "description": "Usage ID of query",
            "format": "int32"
          },
          "FilterText": {
            "type": "string",
            "description": "Filter text of query"
          },
          "SortFields": {
            "items": {
              "$ref": "#/components/schemas/sortFields"
            },
            "type": "array",
            "description": "Sort fields of query"
          },
          "ResultFields": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Result fields of query"
          },
          "FilterId": {
            "type": "integer",
            "description": "Filter ID of query",
            "format": "int32"
          },
          "ReportSettings": {
            "items": {
              "$ref": "#/components/schemas/QueryReportSetting"
            },
            "type": "array",
            "description": "Report settings of query"
          }
        }
      },
      "DeviceInventoryModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "InventoryHash": {
            "type": "string",
            "description": "Indicates the inventory hash-key"
          },
          "InventoryTypeId": {
            "type": "integer",
            "description": "Indicates the type of inventory",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Device inventory id",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device id to the inventory",
            "format": "int32"
          }
        }
      },
      "Temperature": {
        "type": "object",
        "properties": {
          "UpperThresholdNonCritical": {
            "type": "integer",
            "description": "Temperature upper threshold non critical",
            "format": "int32"
          },
          "Status": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "type": "array",
            "description": "List of current power status",
            "maxItems": 1
          },
          "Name": {
            "type": "string",
            "description": "Temperature name"
          },
          "LowerThresholdNonCritical": {
            "type": "integer",
            "description": "Temperature lower non critical threshold",
            "format": "int32"
          },
          "PhysicalContext": {
            "type": "string",
            "description": "Temperature physical context details"
          },
          "UpperThresholdCritical": {
            "type": "integer",
            "description": "Temperature upper threshold critical",
            "format": "int32"
          },
          "MemberId": {
            "type": "string",
            "description": "The member id associated to the temperature"
          },
          "ReadingCelsius": {
            "type": "integer",
            "description": "Temperature current reading celsius",
            "format": "int32"
          },
          "LowerThresholdCritical": {
            "type": "integer",
            "description": "Temperature lower critical threshold",
            "format": "int32"
          }
        }
      },
      "ApplicableUplinkPortsResponseModel": {
        "type": "object",
        "properties": {
          "ApplicableUplinkPorts": {
            "items": {
              "$ref": "#/components/schemas/ApplicableUplinkPortModel"
            },
            "type": "array"
          }
        }
      },
      "EnumOpt": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "EnumOpt"
      },
      "ProxyDetails": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "User Name"
          },
          "EnableAuthentication": {
            "type": "boolean",
            "description": "Enable Authentication"
          },
          "EnableProxy": {
            "type": "boolean",
            "description": "Enable Proxy"
          },
          "SslCheckDisabled": {
            "type": "boolean",
            "description": "SSL Check Disabled"
          },
          "Password": {
            "type": "string",
            "description": "Password"
          },
          "IpAddress": {
            "type": "string",
            "description": "IP Address"
          }
        }
      },
      "guid": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}",
            "type": "string"
          }
        },
        "title": "guid"
      },
      "DeviceCapabilitiesModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "InfrastructureDevice": {
            "type": "integer",
            "description": "Indicates the associated device to the device capabilities",
            "format": "int64"
          },
          "CapabilityType": {
            "description": "Indicates the type of capability",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/CapabilityTypeModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "Device capabilities id",
            "format": "int64"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner of the device capabilities",
            "format": "int32"
          }
        }
      },
      "AlertCatalogModel": {
        "type": "object",
        "properties": {
          "InternalName": {
            "type": "string",
            "description": "Internal name associated with the catalog."
          },
          "IsBuiltIn": {
            "type": "boolean",
            "description": "Indicates if the catalog in built-in or is manually included."
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Indicates if the catalog is visible or hidden."
          },
          "ReleaseVersion": {
            "type": "string",
            "description": "Catalog version."
          },
          "Id": {
            "type": "integer",
            "description": "Catalog ID.",
            "format": "int64"
          },
          "CatalogName": {
            "type": "string",
            "description": "Name of the catalog."
          }
        }
      },
      "GroupDAOAttributeValidationRegex": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation regular expression id",
            "format": "int32"
          }
        }
      },
      "StorageDurationEnum": {
        "type": "object",
        "properties": {},
        "title": "StorageDurationEnum"
      },
      "DiscoveryConfigTaskParam": {
        "type": "object",
        "properties": {
          "TaskTypeId": {
            "type": "integer",
            "description": "ID to identify the task type as Discovery task.",
            "format": "int32"
          },
          "ExecutionSequence": {
            "type": "integer",
            "description": "Sequence at which the task will be executed.",
            "format": "int32"
          },
          "TaskId": {
            "type": "integer",
            "description": "ID of the Task created for Discovery Job.",
            "format": "int32"
          }
        }
      },
      "BaselinesModel": {
        "required": [
          "Name",
          "CatalogId",
          "RepositoryId",
          "DowngradeEnabled",
          "Is64Bit",
          "Targets"
        ],
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string"
          },
          "Description": {
            "type": "string",
            "description": "Description of the baseline"
          },
          "DeviceComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/DeviceComplianceReportModel"
            },
            "type": "array"
          },
          "RepositoryType": {
            "type": "string"
          },
          "CatalogId": {
            "type": "integer",
            "description": "ID of the catalog. Users must enumerate all catalogs and match the 'Name' of the repository with the input provided while creating the catalog",
            "format": "int64"
          },
          "RepositoryId": {
            "type": "integer",
            "description": "ID of the repository. Derived from the catalog response",
            "format": "int64"
          },
          "Is64Bit": {
            "type": "boolean",
            "description": "This must always be set to true. The size of the DUP files used is 64 bits."
          },
          "TaskId": {
            "type": "integer",
            "description": "Identifier of task which created this baseline.",
            "format": "int64"
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/TargetModel"
            },
            "type": "array",
            "description": "The DeviceID, if the baseline is being created for devices or, the GroupID, if the baseline is being created for a group of devices."
          },
          "DowngradeEnabled": {
            "type": "boolean",
            "description": "Indicates if the firmware can be downgraded"
          },
          "TaskStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "RepositoryName": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ComplianceSummary": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ComplianceSummaryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Name": {
            "type": "string",
            "description": "Name of the baseline"
          }
        }
      },
      "NetworkControllerModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InfrastructureDeviceModel"
          },
          {
            "type": "object",
            "properties": {
              "UserName": {
                "type": "string"
              },
              "SslCert": {
                "type": "string"
              },
              "DeviceIdentifier": {
                "type": "string"
              },
              "IsLocal": {
                "type": "boolean"
              },
              "HttpServiceType": {
                "type": "string"
              },
              "GroupIdentifier": {
                "type": "string"
              },
              "ConnectionProfileId": {
                "type": "integer",
                "format": "int32"
              },
              "ManagementUri": {
                "type": "string"
              },
              "GroupName": {
                "type": "string"
              },
              "NetworkDeviceType": {
                "type": "string"
              },
              "SigningText": {
                "type": "string"
              },
              "ChassisIdentifier": {
                "type": "string"
              },
              "PrvSubscriptionID": {
                "type": "string"
              },
              "Password": {
                "type": "string"
              },
              "IpAddress": {
                "type": "string"
              },
              "Id": {
                "type": "integer",
                "format": "int32"
              },
              "McmRoleType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "EventTypeModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "GroupDAOAttributeValidationDecimal": {
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer",
            "description": "Indicates the max decimal range for the validation"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation decimal id",
            "format": "int32"
          },
          "Min": {
            "type": "integer",
            "description": "Indicates the min decimal range for the validation"
          }
        }
      },
      "Updates": {
        "type": "object",
        "properties": {
          "Update": {
            "items": {
              "$ref": "#/components/schemas/Update"
            },
            "type": "array"
          }
        }
      },
      "Groups": {
        "type": "object",
        "properties": {
          "GroupType": {
            "type": "string"
          },
          "DistinguishedName": {
            "type": "string"
          },
          "ObjectSid": {
            "type": "string"
          },
          "DomainComponent": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "CommonName": {
            "type": "string"
          },
          "ObjectGuid": {
            "type": "string"
          }
        }
      },
      "GroupsResponseModel": {
        "type": "object",
        "properties": {
          "Groups": {
            "items": {
              "$ref": "#/components/schemas/GroupModel"
            },
            "type": "array"
          }
        }
      },
      "CertificateInfo": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CertificateDetails"
          },
          {
            "type": "object",
            "properties": {
              "Id": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "PrivilegeRequest": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Privilege request type"
          },
          "Location": {
            "type": "string",
            "description": "Privilege request location"
          }
        }
      },
      "EventSubCategory": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Prefix": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "EventSubCategory"
      },
      "SessionServiceModel": {
        "type": "object",
        "properties": {
          "Status": {
            "description": "Status of the session service object.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Status"
              }
            ]
          },
          "SessionTimeout": {
            "type": "integer",
            "description": "Session timeout information.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name of the session service."
          },
          "ServiceEnabled": {
            "type": "boolean",
            "description": "Boolean value for the service enabled status."
          },
          "Id": {
            "type": "string",
            "description": "Id of the session service object."
          },
          "Description": {
            "type": "string",
            "description": "Description of the session service object."
          }
        }
      },
      "GetPrivilege": {
        "type": "object",
        "properties": {
          "DeviceTypeId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "DeviceId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "AccountId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "GetPrivilege"
      },
      "TaskDocumentModel": {
        "type": "object",
        "properties": {
          "TskDevIdent": {
            "type": "string"
          },
          "CustomTags": {
            "type": "string"
          },
          "TypCat": {
            "type": "string"
          },
          "TskEnb": {
            "type": "string"
          },
          "TskPrm": {
            "type": "string"
          },
          "TskStatus": {
            "type": "string"
          },
          "TskId": {
            "type": "string"
          },
          "OwnerUserId": {
            "type": "string"
          },
          "TskDesc": {
            "type": "string"
          },
          "TskTyp": {
            "type": "string"
          },
          "TskUpdBy": {
            "type": "string"
          },
          "TskCreatedBy": {
            "type": "string"
          },
          "TskNm": {
            "type": "string"
          }
        }
      },
      "DellConnectivityService": {
        "type": "object",
        "properties": {
          "ConnectivityStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConnectivityStatus"
              }
            ],
            "nullable": true
          },
          "RegistrationStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RegistrationStatus"
              }
            ],
            "nullable": true
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          }
        },
        "title": "DellConnectivityService"
      },
      "InventoryDetailsModel": {
        "type": "object",
        "properties": {
          "InventoryType": {
            "type": "string",
            "description": "Indicates the type of inventory"
          },
          "InventoryInfo": {
            "type": "object",
            "description": "Indicates the inventory information details"
          }
        }
      },
      "SimpleSyslogSettings": {
        "type": "object",
        "properties": {
          "Enabled": {
            "type": "boolean",
            "description": "Boolean if syslog settings are enabled."
          },
          "Id": {
            "type": "integer",
            "description": "ID of Syslog Configuration.",
            "format": "int64"
          },
          "Server": {
            "type": "string",
            "description": "Server information."
          }
        }
      },
      "ForwarderConfigurationResponseModel": {
        "type": "object",
        "title": "ForwarderConfigurationResponseModel"
      },
      "LicenseAgreement": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string",
            "description": "Content"
          },
          "Title": {
            "type": "string",
            "description": "Title"
          }
        }
      },
      "CreateProfilesModel": {
        "required": [
          "TemplateId",
          "NamePrefix",
          "NumberOfProfilesToCreate"
        ],
        "type": "object",
        "properties": {
          "NumberOfProfilesToCreate": {
            "type": "integer",
            "format": "int32"
          },
          "NamePrefix": {
            "type": "string"
          },
          "NetworkBootToIso": {
            "description": "(Optional) If network boot from ISO settings are wanted for the new profiles, they are specified in this element.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ]
          },
          "Description": {
            "type": "string"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DeviceSlotsResponseModel": {
        "type": "object",
        "properties": {
          "DeviceSlots": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device slots"
          }
        }
      },
      "GraphicInfo": {
        "type": "object",
        "properties": {
          "Svg": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "GraphicInfo"
      },
      "EventDocumentModel": {
        "type": "object",
        "properties": {
          "EvtSvr": {
            "type": "string"
          },
          "CustomTags": {
            "type": "string"
          },
          "EvtStat": {
            "type": "string"
          },
          "EvtCat": {
            "type": "string"
          },
          "EvtMsgId": {
            "type": "string"
          },
          "EvtVarBindDtls": {
            "type": "string"
          },
          "EvtDevIdent": {
            "type": "string"
          },
          "EvtMsg": {
            "type": "string"
          },
          "EvtSubCatgry": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/EventSubCategoryModel"
              }
            ]
          },
          "EvtCatgry": {
            "type": "string"
          },
          "EvtGrpName": {
            "type": "string"
          },
          "EvtTyp": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/EventTypeModel"
              }
            ]
          },
          "EvtDevMdl": {
            "type": "string"
          },
          "EvtDevTyp": {
            "type": "string"
          },
          "TypCat": {
            "type": "string"
          },
          "EvtBaseEntity": {
            "type": "string"
          },
          "EvtId": {
            "type": "string"
          },
          "EvtDevMgmt": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementModel"
            },
            "type": "array"
          }
        }
      },
      "SessionIdListModel": {
        "type": "object",
        "properties": {
          "SessionIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of session Ids."
          }
        }
      },
      "SessionCredential": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "TtyType": {
            "type": "string",
            "nullable": true
          },
          "SessionType": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SessionCredential"
      },
      "ReportDefColModel": {
        "type": "object",
        "properties": {
          "Width": {
            "type": "integer",
            "description": "Width of the column in the report",
            "format": "int32"
          },
          "Sequence": {
            "type": "integer",
            "description": "Column sequence in the report",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the column of the report",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the column of the report"
          }
        }
      },
      "ServerUntaggedVlanUpdateTemplateModel": {
        "type": "object",
        "properties": {
          "ServerInterfaceProfiles": {
            "items": {
              "$ref": "#/components/schemas/ServerInterfaceUntaggedVlanTemplateModel"
            },
            "type": "array",
            "description": "Server profile interfaces"
          }
        }
      },
      "FabricResponseModel": {
        "type": "object",
        "properties": {
          "Fabrics": {
            "items": {
              "$ref": "#/components/schemas/FabricModel"
            },
            "type": "array"
          }
        }
      },
      "ExecutionHistoryModel": {
        "type": "object",
        "properties": {
          "JobId": {
            "type": "integer",
            "description": "Job associated with the execution history",
            "format": "int32"
          },
          "LastUpdateTime": {
            "type": "string",
            "description": "Timestamp when the job-execution history was last updated"
          },
          "StartTime": {
            "type": "string",
            "description": "The start time of job execution"
          },
          "Progress": {
            "type": "string",
            "description": "Percentage of completion"
          },
          "ExecutedBy": {
            "type": "string",
            "description": "Details of who executed the job"
          },
          "EndTime": {
            "type": "string",
            "description": "The end time of job execution"
          },
          "Id": {
            "type": "integer",
            "description": "Job execution history detail ID",
            "format": "int32"
          },
          "JobStatus": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/JobStatusModel"
            },
            "type": "array",
            "description": "Job execution history detail completion status",
            "maxItems": 1
          },
          "JobName": {
            "type": "string",
            "description": "Name of the job"
          }
        }
      },
      "NetworkConfigModel": {
        "type": "object",
        "properties": {
          "IdentityPoolId": {
            "type": "integer",
            "format": "int32"
          },
          "StrictCheck": {
            "type": "boolean",
            "description": "When this is set to true, strict check is performed i.e. checking the VLAN w.r.t. name, network type and vlan range. If it is false then only vlan name and network type is used for matching."
          },
          "PropagateVlan": {
            "type": "boolean"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/DeviceAttributesUpdateModel"
            },
            "type": "array"
          },
          "VlanAttributes": {
            "items": {
              "$ref": "#/components/schemas/Vlan"
            },
            "type": "array"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          },
          "BondingTechnology": {
            "type": "string"
          }
        }
      },
      "DeviceAttributeView": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceAttributeView"
      },
      "QosType": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "QosType"
      },
      "enumOpts": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of enumOpts",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of enumOpts"
          }
        }
      },
      "ServerNetworkInterface": {
        "type": "object",
        "properties": {
          "NicId": {
            "type": "string"
          },
          "SlotId": {
            "type": "string"
          },
          "Ports": {
            "items": {
              "$ref": "#/components/schemas/ServerNetworkInterfacePort"
            },
            "type": "array"
          }
        }
      },
      "DeviceStatusSummaryModel": {
        "type": "object",
        "properties": {
          "StatusType": {
            "type": "integer",
            "description": "Indicates the status type of the device status summary",
            "format": "int32"
          }
        }
      },
      "SecurityPolicyMessageModel": {
        "type": "object",
        "properties": {
          "SecurityPolicyMessage": {
            "type": "string",
            "description": "Security Policy Message displayed on the login screen"
          }
        }
      },
      "AttributeGroup": {
        "type": "object",
        "properties": {
          "SubAttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "GroupNameId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Attributes": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Attribute"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "AttributeGroup"
      },
      "AttributeEditDetails": {
        "type": "object",
        "properties": {
          "AttributeEditInfos": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeEditInfo"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "AttributeOptions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeOption"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeOptionSets": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeOptionSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "AttributeEditDetails"
      },
      "ExternalAcocuntProviderIds": {
        "type": "object",
        "properties": {
          "AccountProviderIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "DeleteAll": {
            "type": "boolean"
          }
        }
      },
      "SubSystemHealthFaultModel": {
        "type": "object",
        "properties": {
          "SubSystem": {
            "type": "string",
            "description": "Sub system info"
          },
          "FaultSummaryList": {
            "items": {
              "$ref": "#/components/schemas/FaultSummaryModel"
            },
            "type": "array",
            "description": "Summary list of faults"
          },
          "RollupStatus": {
            "type": "string",
            "description": "Sub system rollup status"
          },
          "FaultList": {
            "items": {
              "$ref": "#/components/schemas/FaultModel"
            },
            "type": "array",
            "description": "List of faults for the sub system"
          }
        }
      },
      "MulticastNetworkModel": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "description": "Date and time when the network was last updated."
          },
          "Description": {
            "type": "string",
            "description": "Description of the network."
          },
          "Mld": {
            "type": "boolean",
            "description": "MLD configuration flag."
          },
          "VlanMaximum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "CreationTime": {
            "type": "string",
            "description": "Date and time when the network was created."
          },
          "VlanMinimum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "InternalRefNWUUId": {
            "type": "string",
            "description": "Reference ID used for internal purposes."
          },
          "CreatedBy": {
            "type": "string",
            "description": "The user who created the network."
          },
          "UpdatedBy": {
            "type": "string",
            "description": "The user who last updated the network."
          },
          "Igmp": {
            "type": "boolean",
            "description": "IGMP configuration flag."
          },
          "Type": {
            "type": "integer",
            "description": "Network type. For more information, see the details of other URIs of this resource.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the network.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the network."
          }
        }
      },
      "ScheduleModel": {
        "type": "object",
        "properties": {
          "RunLater": {
            "type": "boolean",
            "nullable": true
          },
          "RunNow": {
            "type": "boolean",
            "nullable": true
          },
          "Cron": {
            "type": "string",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "nullable": true
          },
          "Recurring": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Recurrence"
              }
            ],
            "nullable": true
          }
        },
        "title": "ScheduleModel"
      },
      "AttributeOptionSetModel": {
        "type": "object",
        "properties": {
          "OptionId": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the attribute option set",
            "format": "int32"
          }
        }
      },
      "SyslogConfigList": {
        "type": "object",
        "properties": {
          "SyslogConfiguration": {
            "items": {
              "$ref": "#/components/schemas/SyslogConfiguration"
            },
            "type": "array"
          }
        }
      },
      "NetworkModel": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "description": "Date and time when the network was last updated."
          },
          "Description": {
            "type": "string",
            "description": "Description of the network."
          },
          "VlanMaximum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "CreationTime": {
            "type": "string",
            "description": "Date and time when the network was created."
          },
          "VlanMinimum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "InternalRefNWUUId": {
            "type": "string",
            "description": "Reference ID used for internal purposes."
          },
          "CreatedBy": {
            "type": "string",
            "description": "The user who created the network."
          },
          "UpdatedBy": {
            "type": "string",
            "description": "The user who last updated the network."
          },
          "Type": {
            "type": "integer",
            "description": "Network type. For more information, see the details of other URIs of this resource.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the network.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the network."
          }
        }
      },
      "FabricSummaryModel": {
        "type": "object",
        "properties": {
          "NodeCount": {
            "type": "integer",
            "description": "Active nodes in the fabric",
            "format": "int32"
          },
          "UplinkCount": {
            "type": "integer",
            "description": "Number of uplinks for the fabric",
            "format": "int32"
          },
          "ServerCount": {
            "type": "integer",
            "description": "Number of servers for the fabirc",
            "format": "int32"
          }
        }
      },
      "collectMetricsList": {
        "type": "object",
        "properties": {
          "CollectMetric": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/collectMetricElements"
            },
            "type": "array",
            "description": "List of collected metrics elements",
            "maxItems": 1
          }
        }
      },
      "AuditLogCategories": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "CategoriesDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AuditCategory"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "AuditLogCategories"
      },
      "ProcessorCollectionModel": {
        "type": "object",
        "properties": {
          "Processors": {
            "items": {
              "$ref": "#/components/schemas/ComputerSystemProcessorModel"
            },
            "type": "array",
            "description": "List of processors."
          }
        }
      },
      "Table": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ParentTableId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Table"
      },
      "snmpV1V2Credential": {
        "type": "object",
        "properties": {
          "Community": {
            "type": "string",
            "description": "Community string."
          }
        }
      },
      "GroupDAOAttributeValidationObject": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation object id",
            "format": "int32"
          },
          "ValidationElement": {
            "type": "object",
            "description": "Indicates the validation element associated with the validation object"
          },
          "ValidationType": {
            "description": "Indicates the type of validation associated with the validation object",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ValidationTypeEnum"
              }
            ]
          }
        }
      },
      "GroupTagServiceActionEnum": {
        "type": "object",
        "properties": {},
        "title": "GroupTagServiceActionEnum"
      },
      "ProfileViewModel": {
        "required": [
          "ProfileName"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "AssociationType": {
            "type": "integer",
            "format": "int32"
          },
          "AssociatedEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "BootToISOId": {
            "type": "integer",
            "description": "This is the ID of the object that contains network boot from ISO settings for the profile.",
            "format": "int32"
          },
          "CreationTime": {
            "type": "string"
          },
          "SourceTemplateId": {
            "type": "integer",
            "description": "ID of the template from which the profile was created.",
            "format": "int32"
          },
          "LastUpdatedBy": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "ProfileName": {
            "type": "string",
            "description": "Name of the profile"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceIdInSlot": {
            "type": "integer",
            "format": "int32"
          },
          "LastUpdatedTime": {
            "type": "string"
          }
        }
      },
      "AssociateProfileModel": {
        "type": "object",
        "properties": {
          "DestinationSlotEntityId": {
            "type": "integer",
            "description": "ID of the destination slot",
            "format": "int32"
          },
          "SourceDeviceEntityId": {
            "type": "integer",
            "description": "ID of the source device",
            "format": "int32"
          }
        }
      },
      "TimeIntervalEnum": {
        "type": "object",
        "properties": {},
        "title": "TimeIntervalEnum"
      },
      "ServerSimpleStorageModel": {
        "type": "object",
        "properties": {
          "ServerStorageEnclosures": {
            "items": {
              "$ref": "#/components/schemas/ServerStorageEnclosureModel"
            },
            "type": "array",
            "description": "List of server storage enclosures."
          },
          "Status": {
            "type": "integer",
            "description": "Status of server storage.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of server storage."
          },
          "UefiDevicePath": {
            "type": "string",
            "description": "UEFI device path."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server storage.",
            "format": "int32"
          },
          "ServerArrayDisks": {
            "items": {
              "$ref": "#/components/schemas/ServerArrayDiskModel"
            },
            "type": "array",
            "description": "List of server array disks."
          },
          "Name": {
            "type": "string",
            "description": "Name of server storage."
          }
        }
      },
      "AlertSeverityModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AlertCommonAttributesModel"
          },
          {
            "type": "object",
            "properties": {}
          }
        ]
      },
      "PluginsActionRequestModel": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "SkipStateCheck": {
            "type": "boolean"
          },
          "AcceptAllLicenseAgreements": {
            "type": "boolean"
          }
        }
      },
      "CodeType": {
        "type": "object",
        "properties": {},
        "title": "CodeType"
      },
      "QueryContextSummary": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of query"
          },
          "BaseCategoryId": {
            "type": "integer",
            "description": "Base category ID of query",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of query",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of query"
          }
        }
      },
      "SessionResponseModel": {
        "type": "object",
        "properties": {
          "Sessions": {
            "items": {
              "$ref": "#/components/schemas/SessionModel"
            },
            "type": "array",
            "description": "List of session objects available in appliance."
          }
        }
      },
      "tables": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of table",
            "format": "int32"
          },
          "ParentTableId": {
            "type": "integer",
            "description": "Parent table ID of table",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of table"
          }
        }
      },
      "authType": {
        "type": "object",
        "properties": {},
        "title": "authType"
      },
      "JobsResponseModel": {
        "type": "object",
        "properties": {
          "Jobs": {
            "items": {
              "$ref": "#/components/schemas/JobModel"
            },
            "type": "array"
          }
        }
      },
      "SNMPDestination": {
        "type": "object",
        "properties": {
          "snmpV1V2Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV1V2Credential"
            },
            "type": "array"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Enable SNMP Destination."
          },
          "Port": {
            "type": "integer",
            "description": "Port number.",
            "format": "int32"
          },
          "snmpV3Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV3Credential"
            },
            "type": "array"
          },
          "Server": {
            "type": "string",
            "description": "Server."
          }
        }
      },
      "EventSubCategoryModel": {
        "type": "object",
        "properties": {
          "Prefix": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "AttributeGroupModel": {
        "type": "object",
        "properties": {
          "SubAttributeGroups": {
            "items": {
              "$ref": "#/components/schemas/AttributeGroupModel"
            },
            "type": "array"
          },
          "DisplayName": {
            "type": "string",
            "description": "Name of the attribute group (e.g. BIOS) "
          },
          "GroupNameId": {
            "type": "integer",
            "description": "ID of the attribute group.",
            "format": "int32"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/AttributeModel"
            },
            "type": "array"
          }
        }
      },
      "CommonQueryModel": {
        "required": [
          "SqlStatement",
          "QueryDef",
          "ContextName",
          "QueryUsage",
          "ResultColKeys"
        ],
        "type": "object",
        "properties": {
          "QueryDef": {
            "type": "string",
            "description": "Indicates the type of definition"
          },
          "ContextName": {
            "type": "string",
            "description": "Indicates the name of the query context"
          },
          "QueryUsage": {
            "type": "integer",
            "description": "Indicates the usage for the query",
            "format": "int32"
          },
          "ResultColKeys": {
            "type": "string",
            "description": "Indicate the result key columns"
          },
          "Id": {
            "type": "integer",
            "description": "Id of the common query",
            "format": "int32"
          },
          "SqlStatement": {
            "type": "string",
            "description": "Indicates the SQL statement associated with the common query"
          }
        }
      },
      "DiscoveryConfigModel": {
        "required": [
          "DiscoveryConfigTargets",
          "ConnectionProfile"
        ],
        "type": "object",
        "properties": {
          "DiscoveryConfigTargets": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigTarget"
            },
            "type": "array",
            "description": "List of devices to be discovered."
          },
          "DeviceType": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of type of devices to be discovered."
          },
          "DiscoveryConfigStatus": {
            "type": "string",
            "description": "Status of the Discovery Configuration."
          },
          "DiscoveryConfigDescription": {
            "type": "string",
            "description": "Description of the Discovery Configuration."
          },
          "DiscoveryConfigId": {
            "type": "integer",
            "description": "ID of the Discovery Configuration.",
            "format": "int32"
          },
          "ConnectionProfileId": {
            "type": "integer",
            "description": "Associated Connection profile ID.",
            "format": "int32"
          },
          "ConnectionProfile": {
            "type": "string",
            "description": "Connection profile details."
          }
        }
      },
      "TemplateExport": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          },
          "ContentType": {
            "type": "string"
          },
          "ViewTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "JobType": {
        "type": "object",
        "properties": {
          "Internal": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "JobType"
      },
      "WarrantySettingModel": {
        "type": "object",
        "properties": {
          "WarrantySetting": {
            "items": {
              "$ref": "#/components/schemas/WarrantySetting"
            },
            "type": "array",
            "description": "Warranty setting"
          }
        }
      },
      "AttributeGroupNameModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ExecutionHistoryRecentActivityDetailsResponseModel": {
        "type": "object",
        "properties": {
          "ExecutionHistoryRecentActivityDetails": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistoryRecentActivityDetailsModel"
            },
            "type": "array"
          }
        }
      },
      "ReportDefModel": {
        "type": "object",
        "properties": {
          "LastRunDuration": {
            "type": "string",
            "description": "Last run duration of the report"
          },
          "Category": {
            "type": "string",
            "description": "Report category (e.g. Alerts)"
          },
          "IsBuiltIn": {
            "type": "boolean",
            "description": "Specifies whether it is a built-in report or a custom report"
          },
          "Description": {
            "type": "string",
            "description": "Description of the report"
          },
          "QsmQuery": {
            "type": "boolean",
            "description": "Unused"
          },
          "LastRunDate": {
            "type": "string",
            "description": "Time when the report was last run"
          },
          "ColumnNames": {
            "items": {
              "$ref": "#/components/schemas/ReportDefColModel"
            },
            "type": "array"
          },
          "JobId": {
            "type": "integer",
            "description": "Job ID associated with the report task",
            "format": "int32"
          },
          "LastEditedBy": {
            "type": "string",
            "description": "User who has last edited the report"
          },
          "QueryDef": {
            "description": "Information on the filters and context of the report",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/QueryDef"
              }
            ]
          },
          "FilterGroupName": {
            "type": "string",
            "description": "Name of the filter group in the report"
          },
          "ReportResultId": {
            "type": "integer",
            "description": "Report result ID",
            "format": "int64"
          },
          "LastRunBy": {
            "type": "string",
            "description": "The last user who has run the report"
          },
          "FilterGroupId": {
            "type": "integer",
            "description": "ID of the filter group in the report",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the report"
          }
        }
      },
      "NetworkType": {
        "type": "object",
        "properties": {
          "VendorCode": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "NetworkTrafficType": {
            "type": "string",
            "nullable": true
          },
          "QosType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "NetworkType"
      },
      "ComplianceAttributeGroup": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "ComplianceStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ComplianceSubAttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComplianceAttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "GroupNameId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Attributes": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComplianceAttribute"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ComplianceReason": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ComplianceAttributeGroup"
      },
      "ValidationActionMetadataCollection": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/ValidationActionMetadata"
            },
            "type": "array",
            "description": "List of validation actions metadata"
          }
        }
      },
      "DeviceRequest": {
        "required": [
          "GroupId"
        ],
        "type": "object",
        "properties": {
          "MemberDevices": {
            "items": {
              "$ref": "#/components/schemas/MemberDevice"
            },
            "type": "array",
            "description": "MemberDevices"
          },
          "GroupId": {
            "type": "integer",
            "description": "GroupId",
            "format": "int32"
          }
        }
      },
      "EnumerationDefinitionResponseModel": {
        "type": "object",
        "properties": {
          "EnumerationEntries": {
            "items": {
              "$ref": "#/components/schemas/EnumerationDefinitionModel"
            },
            "type": "array",
            "description": "List of enumerations"
          }
        }
      },
      "SessionUser": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "title": "SessionUser"
      },
      "ReportSetting": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DefaultValue": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Required": {
            "type": "boolean",
            "nullable": true
          },
          "FieldIds": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "FieldTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EnumOpts": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnumOpt"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "StrMaxLen": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ReportSetting"
      },
      "BandwidthPartitionModel": {
        "type": "object",
        "properties": {
          "NicMode": {
            "type": "boolean",
            "description": "NIC mode of partition."
          },
          "PartitionId": {
            "type": "integer",
            "description": "ID of partition.",
            "format": "int32"
          },
          "MinBandwidth": {
            "type": "integer",
            "description": "Minimum bandwidth.",
            "format": "int32"
          },
          "MaxBandwidth": {
            "type": "integer",
            "description": "Maximum bandwidth.",
            "format": "int32"
          },
          "FCoEOffloadMode": {
            "type": "boolean",
            "description": "Indicates if FCoE is in offload mode."
          },
          "ISCSIOffloadMode": {
            "type": "boolean",
            "description": "Indicates if iSCSI is in offload mode."
          }
        }
      },
      "CloneReportRequest": {
        "required": [
          "ReportDefId",
          "ReportDefName"
        ],
        "type": "object",
        "properties": {
          "ReportDefName": {
            "type": "string",
            "description": "Name of the cloned report"
          },
          "ReportDefId": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "Operator": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Operator"
      },
      "MIBImportService": {
        "type": "object",
        "properties": {
          "EventCatalogs": {
            "items": {
              "$ref": "#/components/schemas/MIBEventCatalog"
            },
            "type": "array"
          },
          "EventSeverities": {
            "items": {
              "$ref": "#/components/schemas/MIBEventSeverity"
            },
            "type": "array"
          },
          "EventCategories": {
            "items": {
              "$ref": "#/components/schemas/MIBEventCategory"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "MIBS": {
            "items": {
              "$ref": "#/components/schemas/GetTrapsPayload"
            },
            "type": "array"
          }
        },
        "title": "MIBImportService"
      },
      "ReportDefinitionIdRequest": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "resetMetricElements": {
        "type": "object",
        "properties": {
          "Attribute": {
            "type": "string",
            "description": "Attribute"
          },
          "DeviceTypes": {
            "items": {
              "$ref": "#/components/schemas/deviceTypesInfo"
            },
            "type": "array",
            "description": "List of device types"
          }
        }
      },
      "GroupDAOAction": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with the group DAO action",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Group DAO description"
          },
          "TagIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the group tags associated with the group DAO action"
          },
          "Name": {
            "type": "string",
            "description": "Group DAO action name"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO action id",
            "format": "int32"
          },
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the groups associated with the group DAO action"
          }
        }
      },
      "MCMBlobModel": {
        "type": "object",
        "properties": {
          "DmTyp": {
            "type": "string",
            "description": "DM type."
          },
          "GrpName": {
            "type": "string",
            "description": "Name of group."
          },
          "Addr": {
            "type": "string",
            "description": "Address."
          },
          "DmGrpId": {
            "type": "string",
            "description": "ID of DM group."
          },
          "rmtDmn": {
            "items": {
              "$ref": "#/components/schemas/rmtDmn"
            },
            "type": "array"
          },
          "DmRlTyp": {
            "type": "string",
            "description": "DM relation type."
          },
          "GrpId": {
            "type": "string",
            "description": "ID of group."
          },
          "CfgRep": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of Configuration."
          },
          "GrpDesc": {
            "type": "string",
            "description": "Description of group."
          },
          "Local": {
            "type": "boolean",
            "description": "Is local."
          },
          "JnAppr": {
            "type": "string",
            "description": "Join approval."
          }
        }
      },
      "DevicesConfigComplianceReport": {
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "InventoryTime": {
            "type": "string"
          },
          "DeviceType": {
            "type": "integer",
            "format": "int32"
          },
          "IpAddresses": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ComplianceStatus": {
            "type": "integer",
            "format": "int32"
          },
          "ServiceTag": {
            "type": "string"
          },
          "Model": {
            "type": "string"
          },
          "IpAddress": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CertificateCheckPayload": {
        "required": [
          "UriPath"
        ],
        "type": "object",
        "properties": {
          "UriPath": {
            "type": "string"
          }
        }
      },
      "IdentityPoolAddUpdIssue": {
        "type": "object",
        "properties": {
          "Topic": {
            "type": "string"
          },
          "Message": {
            "type": "string"
          },
          "Code": {
            "type": "integer",
            "format": "int64"
          },
          "Severity": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NamePreference": {
        "type": "object",
        "properties": {},
        "title": "NamePreference"
      },
      "PluginsLifecycleActionCompatibilityResponseModel": {
        "type": "object",
        "properties": {
          "Plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginActionCompatibilityResponseModel"
            },
            "type": "array",
            "description": "List of compatible plugins info"
          }
        }
      },
      "Ipv6Configuration": {
        "type": "object",
        "properties": {
          "StaticPrefixLength": {
            "type": "integer",
            "description": "Static prefix length.",
            "format": "int32"
          },
          "Enable": {
            "type": "boolean",
            "description": "Enable IPv6 configuration."
          },
          "StaticAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS server."
          },
          "EnableAutoConfiguration": {
            "type": "boolean",
            "description": "Enable auto configuration."
          },
          "StaticPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS server."
          },
          "StaticIPAddress": {
            "type": "string",
            "description": "Static IP address."
          },
          "UseDHCPForDNSServerNames": {
            "type": "boolean",
            "description": "Use DHCP for DNS server names."
          },
          "StaticGateway": {
            "type": "string",
            "description": "Static gateway."
          }
        }
      },
      "StorageVirtualDisk": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "WritePolicy": {
            "type": "string"
          },
          "Layout": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Fqdd": {
            "type": "string"
          },
          "StripeSize": {
            "type": "string"
          },
          "TargetId": {
            "type": "string"
          },
          "MediaType": {
            "type": "string"
          },
          "ReadPolicy": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "Size": {
            "type": "string"
          },
          "RollupStatus": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "CachePolicy": {
            "type": "string"
          }
        }
      },
      "AccountBasic": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "RoleId": {
            "type": "string"
          },
          "UserHash": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string"
          },
          "RoleName": {
            "type": "string"
          }
        },
        "title": "AccountBasic"
      },
      "AccountBasicResponseModel": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "UserDetails": {
            "items": {
              "$ref": "#/components/schemas/AccountBasic"
            },
            "type": "array"
          }
        },
        "title": "AccountBasicResponseModel"
      },
      "BaselineDevicesConfigComplianceReports": {
        "type": "object",
        "properties": {
          "DevicesConfigComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/DevicesConfigComplianceReport"
            },
            "type": "array"
          }
        }
      },
      "CertificateCheckResponse": {
        "type": "object",
        "properties": {
          "SignatureAlgorithmOid": {
            "type": "string",
            "nullable": true
          },
          "SerialNumber": {
            "type": "string",
            "nullable": true
          },
          "Issuer": {
            "type": "string",
            "nullable": true
          },
          "ValidityFrom": {
            "type": "string",
            "nullable": true
          },
          "PublicKey": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "ValidityTo": {
            "type": "string",
            "nullable": true
          },
          "Subject": {
            "type": "string",
            "nullable": true
          },
          "SignatureAlgorithm": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "CertificateCheckResponse"
      },
      "Fault": {
        "type": "object",
        "properties": {
          "SubSystem": {
            "type": "string",
            "nullable": true
          },
          "Severity": {
            "type": "string",
            "nullable": true
          },
          "Fqdd": {
            "type": "string",
            "nullable": true
          },
          "InstanceId": {
            "type": "string",
            "nullable": true
          },
          "TimeStamp": {
            "type": "string",
            "nullable": true
          },
          "DateFormat": {
            "type": "string",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Fault"
      },
      "NodeIdModel": {
        "type": "object",
        "properties": {
          "NodeId": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of IDs to be processed."
          }
        }
      },
      "DiscoveryConfigGroupErrorModel": {
        "type": "object",
        "properties": {
          "HasError": {
            "type": "boolean",
            "description": "True if there is any error in discovery configuration group request data."
          },
          "DiscoveryConfigRequestErrorModels": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigModelError"
            },
            "type": "array",
            "description": "Details of errors in discovery configuration request data."
          },
          "ScheduleError": {
            "description": "Gives details of errors present in schedule if any.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ErrorModel"
              }
            ]
          },
          "GroupRequestError": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of errors in discovery configuration group request data."
          }
        }
      },
      "PhysicalGroupsDevices": {
        "type": "object",
        "properties": {
          "ServiceTag": {
            "type": "string",
            "description": "ServiceTag"
          },
          "ManagedState": {
            "type": "integer",
            "description": "ManagedState",
            "format": "int64"
          },
          "PowerState": {
            "type": "integer",
            "description": "PowerState",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name"
          },
          "IsUserDefined": {
            "type": "boolean",
            "description": "IsUserDefined"
          },
          "HostName": {
            "type": "string",
            "description": "HostName"
          },
          "EstimatedMaxPower": {
            "type": "integer",
            "description": "EstimatedMaxPower",
            "format": "int32"
          },
          "ConnectionState": {
            "type": "boolean",
            "description": "ConnectionState"
          },
          "HealthStatus": {
            "type": "integer",
            "description": "HealthStatus",
            "format": "int64"
          },
          "Location": {
            "type": "string",
            "description": "Location"
          },
          "DeviceBladeInfo": {
            "items": {
              "$ref": "#/components/schemas/ChassisDevice"
            },
            "type": "array",
            "description": "DeviceBladeInfo"
          },
          "Model": {
            "type": "string",
            "description": "Model"
          },
          "SlotNumber": {
            "type": "integer",
            "description": "SlotNumber",
            "format": "int32"
          },
          "Type": {
            "type": "integer",
            "description": "Type",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "IsMonitored": {
            "type": "boolean",
            "description": "IsMonitored"
          },
          "Size": {
            "type": "integer",
            "description": "Size",
            "format": "int32"
          }
        }
      },
      "TemperatureUnitEnum": {
        "type": "object",
        "properties": {},
        "title": "TemperatureUnitEnum"
      },
      "MetricsConsumptionValueSet": {
        "type": "object",
        "properties": {
          "Type": {
            "type": "string",
            "description": "Metric consumption type"
          },
          "ComponentId": {
            "type": "string",
            "description": "Component Id"
          },
          "Value": {
            "type": "string",
            "description": "Metric consumption value"
          }
        }
      },
      "AuthenticationModelType": {
        "type": "object",
        "properties": {},
        "title": "AuthenticationModelType"
      },
      "Daily": {
        "type": "object",
        "properties": {
          "Frequency": {
            "type": "integer",
            "description": "No. of times job executes daily.",
            "format": "int32"
          },
          "Time": {
            "description": "Time at which job executes.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Time"
              }
            ]
          }
        }
      },
      "AlertDefinitionExtendedModel": {
        "type": "object",
        "properties": {
          "AlertCatalogName": {
            "type": "string",
            "description": "Catalog Name."
          },
          "AlertSeverityName": {
            "type": "string",
            "description": "Severity Name of alert."
          },
          "AlertTypeId": {
            "type": "integer",
            "description": "ID of alert type.",
            "format": "int64"
          },
          "AlertSeverityId": {
            "type": "integer",
            "description": "Id of alert severity.",
            "format": "int32"
          },
          "AlertTypeName": {
            "type": "string",
            "description": "Name of alert type."
          },
          "AlertCatalogId": {
            "type": "integer",
            "description": "Catalog ID of alert.",
            "format": "int64"
          },
          "AlertDefinitionId": {
            "type": "integer",
            "description": "ID of alert.",
            "format": "int64"
          }
        }
      },
      "DeviceSummaryResponseModel": {
        "type": "object",
        "properties": {
          "DeviceSummary": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device summaries"
          }
        }
      },
      "AlertMessageDefinitionModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category associated to the message."
          },
          "Prefix": {
            "type": "string",
            "description": "A 3-letter prefix of the message."
          },
          "Severity": {
            "type": "string",
            "description": "Type of severity."
          },
          "DetailedDescription": {
            "type": "string",
            "description": "Detailed description of the issue."
          },
          "MessageId": {
            "type": "string",
            "description": "ID of message definition."
          },
          "Message": {
            "type": "string",
            "description": "Message indicating the issue."
          },
          "SequenceNo": {
            "type": "integer",
            "description": "Sequence number of the message.",
            "format": "int32"
          },
          "RecommendedAction": {
            "type": "string",
            "description": "Recommended action for the message."
          },
          "SubCategory": {
            "type": "string",
            "description": "Subcategory associated with the message."
          }
        }
      },
      "GroupAttribute": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Group attribute name"
          },
          "IdCategory": {
            "type": "integer",
            "description": "Indicates the group attribute category",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Indicates the group attribute value"
          },
          "ValidationDecimal": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupAttributeValidationDecimal"
            },
            "type": "array",
            "description": "Indicate if group attribute validation of types decimal",
            "maxItems": 1
          },
          "ValidationEnum": {
            "type": "object",
            "description": "Indicate if group attribute validation using an enum"
          },
          "IdValidationType": {
            "type": "integer",
            "description": "Indicates the group attribute validation type",
            "format": "int32"
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Indicate if group attribute is visible"
          },
          "Units": {
            "type": "string",
            "description": "Indicates the group attribute value unit"
          },
          "ValidationRegex": {
            "type": "object",
            "description": "Indicate if group attribute validation using a regular expression"
          },
          "IsEditable": {
            "type": "boolean",
            "description": "Indicate if group attribute is editable"
          },
          "IdAttributeDataType": {
            "type": "integer",
            "description": "Indicates the group attribute data type",
            "format": "int32"
          },
          "ValidationInteger": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupAttributeValidationInteger"
            },
            "type": "array",
            "description": "Indicate if group attribute validation of types integer",
            "maxItems": 1
          },
          "CategoryName": {
            "type": "string",
            "description": "Group attribute category name"
          },
          "ValidationName": {
            "type": "string",
            "description": "Name of the validation"
          },
          "IsRequired": {
            "type": "boolean",
            "description": "Indicate if group attribute is required"
          },
          "IdAttributeType": {
            "type": "integer",
            "description": "Indicates the group attribute type",
            "format": "int32"
          },
          "DataTypeName": {
            "type": "string",
            "description": "Indicate if group attribute data type name"
          },
          "TypeName": {
            "type": "string",
            "description": "Indicate if group attribute type name"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the group attribute owner",
            "format": "int32"
          },
          "TagIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group attribute tag ids"
          },
          "IdGroup": {
            "type": "integer",
            "description": "Indicates the group attribute id group",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group attribute id",
            "format": "int32"
          }
        }
      },
      "VLANModel": {
        "required": [
          "Name",
          "VlanMaximum",
          "VlanMinimum",
          "Type"
        ],
        "type": "object",
        "properties": {
          "VlanMaximum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "Type": {
            "type": "integer",
            "description": "Network type. For more information, see the details of other URIs of this resource.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the network type."
          },
          "VlanMinimum": {
            "type": "integer",
            "description": "VLan can be defined as either a range or a single value. If a single value is defined, the same value is assigned to both VlanMaximum and VlanMinimum.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the network type."
          }
        }
      },
      "GroupAudit": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "nullable": true
          },
          "GlobalStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastQueryTime": {
            "type": "string",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "nullable": true
          },
          "GroupActions": {
            "items": {
              "$ref": "#/components/schemas/GroupAction"
            },
            "type": "array"
          },
          "MembershipTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DefinitionDescription": {
            "type": "string",
            "nullable": true
          },
          "AuditDateTime": {
            "type": "string",
            "nullable": true
          },
          "GroupAttributes": {
            "items": {
              "$ref": "#/components/schemas/GroupAttribute"
            },
            "type": "array"
          },
          "TypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AuditId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IdOwner": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "GroupHierarchyOperation": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DefinitionId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ParentId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupTags": {
            "items": {
              "$ref": "#/components/schemas/GroupTag"
            },
            "type": "array"
          },
          "GroupOperation": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IsAccessAllowed": {
            "type": "boolean",
            "nullable": true
          },
          "Visible": {
            "type": "boolean",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "GroupAudit"
      },
      "UplinkModel": {
        "required": [
          "Name",
          "Description",
          "MediaType",
          "NativeVLAN",
          "UfdEnable"
        ],
        "type": "object",
        "properties": {
          "UfdEnable": {
            "type": "string",
            "description": "To specify uplink failure detection is enable or disbale."
          },
          "NativeVLAN": {
            "type": "integer",
            "description": "Untagged network",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "The uplink description"
          },
          "Name": {
            "type": "string",
            "description": "The uplink Name"
          },
          "Summary": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/UplinkSummaryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "MediaType": {
            "type": "string",
            "description": "Type of the uplink. For more information,        see api/NetworkService/UplinkTypes"
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the uplink"
          }
        }
      },
      "MetricsCollectionInterval": {
        "type": "object",
        "properties": {},
        "title": "MetricsCollectionInterval"
      },
      "ChassisController": {
        "type": "object",
        "properties": {
          "State": {
            "type": "string"
          },
          "Health": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "SlotNumber": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ManagedDevicesSummary": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "PowerStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagedDevicesPowerSummaryModel"
              }
            ],
            "nullable": true
          },
          "ConnectedStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagedDevicesConnectionSummaryModel"
              }
            ],
            "nullable": true
          },
          "GlobalHealth": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagedDevicesStatusSummaryModel"
              }
            ],
            "nullable": true
          }
        },
        "title": "ManagedDevicesSummary"
      },
      "WebServerConfiguration": {
        "type": "object",
        "properties": {
          "EnableWebServer": {
            "type": "boolean",
            "description": "Enable web server"
          },
          "TimeOut": {
            "type": "integer",
            "description": "Web Server Timeout intervel",
            "format": "int32"
          }
        }
      },
      "AlertCategory": {
        "type": "object",
        "properties": {
          "SubCategoryDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertSubCategory"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "CatalogName": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AlertCategory"
      },
      "TargetActionRequestPayload": {
        "type": "object",
        "properties": {
          "TargetId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "TargetActionRequestPayload"
      },
      "AttributeEditInfoModel": {
        "type": "object",
        "properties": {
          "IsLinkedToIsSecure": {
            "type": "boolean"
          },
          "IsSecure": {
            "type": "boolean"
          },
          "DefaultOptionId": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          },
          "ValueMin": {
            "type": "number",
            "format": "double"
          },
          "IsReadOnly": {
            "type": "boolean",
            "description": "Determines if the attribute has been marked as read only in the attribute registry."
          },
          "DependencyText": {
            "type": "string"
          },
          "OptionSetId": {
            "type": "integer",
            "format": "int32"
          },
          "DataType": {
            "type": "integer",
            "description": "The type of data that can be stored in the attribute based on the current configuration, attribute name, etc.",
            "format": "int32"
          },
          "TextMaxLength": {
            "type": "integer",
            "format": "int32"
          },
          "IsExcludedFromCompliance": {
            "type": "boolean"
          },
          "GenericNameId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "TextMinLength": {
            "type": "integer",
            "format": "int32"
          },
          "ValueMax": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "GetAssignedIdentitiesRequest": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "BaseEntityId": {
            "type": "integer",
            "description": "This is the device or slot used to get the target inventory template.",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IPv6AddressOrigin": {
        "type": "object",
        "properties": {},
        "title": "IPv6AddressOrigin"
      },
      "UsageDetail": {
        "type": "object",
        "properties": {
          "Wwnn": {
            "type": "string",
            "nullable": true
          },
          "MacAddressConflict": {
            "type": "boolean",
            "nullable": true
          },
          "IdentitySetId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NicIdentifier": {
            "type": "string",
            "nullable": true
          },
          "ProfileId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Status": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "MacAddress": {
            "type": "string",
            "nullable": true
          },
          "WwpnConflict": {
            "type": "boolean",
            "nullable": true
          },
          "IscsiIqnState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IscsiIqnConflict": {
            "type": "boolean",
            "nullable": true
          },
          "BaseEntityId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TypeofDataSchemaFunction": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "WwpnState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "WwnnState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "HasConflict": {
            "type": "boolean",
            "nullable": true
          },
          "WwnnConflict": {
            "type": "boolean",
            "nullable": true
          },
          "IscsiInitiatorIpState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Wwpn": {
            "type": "string",
            "nullable": true
          },
          "IscsiInitiatorIp": {
            "type": "string",
            "nullable": true
          },
          "MacAddressState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IscsiInitiatorIpConflict": {
            "type": "boolean",
            "nullable": true
          },
          "DeviceInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceInfo"
              }
            ],
            "nullable": true
          },
          "IscsiIqn": {
            "type": "string",
            "nullable": true
          },
          "ProfileName": {
            "type": "string",
            "nullable": true
          },
          "UsageTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "UsageDetail"
      },
      "Baselines": {
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string",
            "nullable": true
          },
          "RepositoryName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DeviceComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/DeviceComplianceReport"
            },
            "type": "array"
          },
          "RepositoryType": {
            "type": "string",
            "nullable": true
          },
          "CatalogId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Is64Bit": {
            "type": "boolean",
            "nullable": true
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/Target"
            },
            "type": "array"
          },
          "DowngradeEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "TaskStatusId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "RepositoryId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ComplianceSummary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComplianceSummary"
              }
            ],
            "nullable": true
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "Baselines"
      },
      "ServerProcessor": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int64"
          },
          "MaxSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "SlotNumber": {
            "type": "string"
          },
          "Family": {
            "type": "string"
          },
          "InstanceId": {
            "type": "string"
          },
          "ModelName": {
            "type": "string"
          },
          "NumberOfCores": {
            "type": "integer",
            "format": "int32"
          },
          "BrandName": {
            "type": "string"
          },
          "Voltage": {
            "type": "string"
          },
          "NumberOfEnabledCores": {
            "type": "integer",
            "format": "int32"
          },
          "CurrentSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UplinkSummaryModel": {
        "type": "object",
        "properties": {
          "NetworkCount": {
            "type": "integer",
            "description": "Number of tagged networks",
            "format": "int32"
          },
          "PortCount": {
            "type": "integer",
            "description": "Number of ports attached to the uplink",
            "format": "int32"
          }
        }
      },
      "RepositoryType": {
        "enum": [
          "NFS",
          "CIFS",
          "FTP",
          "HTTP",
          "DELL_ONLINE",
          "HTTPS",
          "CUSTOM_DELL_CATALOG",
          "LOCAL_REPOSITORY"
        ],
        "type": "string",
        "title": "RepositoryType"
      },
      "DeviceManagement": {
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "nullable": true
          },
          "NetworkAddress": {
            "type": "string",
            "nullable": true
          },
          "InstrumentationName": {
            "type": "string",
            "nullable": true
          },
          "ManagementType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DnsName": {
            "type": "string",
            "nullable": true
          },
          "ManagementProfile": {
            "items": {
              "$ref": "#/components/schemas/ManagementProfileModel"
            },
            "type": "array"
          },
          "ManagementId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DeviceManagement"
      },
      "LastUpdateResult": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "boolean",
            "description": "True if upgrade attempted within 24 hours otherwise False"
          },
          "UpdateSuccessful": {
            "type": "boolean",
            "description": "Status of last update"
          },
          "TaskId": {
            "type": "integer",
            "description": "ID of the latest console upgrade job",
            "format": "int32"
          },
          "Message": {
            "type": "string",
            "description": "Information about upgrade job"
          },
          "Component": {
            "type": "string",
            "description": "Upgraded component which is OpenManage Enterprise"
          },
          "UpdateDateTime": {
            "type": "string",
            "description": "Time of last update"
          }
        }
      },
      "ComplianceDependenciesModel": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string"
          },
          "UniqueIdentifier": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "RebootRequired": {
            "type": "boolean"
          },
          "SourceName": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "Uri": {
            "type": "string"
          },
          "IsHardDependency": {
            "type": "boolean"
          },
          "UpdateAction": {
            "type": "string"
          },
          "ComplianceDependencyId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Device": {
        "type": "object",
        "properties": {
          "SlotConfiguration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SlotConfiguration"
              }
            ],
            "nullable": true
          },
          "PowerState": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Temperature": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TemperatureResponseModel"
              }
            ],
            "nullable": true
          },
          "RecentActivity": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistoryDetailModel"
            },
            "type": "array"
          },
          "SystemId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SystemUpTime": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/SystemUpTimeResponseModel"
              }
            ],
            "nullable": true
          },
          "Type": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Status": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "BlinkStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BlinkStatusResponseModel"
              }
            ],
            "nullable": true
          },
          "InventoryDetails": {
            "items": {
              "$ref": "#/components/schemas/InventoryDetail"
            },
            "type": "array"
          },
          "DeviceSubscription": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeviceSubscription"
              }
            ],
            "nullable": true
          },
          "DeviceManagement": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagement"
            },
            "type": "array"
          },
          "ConnectionStateReason": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "PowerUsageByDevice": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PowerUsageByDeviceResponseModel"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ConnectionState": {
            "type": "boolean",
            "nullable": true
          },
          "DeviceBladeSlots": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DeviceBladeSlots"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ManagedState": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "ChassisServiceTag": {
            "type": "string",
            "nullable": true
          },
          "Settings": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DeviceSetting"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "AssetTag": {
            "type": "string",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean",
            "nullable": true
          },
          "Model": {
            "type": "string",
            "nullable": true
          },
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "LastStatusTime": {
            "type": "string",
            "nullable": true
          },
          "SubSystemHealth": {
            "items": {
              "$ref": "#/components/schemas/SubSystemHealthFaultModel"
            },
            "type": "array"
          },
          "InventoryTypes": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InventoryTypes"
              }
            ],
            "nullable": true
          },
          "DeployRequired": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeployRequired"
              }
            ],
            "nullable": true
          },
          "Power": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PowerResponseModel"
              }
            ],
            "nullable": true
          },
          "LogSeverities": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LogSeverities"
              }
            ],
            "nullable": true
          },
          "GraphicInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GraphicInfo"
              }
            ],
            "nullable": true
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Id": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "HardwareLogs": {
            "items": {
              "$ref": "#/components/schemas/LogModel"
            },
            "type": "array"
          },
          "LastInventoryTime": {
            "type": "string",
            "nullable": true
          },
          "DeviceServiceTag": {
            "type": "string",
            "nullable": true
          },
          "DeviceCapabilities": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "Device"
      },
      "ErrorModel": {
        "type": "object",
        "properties": {
          "HasError": {
            "type": "boolean",
            "description": "True if there is any error in request data."
          },
          "ErrorMessage": {
            "type": "string",
            "description": "Exact error message."
          }
        }
      },
      "EventModel": {
        "type": "object",
        "properties": {
          "EventId": {
            "type": "string",
            "description": "Event ID."
          },
          "Severity": {
            "type": "string",
            "description": "Severity of the event."
          },
          "OrignalDeviceType": {
            "type": "integer",
            "description": "Original device type of event.",
            "format": "int64"
          },
          "EventType": {
            "type": "string",
            "description": "Event Type."
          },
          "MemberId": {
            "type": "string",
            "description": "Member Id of the event."
          },
          "MessageArgs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Message arguments."
          },
          "OriginOfCondition": {
            "type": "string",
            "description": "Origin condition of event."
          },
          "EventTimestamp": {
            "type": "string",
            "description": "Time of the event."
          },
          "MessageId": {
            "type": "string",
            "description": "Message Id of the event."
          },
          "Context": {
            "type": "string",
            "description": "Context of event."
          },
          "Message": {
            "type": "string",
            "description": "Message of the event."
          },
          "Id": {
            "type": "string",
            "description": "Id of Event."
          },
          "Oem": {
            "type": "object",
            "description": "OEM data."
          }
        }
      },
      "SessionActionRequestPayloadModel": {
        "type": "object",
        "properties": {
          "SessionIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of session Ids."
          }
        }
      },
      "ChassisTemperatureSensorModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Indicate the current state of the chassis temperature sensor"
          },
          "MinCriticalThreshold": {
            "type": "integer",
            "description": "Indicate the minimal critical threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Chassis temperature sensor name"
          },
          "ReadingCelsius": {
            "type": "string",
            "description": "Indicate the existing celsius reading for the chassis temperature sensor"
          },
          "MaxFatalThreshold": {
            "type": "integer",
            "description": "Indicate the max fatal threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "MinWarningThreshold": {
            "type": "integer",
            "description": "Indicate the minimal warning threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device with the chassis temperature sensor",
            "format": "int32"
          },
          "MaxCriticalThreshold": {
            "type": "integer",
            "description": "Indicate the max critical threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "Units": {
            "type": "integer",
            "description": "Indicate the unit of measure for the chassis temperature sensor",
            "format": "int64"
          },
          "MinFatalThreshold": {
            "type": "integer",
            "description": "Indicate the minimal fatal threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "MaxWarningThreshold": {
            "type": "integer",
            "description": "Indicate the max warning threshold for the chassis temperature sensor",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis temperature sensor id",
            "format": "int64"
          },
          "SensorNumber": {
            "type": "string",
            "description": "Chassis temperature sensor number"
          }
        }
      },
      "ChassisIOMDeviceModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InfrastructureDeviceModel"
          },
          {
            "type": "object",
            "properties": {
              "ExpressServiceCode": {
                "type": "string",
                "description": "The express service code of the device"
              },
              "FabricType": {
                "type": "string",
                "description": "Indicates the device fabric type"
              },
              "HardwareVersion": {
                "type": "string",
                "description": "The device hardware version"
              },
              "ActiveMode": {
                "type": "string",
                "description": "Indicates the active mode"
              },
              "Hostname": {
                "type": "string",
                "description": "Thd device hostname information"
              },
              "VlanId": {
                "type": "integer",
                "description": "Thd device vlan detail",
                "format": "int32"
              },
              "IomSlotId": {
                "type": "string",
                "description": "Indicates the device IOM slot id"
              }
            }
          }
        ]
      },
      "ReportResult": {
        "type": "object",
        "properties": {
          "ResultRows": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReportResultRow"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ResultRowColumns": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ColumnDef"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Title": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ReportResult"
      },
      "Filter": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Query"
          }
        ],
        "type": "object",
        "properties": {
          "ContextId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "UsageId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "FilterText": {
            "type": "string",
            "nullable": true
          },
          "Conditions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Condition"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Filter"
      },
      "MigrateProfileRequest": {
        "type": "object",
        "properties": {
          "ProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "ForceMigrate": {
            "type": "boolean"
          },
          "TargetId": {
            "type": "integer",
            "format": "int32"
          },
          "Schedule": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          }
        }
      },
      "SearchModel": {
        "required": [
          "QueryString"
        ],
        "type": "object",
        "properties": {
          "FilterType": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Indexes to be searched for the query string"
          },
          "QueryString": {
            "type": "string",
            "description": "String to search"
          }
        }
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "IsSecure": {
            "type": "boolean",
            "nullable": true
          },
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "IsIgnored": {
            "type": "boolean",
            "nullable": true
          },
          "IsReadOnly": {
            "type": "boolean",
            "nullable": true
          },
          "IsLinkedToSecure": {
            "type": "boolean",
            "nullable": true
          },
          "TargetSpecificTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "AttributeEditInfoId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CustomId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Attribute"
      },
      "resetMetricsList": {
        "type": "object",
        "properties": {
          "ResetMetric": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/resetMetricElements"
            },
            "type": "array",
            "description": "List of reset metric elements",
            "maxItems": 1
          }
        }
      },
      "BlinkStatusResponseModel": {
        "type": "object",
        "properties": {
          "IsLEDBlinking": {
            "type": "boolean",
            "description": "Indicates id LED is blinking"
          }
        }
      },
      "ServerMemoryDevice": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "BankName": {
            "type": "string"
          },
          "InstanceId": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "Rank": {
            "type": "string"
          },
          "TypeDetails": {
            "type": "string"
          },
          "CurrentOperatingSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceDescription": {
            "type": "string"
          },
          "ManufacturerDate": {
            "type": "string"
          },
          "PartNumber": {
            "type": "string"
          },
          "Size": {
            "type": "integer",
            "format": "int64"
          },
          "Speed": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Manufacturer": {
            "type": "string"
          }
        }
      },
      "ProfileDataModel": {
        "type": "object",
        "properties": {}
      },
      "InfrastructureDeviceModel": {
        "required": [
          "DeviceId"
        ],
        "type": "object",
        "properties": {
          "ManagedState": {
            "description": "Indicates the current managed state of the infrastructure device",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagedStateModel"
              }
            ]
          },
          "PowerState": {
            "description": "Indicates the current power state of the infrastructure device",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PowerStateModel"
              }
            ]
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Indicates the associated chassis service tag to the infrastructure device"
          },
          "GlobalStatus": {
            "description": "Indicates the current global status of the infrastructure device",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceStatusModel"
              }
            ]
          },
          "AssetTag": {
            "type": "string",
            "description": "Infrastructure device asset tag"
          },
          "Editable": {
            "type": "boolean",
            "description": "Indicates if the infrastructure device is editable"
          },
          "DeviceSoftware": {
            "items": {
              "$ref": "#/components/schemas/DeviceSoftwareModel"
            },
            "type": "array",
            "description": "Infrastructure device device software component details"
          },
          "DeviceType": {
            "description": "Indicates the infrastructure device type",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceTypeModel"
              }
            ]
          },
          "DeviceFru": {
            "items": {
              "$ref": "#/components/schemas/DeviceFruModel"
            },
            "type": "array",
            "description": "Infrastructure device field replaceable unit information"
          },
          "Model": {
            "type": "string",
            "description": "Infrastructure device model"
          },
          "Identifier": {
            "type": "string",
            "description": "Infrastructure device identifier"
          },
          "DeviceLicense": {
            "items": {
              "$ref": "#/components/schemas/DeviceLicenseModel"
            },
            "type": "array",
            "description": "Infrastructure device license details"
          },
          "DeviceInventory": {
            "items": {
              "$ref": "#/components/schemas/DeviceInventoryModel"
            },
            "type": "array",
            "description": "Infrastructure device inventory details"
          },
          "DeviceName": {
            "type": "string",
            "description": "Infrastructure device name"
          },
          "Connection_state": {
            "type": "boolean",
            "description": "Indicates the infrastructure device connection state"
          },
          "InventoryDetails": {
            "items": {
              "$ref": "#/components/schemas/InventoryDetailsModel"
            },
            "type": "array",
            "description": "List of inventory details associated to the infrastructure device"
          },
          "DeviceSubscription": {
            "description": "Provided infrastructure device subscription details",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceSubscriptionModel"
              }
            ]
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates if the infrastructure device is visible"
          },
          "DeviceManagement": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementModel"
            },
            "type": "array",
            "description": "List of device managements associated to the infrastructure device"
          },
          "SubsystemRollupStatus": {
            "items": {
              "$ref": "#/components/schemas/SubsystemRollupStatusModel"
            },
            "type": "array",
            "description": "Indicates the sub system rollup status of the infrastructure device"
          },
          "ConnectionStateReason": {
            "type": "integer",
            "description": "Indicates the associated connection state reason for the reduced infrastructure device. ",
            "format": "int32"
          },
          "DeviceLocation": {
            "description": "Infrastructure device location details",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceLocationModel"
              }
            ]
          },
          "InventoryHashKey": {
            "type": "string",
            "description": "Indicates the infrastructure device inventory hash-key"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Infrastructure device id",
            "format": "int32"
          },
          "LastInventoryTime": {
            "type": "string",
            "description": "Indicates the last time the infrastructure device was inventoried"
          },
          "SystemId": {
            "type": "integer",
            "description": "Infrastructure device system identifier",
            "format": "int32"
          },
          "LastStatusTime": {
            "type": "string",
            "description": "Indicates the last status time of the infrastructure device"
          },
          "DeviceServiceTag": {
            "type": "string",
            "description": "Infrastructure device service tag"
          },
          "DeviceCapabilities": {
            "items": {
              "$ref": "#/components/schemas/DeviceCapabilitiesModel"
            },
            "type": "array",
            "description": "The infrastructure device available capabilities"
          }
        }
      },
      "PhysicalGroups": {
        "type": "object",
        "properties": {
          "CalculatedPowerCapacity": {
            "type": "integer",
            "description": "CalculatedPowerCapacity",
            "format": "int32"
          },
          "SpaceCapacity": {
            "type": "integer",
            "description": "SpaceCapacity",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description"
          },
          "SpareSpaceCapacity": {
            "type": "integer",
            "description": "SpareSpaceCapacity",
            "format": "int32"
          },
          "OccupiedSpace": {
            "type": "integer",
            "description": "OccupiedSpace",
            "format": "int32"
          },
          "DevicesInWorkingSet": {
            "type": "integer",
            "description": "DevicesInWorkingSet",
            "format": "int32"
          },
          "SparePowerCapacity": {
            "type": "integer",
            "description": "SparePowerCapacity",
            "format": "int32"
          },
          "Tag": {
            "type": "string",
            "description": "Tag"
          },
          "Location": {
            "type": "string",
            "description": "Location"
          },
          "ParentId": {
            "type": "integer",
            "description": "ParentId",
            "format": "int32"
          },
          "PowerCapacity": {
            "type": "integer",
            "description": "PowerCapacity",
            "format": "int32"
          },
          "Type": {
            "type": "integer",
            "description": "Type",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "AddedOn": {
            "type": "string",
            "description": "AddedOn"
          },
          "Name": {
            "type": "string",
            "description": "Name"
          }
        }
      },
      "CatalogActionRequestPayload": {
        "type": "object",
        "properties": {
          "CatalogsIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          },
          "AllCatalogs": {
            "type": "boolean",
            "nullable": true
          }
        },
        "title": "CatalogActionRequestPayload"
      },
      "NetworkBootToIso": {
        "type": "object",
        "properties": {
          "IsoTimeout": {
            "type": "integer",
            "description": "Timeout in hours to wait for network boot from ISO to complete.",
            "format": "int32"
          },
          "ShareDetail": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ShareDetail"
              }
            ]
          },
          "BootToNetwork": {
            "type": "boolean",
            "description": "Indicates whether or not network boot from ISO is wanted."
          },
          "ShareType": {
            "type": "string",
            "description": "Type of network share (CIFS/NFS)."
          },
          "IsoTimeoutUnit": {
            "type": "integer",
            "description": "ISO timeout unit (1=Hours, 2=Minutes).",
            "format": "int32"
          },
          "IsoPath": {
            "type": "string",
            "description": "Network path to ISO to boot from."
          }
        }
      },
      "AlertActionRequestModel": {
        "type": "object",
        "properties": {
          "AlertIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of alert IDs. This value is an empty list when AllAlerts is True."
          },
          "AllAlerts": {
            "type": "boolean",
            "description": "True or False. Determines if action should be taken for all alerts."
          },
          "Filters": {
            "description": "Optional filters to specify when AllAlerts is True.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertActionRequestFiltersModel"
              }
            ]
          }
        }
      },
      "ReportResultReducedModel": {
        "type": "object",
        "properties": {
          "TaskId": {
            "type": "integer",
            "description": "Job ID associated with the report task",
            "format": "int32"
          },
          "Title": {
            "type": "string",
            "description": "Report title"
          },
          "Id": {
            "type": "integer",
            "description": "Report result reduced model ID",
            "format": "int32"
          },
          "ResultRowColumns": {
            "items": {
              "$ref": "#/components/schemas/ReportResultColModel"
            },
            "type": "array"
          },
          "Report_def_id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "BaselineActionRequestPayload": {
        "type": "object",
        "properties": {
          "AllBaselines": {
            "type": "boolean",
            "nullable": true
          },
          "BaselinesIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "BaselineActionRequestPayload"
      },
      "AssociatedPowerDevice": {
        "type": "object",
        "properties": {
          "Manufacturer": {
            "type": "string"
          },
          "OutletCount": {
            "type": "integer",
            "format": "int32"
          },
          "PowerState": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "PowerRating": {
            "type": "integer",
            "format": "int32"
          },
          "MeteredOutletCount": {
            "type": "integer",
            "format": "int32"
          },
          "Model": {
            "type": "string"
          },
          "Identifier": {
            "type": "string"
          },
          "Type": {
            "type": "integer",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string"
          },
          "HardwareRevision": {
            "type": "string"
          }
        }
      },
      "ChassisDevice": {
        "type": "object",
        "properties": {
          "ServiceTag": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Recurrence": {
        "type": "object",
        "properties": {
          "Hourly": {
            "description": "This is present if job executes hourly.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Hourly"
              }
            ]
          },
          "Daily": {
            "description": "This is present if job executes daily.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Daily"
              }
            ]
          },
          "Weekley": {
            "description": "This is present if job executes weekly.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Weekly"
              }
            ]
          }
        }
      },
      "PhysicalGrpResponseModel": {
        "type": "object",
        "properties": {
          "Groups": {
            "items": {
              "$ref": "#/components/schemas/PhysicalGroups"
            },
            "type": "array"
          }
        }
      },
      "MetricType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Metric type description"
          },
          "Id": {
            "type": "integer",
            "description": "Metric type id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Metric type name"
          }
        }
      },
      "MemDevicesActionReqPayload": {
        "required": [
          "GroupId"
        ],
        "type": "object",
        "properties": {
          "OwnerId": {
            "type": "integer",
            "description": "The owner id",
            "format": "int32"
          },
          "MemberDeviceIdsToRemove": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group devices to remove"
          },
          "GroupId": {
            "type": "integer",
            "description": "Group id",
            "format": "int32"
          },
          "MemberDeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group devices"
          }
        }
      },
      "DeviceComplianceDetail": {
        "type": "object",
        "properties": {
          "BaselineName": {
            "type": "string",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "BaselineId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TemplateName": {
            "type": "string",
            "nullable": true
          },
          "ComplianceAttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ComplianceAttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TemplateId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DeviceComplianceDetail"
      },
      "ServerOperatingSystem": {
        "type": "object",
        "properties": {
          "OsVersion": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "OsName": {
            "type": "string"
          }
        }
      },
      "GlobalExcludeAddress": {
        "type": "object",
        "properties": {
          "NetworkAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "GlobalExcludeAddress"
      },
      "UpdateBundleInfo": {
        "type": "object",
        "properties": {
          "DownloadDate": {
            "type": "string",
            "description": "Date of the bundle download."
          },
          "Note": {
            "type": "string",
            "description": "Notes about download bundle."
          },
          "IsRemoteAndLocalFileSame": {
            "type": "boolean",
            "description": "Remote location file is same as downloaded file."
          },
          "BundleName": {
            "type": "string",
            "description": "Name of the download bundle ."
          },
          "TaskId": {
            "type": "integer",
            "description": "Job Id of task for console update bundle download.",
            "format": "int32"
          },
          "DownloadSize": {
            "type": "string",
            "description": "Size of download bundle in KB."
          },
          "Folder": {
            "type": "string",
            "description": "Download folder location."
          },
          "TaskStatus": {
            "type": "integer",
            "description": "Status of the Job for console update bundle download.",
            "format": "int32"
          }
        }
      },
      "WwnSettings": {
        "required": [
          "StartingAddress"
        ],
        "type": "object",
        "properties": {
          "StartingAddress": {
            "type": "string",
            "description": "The length can be a maximum of 50 characters.",
            "format": "base64url"
          },
          "IdentityCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "StorageRaidController": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "RollupStatusString": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Fqdd": {
            "type": "string"
          },
          "CacheSizeInMb": {
            "type": "integer",
            "format": "int32"
          },
          "ServerVirtualDisks": {
            "items": {
              "$ref": "#/components/schemas/ServerVirtualDisk"
            },
            "type": "array"
          },
          "PciSlot": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "StatusTypeString": {
            "type": "string"
          },
          "RollupStatus": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string"
          },
          "DeviceDescription": {
            "type": "string"
          }
        }
      },
      "ResetType": {
        "type": "object",
        "properties": {},
        "title": "ResetType"
      },
      "discoveredDevicesByType": {
        "type": "object",
        "properties": {
          "DeviceType": {
            "type": "string",
            "description": "Type of the discovered device."
          }
        }
      },
      "GroupDeviceAssociationModel": {
        "required": [
          "GroupId",
          "GroupDevice"
        ],
        "type": "object",
        "properties": {
          "GroupDevice": {
            "description": "The device model for the group device",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/InfrastructureDeviceModel"
              }
            ]
          },
          "GroupId": {
            "type": "integer",
            "description": "Group id",
            "format": "int32"
          }
        }
      },
      "ProxyInformation": {
        "type": "object",
        "properties": {
          "Credential": {
            "items": {
              "$ref": "#/components/schemas/Credential"
            },
            "type": "array"
          },
          "HostDetail": {
            "items": {
              "$ref": "#/components/schemas/HostDetail"
            },
            "type": "array"
          },
          "UseProxy": {
            "type": "boolean",
            "description": "Indicates if proxy is to be used."
          },
          "UseCredentials": {
            "type": "boolean",
            "description": "Indicates if credentials are to be used."
          }
        }
      },
      "OperatorAndFieldTypeInfo": {
        "type": "object",
        "properties": {
          "Operators": {
            "items": {
              "$ref": "#/components/schemas/operators"
            },
            "type": "array",
            "description": "Operators"
          },
          "FieldTypes": {
            "items": {
              "$ref": "#/components/schemas/fieldTypes"
            },
            "type": "array",
            "description": "Field types"
          }
        }
      },
      "ManagedDevicesModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Device status of the managed devices.",
            "format": "int32"
          },
          "ServiceTag": {
            "type": "string",
            "description": "Device service tag of the managed devices."
          },
          "PowerState": {
            "type": "integer",
            "description": "Device power state of the managed devices.",
            "format": "int32"
          },
          "ConnectedState": {
            "type": "boolean",
            "description": "Device connected state of the managed devices."
          },
          "DeviceName": {
            "type": "string",
            "description": "Device name of the managed devices."
          },
          "IpAddress": {
            "type": "string",
            "description": "Device ip address of the managed devices."
          },
          "DeviceManagement": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementModel"
            },
            "type": "array",
            "description": "Device managements of the managed devices."
          },
          "ConnectionStateReason": {
            "type": "integer",
            "description": "Device connected state reason of the managed devices.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Device identifier of the managed devices.",
            "format": "int32"
          },
          "Groups": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group Ids associated to the device."
          },
          "Model": {
            "type": "string",
            "description": "Device model of the managed devices."
          },
          "Type": {
            "type": "integer",
            "description": "Device type of the managed devices.",
            "format": "int32"
          }
        }
      },
      "SMTPDestination": {
        "type": "object",
        "properties": {
          "Credential": {
            "items": {
              "$ref": "#/components/schemas/Credential"
            },
            "type": "array"
          },
          "DestinationAddress": {
            "type": "string",
            "description": "Destination address."
          },
          "UseSSL": {
            "type": "boolean",
            "description": "Use SSL."
          },
          "UseCredentials": {
            "type": "boolean",
            "description": "Use credentials."
          }
        }
      },
      "DeviceManagementModel": {
        "required": [
          "ManagementId"
        ],
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "description": "Device management MAC address"
          },
          "DnsName": {
            "type": "string",
            "description": "Device management DNS name information"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated with the device management",
            "format": "int32"
          },
          "InstrumentationName": {
            "type": "string",
            "description": "Indicates the instrumentation name for the device management"
          },
          "IpAddress": {
            "type": "string",
            "description": "Device management IP address"
          },
          "ManagementProfile": {
            "items": {
              "$ref": "#/components/schemas/ManagementProfileModel"
            },
            "type": "array",
            "description": "Indicates the profile associated with the device management"
          },
          "ManagementId": {
            "type": "integer",
            "description": "Device management id",
            "format": "int64"
          },
          "ManagementType": {
            "description": "Indicates the management type for the device management",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagementTypeModel"
              }
            ]
          }
        }
      },
      "CapableDevicesModel": {
        "type": "object",
        "properties": {
          "ServiceTag": {
            "type": "string",
            "description": "ServiceTag"
          },
          "ManagedState": {
            "type": "integer",
            "description": "ManagedState",
            "format": "int64"
          },
          "PowerState": {
            "type": "integer",
            "description": "PowerState",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name"
          },
          "EstimatedMaxPower": {
            "type": "integer",
            "description": "EstimatedMaxPower",
            "format": "int32"
          },
          "PduOutletCount": {
            "type": "integer",
            "description": "PduOutletCount",
            "format": "int32"
          },
          "ConnectionState": {
            "type": "boolean",
            "description": "ConnectionState"
          },
          "HealthStatus": {
            "type": "integer",
            "description": "HealthStatus",
            "format": "int64"
          },
          "Model": {
            "type": "string",
            "description": "Model"
          },
          "Type": {
            "type": "integer",
            "description": "Type",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "Size": {
            "type": "integer",
            "description": "Size",
            "format": "int32"
          }
        }
      },
      "ChassisPciDeviceModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Slot": {
            "type": "integer",
            "description": "Indicates the chassis pci device slot",
            "format": "int32"
          },
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the chassis pci device",
            "format": "int32"
          },
          "ServerSlotName": {
            "type": "string",
            "description": "Indicates the server slot name"
          },
          "PowerState": {
            "type": "integer",
            "description": "Indicates the current power state",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Chassis pci device name"
          },
          "State": {
            "type": "string",
            "description": "Indicates the state of the chassis pci device"
          },
          "Fqdd": {
            "type": "string",
            "description": "Indicates the FQDD of the chassis pci device"
          },
          "Number": {
            "type": "string",
            "description": "Indicates the number associated to the chassis pci device"
          },
          "EmptySlot": {
            "type": "boolean",
            "description": "Indicates the pci device slot is empty"
          },
          "Height": {
            "type": "string",
            "description": "Indicates the chassis pci device height"
          },
          "ServerSlotNumber": {
            "type": "string",
            "description": "Indicates the server slot number"
          },
          "PciDeviceId": {
            "type": "string",
            "description": "Indicates the pci id for the chassis pci device"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis pci",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Chassis pci device description"
          },
          "PendingAction": {
            "type": "string",
            "description": "Indicates all pending actions for the chassis pci device"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Chassis pci device manufacturer details"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis pci device id",
            "format": "int64"
          },
          "Fabric": {
            "type": "string",
            "description": "Chassis pci device fabric name"
          }
        }
      },
      "NetworkInterfaceCollectionModel": {
        "type": "object",
        "properties": {
          "NetworkInterfaces": {
            "items": {
              "$ref": "#/components/schemas/ServerNetworkInterfaceModel"
            },
            "type": "array",
            "description": "List of network interface."
          }
        }
      },
      "metricsConfig": {
        "type": "object",
        "properties": {
          "MbTopicName": {
            "type": "string",
            "description": "Topic Name"
          },
          "PluginId": {
            "type": "string",
            "description": "Plugin Id"
          },
          "CollectMetrics": {
            "items": {
              "$ref": "#/components/schemas/collectMetricsList"
            },
            "type": "array",
            "description": "List of collected metrics"
          },
          "ResetMetrics": {
            "items": {
              "$ref": "#/components/schemas/resetMetricsList"
            },
            "type": "array",
            "description": "List of reset metrics"
          },
          "PluginName": {
            "type": "string",
            "description": "Plugin Name"
          }
        }
      },
      "NicFormatted": {
        "type": "object",
        "properties": {
          "NicId": {
            "type": "string",
            "description": "Nic id"
          },
          "VendorName": {
            "type": "string",
            "description": "Nic vendor name"
          },
          "Ports": {
            "items": {
              "$ref": "#/components/schemas/Port"
            },
            "type": "array",
            "description": "List of ports for the nic"
          }
        }
      },
      "IPv6Address": {
        "type": "object",
        "properties": {
          "AddressState": {
            "items": {
              "$ref": "#/components/schemas/AddressState"
            },
            "type": "array"
          },
          "AddressOrigin": {
            "items": {
              "$ref": "#/components/schemas/IPv6AddressOrigin"
            },
            "type": "array"
          },
          "PrefixLength": {
            "items": {
              "$ref": "#/components/schemas/PrefixLength"
            },
            "type": "array"
          },
          "Oem": {
            "items": {
              "$ref": "#/components/schemas/Oem"
            },
            "type": "array"
          },
          "Address": {
            "type": "string",
            "description": "IPv6 address."
          }
        }
      },
      "LogSeverities": {
        "type": "object",
        "title": "LogSeverities"
      },
      "ChassisFan": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "HardwareVersion": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "MemberId": {
            "type": "string"
          },
          "PwmUnits": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "SpeedUnits": {
            "type": "string"
          },
          "Pwm": {
            "type": "string"
          },
          "Speed": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string"
          }
        }
      },
      "deviceTypesInfo": {
        "type": "object",
        "properties": {
          "DeviceType": {
            "type": "string",
            "description": "Device Type"
          },
          "Actions": {
            "items": {
              "$ref": "#/components/schemas/actionDetailElements"
            },
            "type": "array",
            "description": "List of actions"
          }
        }
      },
      "CapableDevicesResponseModel": {
        "type": "object",
        "properties": {
          "CapableDevices": {
            "items": {
              "$ref": "#/components/schemas/CapableDevicesModel"
            },
            "type": "array"
          }
        }
      },
      "DeviceSettingsMetadataResponseModel": {
        "type": "object",
        "properties": {
          "DeviceSettingsMetadata": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device settings"
          }
        }
      },
      "DeviceSetting": {
        "type": "object",
        "properties": {
          "SettingType": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceSetting"
      },
      "GroupHierarchyModel": {
        "required": [
          "ParentGroupId",
          "ChildGroupId"
        ],
        "type": "object",
        "properties": {
          "ChildGroupId": {
            "type": "integer",
            "description": "Child group id",
            "format": "int32"
          },
          "ParentGroupId": {
            "type": "integer",
            "description": "Parent group id",
            "format": "int32"
          }
        }
      },
      "PowerStatesResponseModel": {
        "type": "object",
        "properties": {
          "PowerStates": {
            "items": {
              "$ref": "#/components/schemas/PowerStateModel"
            },
            "type": "array",
            "description": "Indicates the power states details"
          }
        }
      },
      "MacSettings": {
        "required": [
          "StartingMacAddress"
        ],
        "type": "object",
        "properties": {
          "StartingMacAddress": {
            "type": "string",
            "description": "The maximum length of a MAC address is 50 characters.",
            "format": "base64url"
          },
          "IdentityCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConfigComplianceStatusSummary": {
        "type": "object",
        "properties": {
          "ComplianceStatus": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ]
          }
        }
      },
      "PluginInfo": {
        "type": "object",
        "properties": {
          "Publisher": {
            "type": "string",
            "description": "Publisher information"
          },
          "Name": {
            "type": "string",
            "description": "Plugin name"
          },
          "SupportUrl": {
            "type": "string",
            "description": "Support URL of plugin"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Indicates if plugin is enabled"
          },
          "ChildDeviceCount": {
            "type": "integer",
            "description": "Count of child devices",
            "format": "int32"
          },
          "Compatible": {
            "type": "boolean",
            "description": "Indicates if the installed plugin version is compatible with the current version of OME."
          },
          "CompatibleVersionAvailable": {
            "type": "boolean",
            "description": "Indicates if a version compatible with OME is available. Can be the installed version."
          },
          "CurrentVersion": {
            "type": "string",
            "description": "Current version of plugin"
          },
          "LastUpdatedDate": {
            "type": "string",
            "description": "Last Updated date of plugin"
          },
          "ResourceRequirementsMet": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/ResourceRequirementsMet"
            },
            "type": "array",
            "description": "Information if resource requirements are met",
            "maxItems": 1
          },
          "DeltaResourceRequirements": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/DeltaResourceRequirements"
            },
            "type": "array",
            "description": "Delta of resource requirements",
            "maxItems": 1
          },
          "Description": {
            "type": "string",
            "description": "Description of plugin"
          },
          "LastLifecycleOperation": {
            "type": "string",
            "description": "Last lifecycle operation"
          },
          "DisabledDate": {
            "type": "string",
            "description": "Plugin disabled date"
          },
          "DownloadProgress": {
            "type": "string",
            "description": "Download progress information"
          },
          "Auto": {
            "type": "boolean",
            "description": "Indicates if plugin is auto"
          },
          "UpdateAvailable": {
            "type": "boolean",
            "description": "Indicates if update is available"
          },
          "Installed": {
            "type": "boolean",
            "description": "Indicates if plugin is installed"
          },
          "Downloaded": {
            "type": "boolean",
            "description": "Indicates if plugin is downloaded"
          },
          "ResourceRequirements": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/ConfiguredResources"
            },
            "type": "array",
            "description": "List of resource requirements",
            "maxItems": 1
          },
          "InstalledDate": {
            "type": "string",
            "description": "Plugin installed date"
          },
          "Id": {
            "type": "string",
            "description": "Plugin Id"
          },
          "RepairRequired": {
            "type": "boolean",
            "description": "Indicates if repair is required for plugin"
          }
        }
      },
      "InvalidVlansModel": {
        "type": "object",
        "properties": {
          "Message": {
            "type": "string"
          },
          "Vlans": {
            "items": {
              "$ref": "#/components/schemas/VLANModel"
            },
            "type": "array"
          },
          "MessageId": {
            "type": "string"
          }
        }
      },
      "AddressState": {
        "type": "object",
        "properties": {},
        "title": "AddressState"
      },
      "PluginsRequestModel": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string",
            "description": "Plugin version"
          },
          "Id": {
            "type": "string",
            "description": "Plugin id"
          }
        }
      },
      "HelpLinkDocumentModel": {
        "type": "object",
        "properties": {
          "TypCat": {
            "type": "string"
          },
          "HlpLnkData": {
            "type": "string"
          },
          "HlpLnkTtl": {
            "type": "string"
          },
          "HlpLnk": {
            "type": "string"
          }
        }
      },
      "AutoDeployDevicesModel": {
        "type": "object",
        "properties": {
          "BaseEntityId": {
            "type": "integer",
            "description": "A placeholder to hold the valid Target identifier which will be replaced with the device ID once the associated device with the target identifier gets discovered.",
            "format": "int32"
          },
          "ResultCode": {
            "type": "integer",
            "format": "int32"
          },
          "Identifier": {
            "type": "string",
            "description": "Target identifier (service tag or node ID)"
          }
        }
      },
      "ServerSimpleStorageCollectionModel": {
        "type": "object",
        "properties": {
          "ServerSimpleStorage": {
            "items": {
              "$ref": "#/components/schemas/ServerSimpleStorageModel"
            },
            "type": "array",
            "description": "List of server storage."
          }
        }
      },
      "ProfileUpdateModel": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Profile description - optional."
          },
          "NetworkBootToIso": {
            "description": "(Optional) If network boot from ISO settings are wanted for the new profiles, they are specified in this element.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ProfileReducedAttributeModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "Profile name - Cannot be null/empty, must be unique."
          }
        }
      },
      "BaselinesResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Baselines": {
            "items": {
              "$ref": "#/components/schemas/BaselinesModel"
            },
            "type": "array"
          }
        }
      },
      "ChassisPortsModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "IoModuleId": {
            "type": "integer",
            "description": "Chassis port io module id",
            "format": "int64"
          },
          "DomainId": {
            "type": "string",
            "description": "Chassis port domain information"
          },
          "PortId": {
            "type": "integer",
            "description": "Chassis port id",
            "format": "int64"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis ports sequence id",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis port",
            "format": "int32"
          }
        }
      },
      "Roles": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "Roles"
      },
      "Plugin": {
        "type": "object",
        "properties": {
          "AvailableVersionDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/VersionDetail"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ChildDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "CompatibleVersionAvailable": {
            "type": "boolean"
          },
          "DeltaResourceRequirements": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DeltaResourceRequirements"
              }
            ],
            "nullable": true
          },
          "InstalledDate": {
            "type": "string",
            "nullable": true
          },
          "LastLifecycleOperation": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string"
          },
          "Auto": {
            "type": "boolean",
            "nullable": true
          },
          "Downloaded": {
            "type": "boolean"
          },
          "Publisher": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "SupportUrl": {
            "type": "string",
            "nullable": true
          },
          "Enabled": {
            "type": "boolean"
          },
          "Compatible": {
            "type": "boolean",
            "nullable": true
          },
          "CurrentVersion": {
            "type": "string"
          },
          "LastUpdatedDate": {
            "type": "string",
            "nullable": true
          },
          "ResourceRequirementsMet": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResourceRequirementsMet"
              }
            ],
            "nullable": true
          },
          "UpdateAvailable": {
            "type": "boolean"
          },
          "Installed": {
            "type": "boolean"
          },
          "DownloadProgress": {
            "type": "string",
            "nullable": true
          },
          "ResourceRequirements": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ConfiguredResources"
              }
            ],
            "nullable": true
          },
          "Id": {
            "type": "string"
          },
          "RepairRequired": {
            "type": "boolean"
          }
        },
        "title": "Plugin"
      },
      "IPv6AddressPolicyEntry": {
        "type": "object",
        "properties": {
          "Prefix": {
            "type": "string",
            "description": "Prefix of IPv6 Address Policy Entry."
          }
        }
      },
      "ProfileResponseModel": {
        "type": "object",
        "properties": {
          "Profiles": {
            "items": {
              "$ref": "#/components/schemas/ProfileViewModel"
            },
            "type": "array"
          }
        }
      },
      "AssociatedPowerDeviceResponseModel": {
        "type": "object",
        "properties": {
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/AssociatedPowerDevice"
            },
            "type": "array"
          }
        }
      },
      "ResourceBlockModel": {
        "type": "object",
        "properties": {
          "MaxCompositions": {
            "type": "integer",
            "description": "Maximum compositions of resource block.",
            "format": "int64"
          },
          "TotalCompositions": {
            "type": "integer",
            "description": "Total composition of resource block.",
            "format": "int64"
          },
          "IsSharingCapable": {
            "type": "boolean",
            "description": "Indicates if capable of sharing."
          },
          "Description": {
            "type": "string",
            "description": "Description of resource block."
          },
          "ResourceBlockType": {
            "type": "integer",
            "description": "Type of resource block.",
            "format": "int32"
          },
          "IsSharingEnabled": {
            "type": "boolean",
            "description": "Indicates if sharing is enabled."
          },
          "Name": {
            "type": "string",
            "description": "Name of resource block."
          },
          "Id": {
            "type": "string",
            "description": "ID of resource block."
          },
          "IsReserved": {
            "type": "boolean",
            "description": "Indicates if block is reserved."
          },
          "CompositionStatus": {
            "type": "integer",
            "description": "Composition status of the block.",
            "format": "int32"
          }
        }
      },
      "SimpleStorageModel": {
        "type": "object",
        "properties": {
          "Status": {
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "description": "Description of simple storage."
          },
          "UefiDevicePath": {
            "type": "string",
            "description": "UEFI device path."
          },
          "Id": {
            "type": "string",
            "description": "Id of simple storage."
          },
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "type": "array",
            "description": "List of devices."
          },
          "Name": {
            "type": "string",
            "description": "Name of simple storage."
          }
        }
      },
      "MetricsEnergyConsumptionQueryData": {
        "type": "object",
        "properties": {}
      },
      "snmpSettings": {
        "type": "object",
        "properties": {
          "Addr": {
            "type": "string",
            "description": "Address."
          },
          "snmpV3Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV3Credential"
            },
            "type": "array"
          },
          "snmpV1V2Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV1V2Credential"
            },
            "type": "array"
          },
          "Enabled": {
            "type": "boolean",
            "description": "SNMP Setting is enabled."
          },
          "Port": {
            "type": "integer",
            "description": "Port number."
          },
          "Id": {
            "type": "integer",
            "description": "ID of SNMP setting.",
            "format": "int64"
          }
        }
      },
      "SubsystemHealthResponseModel": {
        "type": "object",
        "properties": {
          "SubsystemHealth": {
            "items": {
              "$ref": "#/components/schemas/SubSystemHealthModel"
            },
            "type": "array",
            "description": "List of device sub system healths"
          }
        }
      },
      "FabricModel": {
        "required": [
          "Id",
          "Name",
          "Description",
          "OverrideLLDPConfiguration",
          "ScaleVLANProfile"
        ],
        "type": "object",
        "properties": {
          "Summary": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/FabricSummaryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Health": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/HealthModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Description": {
            "type": "string",
            "description": "The Fabric description"
          },
          "ScaleVLANProfile": {
            "type": "string",
            "description": "Enable or disable scale VLAN profile"
          },
          "LifeCycleStatus": {
            "items": {
              "$ref": "#/components/schemas/LifeCycleStatusModel"
            },
            "type": "array"
          },
          "OverrideLLDPConfiguration": {
            "type": "string",
            "description": "Enable or disable override LLDP configuration"
          },
          "Id": {
            "type": "string",
            "description": "The identifier of the fabric"
          },
          "FabricDesignMapping": {
            "items": {
              "$ref": "#/components/schemas/FabricDesignMappingModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "The fabric name"
          }
        }
      },
      "ScopeRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "groups": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "ScopeRequest"
      },
      "JobParamsModel": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "JobId": {
            "type": "integer",
            "description": "Id of the job",
            "format": "int32"
          }
        }
      },
      "PermissionResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          }
        },
        "title": "PermissionResponseModel"
      },
      "FilterDetail": {
        "type": "object",
        "properties": {
          "ContextId": {
            "type": "integer",
            "description": "Context ID of filter",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of filter"
          },
          "UsageId": {
            "type": "integer",
            "description": "Usage ID of filter",
            "format": "int32"
          },
          "FilterText": {
            "type": "string",
            "description": "Filter text"
          },
          "Conditions": {
            "items": {
              "$ref": "#/components/schemas/conditions"
            },
            "type": "array",
            "description": "Conditions of filter"
          },
          "FilterId": {
            "type": "integer",
            "description": "Filter ID of filter",
            "format": "int32"
          }
        }
      },
      "SystemUpTimeResponseModel": {
        "type": "object",
        "properties": {
          "SystemUpTime": {
            "type": "string",
            "description": "System uptime information"
          }
        }
      },
      "ApplicationService": {
        "type": "object",
        "properties": {
          "Info": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Info"
              }
            ],
            "nullable": true
          },
          "Network": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Network"
              }
            ],
            "nullable": true
          },
          "Certificate": {
            "items": {
              "$ref": "#/components/schemas/CertInfo"
            },
            "type": "array"
          },
          "Settings": {
            "items": {
              "$ref": "#/components/schemas/ConsoleSetting"
            },
            "type": "array"
          },
          "ConsoleSetting": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Capabilities": {
            "items": {
              "$ref": "#/components/schemas/Capability"
            },
            "type": "array"
          },
          "AuditLogCategories": {
            "items": {
              "$ref": "#/components/schemas/AuditLogCategories"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Security": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Security"
              }
            ],
            "nullable": true
          },
          "AuditLogs": {
            "items": {
              "$ref": "#/components/schemas/AuditLog"
            },
            "type": "array"
          }
        },
        "title": "ApplicationService"
      },
      "SlotConfiguration": {
        "type": "object",
        "properties": {
          "ChassisName": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SlotConfiguration"
      },
      "ChassisFanModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the chassis fan",
            "format": "int64"
          },
          "HardwareVersion": {
            "type": "string",
            "description": "Chassis fan hardware version"
          },
          "Name": {
            "type": "string",
            "description": "Chassis fan name"
          },
          "GraphicUri": {
            "type": "string",
            "description": "Chassis fan graphic URI"
          },
          "Speed": {
            "type": "integer",
            "description": "Chassis fan current speed",
            "format": "int64"
          },
          "MemberId": {
            "type": "string",
            "description": "Chassis fan member id"
          },
          "PwmUnits": {
            "type": "string",
            "description": "Chassis fan pulse width modulation unit"
          },
          "State": {
            "type": "string",
            "description": "Indicates the current state of the chassis fan"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis fan",
            "format": "int32"
          },
          "SpeedUnits": {
            "type": "string",
            "description": "Chassis fan speed unit"
          },
          "Pwm": {
            "type": "string",
            "description": "Chassis fan model pulse width modulation"
          },
          "Occupied": {
            "type": "string",
            "description": "Indicates if the chassis fan is occupied"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis fan id",
            "format": "int64"
          },
          "FirmwareVersion": {
            "type": "string",
            "description": "Chassis fan firmware version"
          }
        }
      },
      "DataSyncHistoryRespModel": {
        "type": "object",
        "properties": {
          "DataSyncHistoryModel": {
            "items": {
              "$ref": "#/components/schemas/DataSyncHistoryModel"
            },
            "type": "array"
          }
        }
      },
      "TimeZones": {
        "type": "object",
        "properties": {
          "TimeZone": {
            "items": {
              "$ref": "#/components/schemas/TimeZone"
            },
            "type": "array"
          }
        }
      },
      "DeployToTarget": {
        "type": "object",
        "properties": {
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "SlotId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerVirtualDiskModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Status of server virtual disk.",
            "format": "int32"
          },
          "DeviceName": {
            "type": "string",
            "description": "Device name."
          },
          "Layout": {
            "type": "string",
            "description": "Layout of server virtual disk."
          },
          "Name": {
            "type": "string",
            "description": "Name of server virtual disk."
          },
          "Fqdd": {
            "type": "string",
            "description": "FQDD of server virtual disk."
          },
          "StripeSize": {
            "type": "string",
            "description": "Stripe size of server virtual disk."
          },
          "TargetId": {
            "type": "integer",
            "description": "ID of Target.",
            "format": "int32"
          },
          "MediaType": {
            "type": "string",
            "description": "Media type of server virtual disk."
          },
          "ReadPolicy": {
            "type": "string",
            "description": "Read policy of server virtual disk."
          },
          "LockStatus": {
            "type": "string",
            "description": "Lock status of server virtual disk."
          },
          "State": {
            "type": "string",
            "description": "State of server virtual disk."
          },
          "WritePolicy": {
            "type": "string",
            "description": "Write policy of server virtual disk."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "RaidControllerId": {
            "type": "integer",
            "description": "ID of RAID controller.",
            "format": "int64"
          },
          "Size": {
            "type": "string",
            "description": "Size of server virtual disk."
          },
          "RollupStatus": {
            "type": "integer",
            "description": "Rollup status of server virtual disk.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server virtual disk.",
            "format": "int32"
          },
          "CachePolicy": {
            "type": "string",
            "description": "Cache policy of server virtual disk."
          }
        }
      },
      "GroupDAOAttribute": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Group DAO attribute name"
          },
          "AttributeTypeName": {
            "type": "string",
            "description": "Indicates the group DAO attribute type name"
          },
          "IdAttributeCategory": {
            "type": "integer",
            "description": "Group DAO attribute category",
            "format": "int32"
          },
          "AttributeDataTypeName": {
            "type": "string",
            "description": "Indicates the group DAO attribute data type name"
          },
          "ValueBoolean": {
            "type": "boolean",
            "description": "Indicates the boolean value associated to the group DAO attribute"
          },
          "IdValidationType": {
            "type": "integer",
            "description": "Group DAO attribute validation type",
            "format": "int32"
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute is visible"
          },
          "Units": {
            "type": "string",
            "description": "Indicates the units associated to the group DAO attribute"
          },
          "Validation": {
            "type": "object",
            "description": "Indicates the group DAO attribute validation type"
          },
          "IdAttributeDataType": {
            "type": "integer",
            "description": "Group DAO attribute data type",
            "format": "int32"
          },
          "CategoryName": {
            "type": "string",
            "description": "Group DAO attribute category name"
          },
          "ValidationTypeEnumId": {
            "type": "integer",
            "format": "int32"
          },
          "IsEditable": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute is editable"
          },
          "ValidationName": {
            "type": "string",
            "description": "Group DAO attribute validation name"
          },
          "IdAttributeType": {
            "type": "integer",
            "description": "Group DAO attribute type",
            "format": "int32"
          },
          "ValueDecimal": {
            "type": "number",
            "description": "Indicates the decimal value associated to the group DAO attribute"
          },
          "IsRequired": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute is required"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with the group DAO attribute",
            "format": "int32"
          },
          "TagIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of tag ids associated with group DAO attribute"
          },
          "IdValidation": {
            "type": "integer",
            "description": "Group DAO attribute type id",
            "format": "int32"
          },
          "IdGroup": {
            "type": "integer",
            "description": "Indicates the group associated to the group DAO attribute",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute id",
            "format": "int32"
          },
          "ValueInt": {
            "type": "integer",
            "description": "Indicates the integer value associated to the group DAO attribute",
            "format": "int32"
          },
          "ValueText": {
            "type": "string",
            "description": "Indicates the text value associated to the group DAO attribute"
          }
        }
      },
      "State": {
        "enum": [
          "Enabled",
          "Disabled",
          "StandbyOffline",
          "StandbySpare",
          "InTest",
          "Starting",
          "Absent",
          "UnavailableOffline"
        ],
        "type": "string",
        "title": "State"
      },
      "KeyIdsList": {
        "type": "object",
        "properties": {
          "KeyIds": {
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "type": "array",
            "description": "List of key ids."
          }
        }
      },
      "ComplianceStatusResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "ComplianceStatusModel": {
            "items": {
              "$ref": "#/components/schemas/ComplianceStatusModel"
            },
            "type": "array"
          }
        }
      },
      "DiscoverableDeviceTypeModelOdata": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description about the given device type."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the device type.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name of the device type."
          }
        }
      },
      "BrandType": {
        "type": "object",
        "properties": {},
        "title": "BrandType"
      },
      "ExecutionHistoryDetailModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "JobStatus": {
            "description": "Execution history detail status",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobStatusModel"
              }
            ]
          },
          "ExecutionHistoryId": {
            "type": "integer",
            "description": "Indicates the associated execution history to the execution detail",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "description": "Execution history detail key"
          },
          "StartTime": {
            "type": "string",
            "description": "Execution history detail start time"
          },
          "Progress": {
            "type": "string",
            "description": "Execution history detail percentage progress"
          },
          "EndTime": {
            "type": "string",
            "description": "Execution history detail end time"
          },
          "Id": {
            "type": "integer",
            "description": "Execution history detail id",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Execution history detail value"
          }
        }
      },
      "FaultModel": {
        "type": "object",
        "properties": {
          "SubSystem": {
            "type": "string",
            "description": "Fault syb system information"
          },
          "Fqdd": {
            "type": "string",
            "description": "Fault FQDD"
          },
          "Severity": {
            "type": "string",
            "description": "Fault severity"
          },
          "MessageId": {
            "type": "string",
            "description": "Fault associated message id"
          },
          "InstanceId": {
            "type": "string",
            "description": "Fault associated instance id"
          },
          "TimeStamp": {
            "type": "string",
            "description": "Fault timestamp"
          },
          "Message": {
            "type": "string",
            "description": "Fault message"
          },
          "MessageArguments": {
            "type": "string",
            "description": "Fault message arguments"
          },
          "DateFormat": {
            "type": "string",
            "description": "Indicates the time format"
          },
          "RecommendedAction": {
            "type": "string",
            "description": "Indicates the recommended action"
          }
        }
      },
      "CertificateCheckResponseModel": {
        "type": "object",
        "properties": {
          "PublicKey": {
            "type": "string"
          },
          "SignatureAlgorithmOid": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "ValidityTo": {
            "type": "string"
          },
          "Subject": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "Issuer": {
            "type": "string"
          },
          "ValidityFrom": {
            "type": "string"
          },
          "SignatureAlgorithm": {
            "type": "string"
          }
        }
      },
      "ProtocolToDeviceTypeModel": {
        "type": "object",
        "properties": {
          "DeviceTypeName": {
            "type": "string",
            "nullable": true
          },
          "ProtocolId": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "DeviceTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ProtocolName": {
            "type": "string",
            "nullable": true
          },
          "IsSelectedByDefault": {
            "type": "boolean",
            "nullable": true
          },
          "PriorityOrder": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          }
        },
        "title": "ProtocolToDeviceTypeModel"
      },
      "ConsoleUpdate": {
        "type": "object",
        "properties": {
          "ConsoleUpdateCriteria": {
            "items": {
              "$ref": "#/components/schemas/ConsoleUpdateCriteria"
            },
            "type": "array",
            "description": "Criteria to be fulfilled for updating a console."
          },
          "ArchiveBasePath": {
            "type": "string",
            "description": "Base path where update package is available."
          },
          "Version": {
            "type": "string",
            "description": "Version of the latest available console."
          },
          "Description": {
            "type": "string",
            "description": "Description of the changes included as part of update."
          },
          "LastUpdateDateTime": {
            "type": "string",
            "description": "Date and time of last console update job executed."
          },
          "ArchiveDirectory": {
            "type": "string",
            "description": "Base directory where update package is available."
          },
          "ComponentName": {
            "type": "string",
            "description": "Component name for which update is available."
          },
          "Auto": {
            "type": "boolean",
            "description": "Tells if console update job runs manually or automatically."
          },
          "Size": {
            "type": "string",
            "description": "Size of update package."
          }
        }
      },
      "ServerNetworkConfigurationsModel": {
        "type": "object",
        "properties": {
          "BondingTechnology": {
            "type": "string",
            "description": "Bonding technology of server network configuration."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "ServerInterfaceConfigurations": {
            "items": {
              "$ref": "#/components/schemas/ServerInterfaceConfigurationModel"
            },
            "type": "array",
            "description": "List of server interface configurations."
          }
        }
      },
      "AuditLogSubCategoryModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Prefix": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "SessionConfigurationModel": {
        "type": "object",
        "properties": {
          "SessionTimeout": {
            "type": "integer",
            "description": "session timeout value for this session type.",
            "format": "int64"
          },
          "SessionTimeoutConfigurable": {
            "type": "boolean",
            "description": "Boolean value if session timeout can be configured."
          },
          "MaxSessionsAllowed": {
            "type": "integer",
            "description": "Maximum sessions allowed for this session type.",
            "format": "int64"
          },
          "MaxSessionTimeout": {
            "type": "integer",
            "description": "Maximum session time this session type.",
            "format": "int64"
          },
          "SessionType": {
            "type": "string",
            "description": "The session user name."
          },
          "MinSessionTimeout": {
            "type": "integer",
            "description": "Minimum session time for this session type.",
            "format": "int64"
          },
          "MaxSessions": {
            "type": "integer",
            "description": "Maximum session for this session type.",
            "format": "int64"
          },
          "MaxSessionsConfigurable": {
            "type": "boolean",
            "description": "Boolean value if maximum sessions can be configured."
          },
          "MinSessionsAllowed": {
            "type": "integer",
            "description": "Minimum sessions allowed for this session type.",
            "format": "int64"
          }
        }
      },
      "FeatureCapabilityModel": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          }
        }
      },
      "JobTypePrivilegeAssociationModel": {
        "type": "object",
        "properties": {
          "PrivilegeId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "JobType": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobTypeModel"
              }
            ]
          }
        }
      },
      "GroupAttributeTypes": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupAttributeType"
            },
            "type": "array",
            "description": "List of group attribute types"
          }
        }
      },
      "ValidationErrorsModel": {
        "required": [
          "Id",
          "MessageId",
          "Category",
          "SubCategory",
          "Severity",
          "ChassisName",
          "ChassisServiceTag",
          "Description",
          "RecommendedAction",
          "Timestamp"
        ],
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "description": "Category type of the message"
          },
          "Severity": {
            "type": "string",
            "description": "Error severity"
          },
          "Timestamp": {
            "type": "string",
            "description": "Error logged time"
          },
          "RecommendedLink": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/NetworkLinkModel"
            },
            "type": "array",
            "description": "Recommended node details to fix the error",
            "maxItems": 1
          },
          "ProblemLink": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/NetworkLinkModel"
            },
            "type": "array",
            "description": "Node details which have the error",
            "maxItems": 1
          },
          "SubCategory": {
            "type": "string",
            "description": "Sub category type of the message"
          },
          "RecommendedAction": {
            "type": "string",
            "description": "Action to be taken to fix the error"
          },
          "ChassisName": {
            "type": "string",
            "description": "Name of the chassis of the IOM"
          },
          "MessageId": {
            "type": "string",
            "description": "Locale message id"
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the error"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Chassis service tag of the IOM"
          },
          "Description": {
            "type": "string",
            "description": "Description of the error"
          }
        }
      },
      "DeviceUnitSizeSupported": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerProfileModel": {
        "required": [
          "Id",
          "ServerServiceTag",
          "BondingTechnology"
        ],
        "type": "object",
        "properties": {
          "ServerServiceTag": {
            "type": "string",
            "description": "The service tag of the compute"
          },
          "Id": {
            "type": "string",
            "description": "The identifier of the profile"
          },
          "BondingTechnology": {
            "type": "string",
            "description": " None/LACP/NoTeaming. The attribute is not supported in RTS IOMs"
          }
        }
      },
      "TimeDetailsBlob": {
        "type": "object",
        "properties": {
          "SystemTime": {
            "type": "string",
            "description": "System time."
          },
          "SecondaryNTPAddress1": {
            "type": "string",
            "description": "Secondary NTP Address."
          },
          "SecondaryNTPAddress2": {
            "type": "string",
            "description": "Secondary NTP Address."
          },
          "TimeZone": {
            "type": "string",
            "description": "Time zone details."
          },
          "EnableNTP": {
            "type": "boolean",
            "description": "Enable NIC."
          },
          "PrimaryNTPAddress": {
            "type": "string",
            "description": "Primary NTP address."
          },
          "TimeSource": {
            "type": "string",
            "description": "Time source."
          }
        }
      },
      "ForwarderSettingsModel": {
        "type": "object",
        "properties": {
          "ForwarderConfigurations": {
            "items": {
              "$ref": "#/components/schemas/ForwarderConfigurationModel"
            },
            "type": "array",
            "description": "Forwarder Configurations."
          },
          "ActionName": {
            "type": "string",
            "description": "Name of the action."
          },
          "PIN": {
            "type": "string",
            "description": "PIN for the registration."
          },
          "SiteName": {
            "type": "string",
            "description": "Site Name of the registration."
          },
          "AccessKey": {
            "type": "string",
            "description": "Access Key for the registration."
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier of the ForwarderSettings."
          }
        }
      },
      "RecentActivityResponseModel": {
        "type": "object",
        "properties": {
          "RecentActivityDetails": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "The list of recent activities"
          }
        }
      },
      "SingleUpdateReportResponseModel": {
        "type": "object",
        "properties": {
          "DeviceReport": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/SingleUpdateReportContentsResponseModel"
              }
            ]
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TopOffender": {
        "type": "object",
        "properties": {
          "LowerWarningViolations": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UpperCriticalViolations": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EntityName": {
            "type": "string",
            "nullable": true
          },
          "EntityType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UpperCritical": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ViolationState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ThresholdType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TotalViolations": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UpperWarningViolations": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LowerCritical": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LowerWarning": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EntityId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UpperWarning": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LowerCriticalViolations": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "TopOffender"
      },
      "PowerUnitEnum": {
        "type": "object",
        "properties": {},
        "title": "PowerUnitEnum"
      },
      "GroupDAOAttributeValidationEnum": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation enumeration id",
            "format": "int32"
          }
        }
      },
      "collectMetricElements": {
        "type": "object",
        "properties": {
          "Attribute": {
            "type": "string",
            "description": "Attribute"
          },
          "DeviceTypes": {
            "items": {
              "$ref": "#/components/schemas/deviceTypesInfo"
            },
            "type": "array",
            "description": "List of device types"
          },
          "StoreHistory": {
            "type": "string",
            "description": "Store history of metric elements"
          },
          "GroupAggregation": {
            "type": "string",
            "description": "Group aggregation of metric elements"
          }
        }
      },
      "fieldTypes": {
        "type": "object",
        "properties": {
          "FieldTypeId": {
            "type": "integer",
            "description": "Field type ID of field type",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of field type"
          },
          "OperatorIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Operator IDs of field type"
          }
        }
      },
      "JobStatusResponseModel": {
        "type": "object",
        "properties": {
          "JobStatus": {
            "items": {
              "$ref": "#/components/schemas/JobStatusModel"
            },
            "type": "array"
          }
        }
      },
      "EnumerationEntryResponseModel": {
        "type": "object",
        "properties": {
          "EnumerationEntries": {
            "items": {
              "$ref": "#/components/schemas/EnumerationEntryModel"
            },
            "type": "array",
            "description": "List of enumerations"
          }
        }
      },
      "Session": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Roles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "StartTimeStamp": {
            "type": "string",
            "nullable": true
          },
          "LastAccessedTimeStamp": {
            "type": "string",
            "nullable": true
          },
          "DirectoryGroup": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "IpAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Session"
      },
      "EthernetSettings": {
        "type": "object",
        "properties": {
          "Mac": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MacSettings"
              }
            ],
            "nullable": true
          }
        },
        "title": "EthernetSettings"
      },
      "MulticastRequestModel": {
        "type": "object",
        "properties": {
          "MldVersion": {
            "type": "string",
            "description": "MLD version for MutlicastNetworks. "
          },
          "IgmpVersion": {
            "type": "string",
            "description": "IGMP version for MutlicastNetworks."
          },
          "MulticastNetworks": {
            "items": {
              "$ref": "#/components/schemas/MulticastNetworkModel"
            },
            "type": "array"
          },
          "FloodRestrict": {
            "type": "boolean",
            "description": "Flood restrict version for MutlicastNetworks."
          }
        }
      },
      "DeviceFruModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Device field replaceable unit name"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device with the field replaceable unit",
            "format": "int32"
          },
          "Revision": {
            "type": "string",
            "description": "Device field replaceable unit revision"
          },
          "PartNumber": {
            "type": "string",
            "description": "Device field replaceable unit description"
          },
          "SerialNumber": {
            "type": "string",
            "description": "Device field replaceable unit serial number"
          },
          "Id": {
            "type": "integer",
            "description": "Device field replaceable unit id",
            "format": "int32"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Device field replaceable unit manufacturer"
          }
        }
      },
      "AlertCatalogResponseModel": {
        "type": "object",
        "properties": {
          "AlertCatalogs": {
            "items": {
              "$ref": "#/components/schemas/AlertCatalogModel"
            },
            "type": "array",
            "description": "List of alert catalogs."
          }
        }
      },
      "DeviceConfigPayload": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "DiscoveryStatusModel": {
        "type": "object",
        "properties": {},
        "title": "DiscoveryStatusModel"
      },
      "ComplianceAttributeGroupModel": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string"
          },
          "ComplianceStatus": {
            "type": "integer",
            "format": "int32"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ComplianceAttributeModel"
            },
            "type": "array"
          },
          "ComplianceSubAttributeGroups": {
            "items": {
              "$ref": "#/components/schemas/ComplianceAttributeGroupModel"
            },
            "type": "array"
          },
          "GroupNameId": {
            "type": "integer",
            "format": "int32"
          },
          "ComplianceReason": {
            "type": "string"
          },
          "GroupParentId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UplinkTypeRequestModel": {
        "type": "object",
        "properties": {
          "UplinkType": {
            "type": "integer",
            "description": "Type of the uplink",
            "format": "int32"
          }
        }
      },
      "MIBEventCategory": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "EventCategoryName": {
            "type": "string",
            "description": "Name of the event category."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the event category.",
            "format": "int32"
          }
        }
      },
      "SyslogSettingsList": {
        "type": "object",
        "properties": {
          "SyslogSettings": {
            "items": {
              "$ref": "#/components/schemas/SyslogSettings"
            },
            "type": "array"
          }
        }
      },
      "GroupAttributeTypeValues": {
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated to the group attribute type values",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "description": "Indicates the group associated to the group attribute type values",
            "format": "int32"
          },
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupAttributeTypeValue"
            },
            "type": "array",
            "description": "Indicates the value associated to the group attribute type values"
          }
        }
      },
      "RemoveFilePayload": {
        "required": [
          "FileToken"
        ],
        "type": "object",
        "properties": {
          "FileToken": {
            "type": "string",
            "description": "File Token generated when uploading Dell Update Package (DUP) using the API /UpdateService/Actions/UpdateService.UploadFile"
          }
        }
      },
      "AlertStatus": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "AlertStatus"
      },
      "Status": {
        "type": "object",
        "properties": {
          "HealthRollup": {
            "type": "string",
            "description": "Health rollup status of session."
          },
          "State": {
            "type": "string",
            "description": "State of the session whether enabled or disabled."
          },
          "Health": {
            "type": "string",
            "description": "Health of the session service object."
          }
        }
      },
      "SubsystemRollupStatus": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "SubsystemName": {
            "type": "string"
          }
        }
      },
      "GroupAction": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Group action id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Group action name"
          }
        }
      },
      "ManagementProfileModel": {
        "required": [
          "ManagementProfileId"
        ],
        "type": "object",
        "properties": {
          "ManagementProfileId": {
            "type": "integer",
            "description": "Management profile id",
            "format": "int64"
          },
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the management profile",
            "format": "int64"
          },
          "StatusDateTime": {
            "type": "string",
            "description": "The management profile status time"
          },
          "Version": {
            "type": "string",
            "description": "Management profile version information"
          },
          "Management_id": {
            "type": "integer",
            "description": "Indicates the management associated with the management profile",
            "format": "int64"
          },
          "AgentName": {
            "type": "string",
            "description": "Management profile agent name information"
          },
          "ProfileId": {
            "type": "string",
            "description": "Indicates the profile id associated with the management profile"
          },
          "HasCreds": {
            "type": "integer",
            "description": "Indicates the the management profile has credentials",
            "format": "int32"
          },
          "ManagementURL": {
            "type": "string",
            "description": "Indicates the management URL for the management profile"
          }
        }
      },
      "ComplianceSummary": {
        "type": "object",
        "properties": {
          "NumberOfNormal": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NumberOfCritical": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ComplianceStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ],
            "nullable": true
          },
          "NumberOfWarning": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NumberOfDowngrade": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "NumberOfUnknown": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "ComplianceSummary"
      },
      "AlertSourceModel": {
        "type": "object",
        "properties": {
          "AlertType": {
            "description": "Alert type.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertTypeModel"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Description of alert source."
          },
          "AlertSourceMetaData": {
            "items": {
              "$ref": "#/components/schemas/AlertSourceMetaDataModel"
            },
            "type": "array",
            "description": "Alert Source Data."
          },
          "Identifier": {
            "type": "string",
            "description": "Identifier of alert source."
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert source.",
            "format": "int64"
          },
          "FormatString": {
            "type": "string",
            "description": "Formatted String."
          },
          "Name": {
            "type": "string",
            "description": "Name of alert source."
          }
        }
      },
      "DevicesPrivilegesResponseModel": {
        "type": "object",
        "properties": {
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of device privileges"
          }
        }
      },
      "GroupTagReduced": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the group tag reduced owner",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group tag reduced id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Group tag reduced name"
          }
        }
      },
      "rmtDmn": {
        "type": "object",
        "properties": {
          "SvTg": {
            "type": "string",
            "description": "Servicetag."
          },
          "Addr": {
            "type": "string",
            "description": "Address."
          },
          "Name": {
            "type": "string",
            "description": "Name."
          }
        }
      },
      "Ipv4Setting": {
        "type": "object",
        "properties": {
          "CurrentSubnetMask": {
            "type": "string",
            "description": "Current subnet mask."
          },
          "EnableDHCP": {
            "type": "boolean",
            "description": "Enable DHCP."
          },
          "Enable": {
            "type": "boolean",
            "description": "Enable IPv4 setting."
          },
          "CurrentIPAddress": {
            "type": "string",
            "description": "Current IP address."
          },
          "CurrentPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS server."
          },
          "UseDHCPForDNSServerNames": {
            "type": "boolean",
            "description": "Use DHCP for DNS server names."
          },
          "CurrentGateway": {
            "type": "string",
            "description": "Current gateway."
          },
          "CurrentAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS server."
          }
        }
      },
      "JobActionRequestFilterModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Job status",
            "format": "int32"
          },
          "State": {
            "type": "string",
            "description": "Job state"
          },
          "StartTime": {
            "type": "string"
          },
          "LastRunStatus": {
            "type": "integer",
            "description": "Job's last run status",
            "format": "int32"
          },
          "EndTime": {
            "type": "string"
          },
          "JobType": {
            "type": "string",
            "description": "Job type"
          }
        }
      },
      "AlertDefinitionResponseModel": {
        "type": "object",
        "properties": {
          "AlertDefinitions": {
            "items": {
              "$ref": "#/components/schemas/AlertDefinitionModel"
            },
            "type": "array",
            "description": "List of alert definitions."
          }
        }
      },
      "ReducedDeviceSoftwareModel": {
        "type": "object",
        "properties": {
          "ComponentType": {
            "type": "string",
            "description": "Indicates the component type of the reduced device software"
          },
          "Version": {
            "type": "string",
            "description": "Reduced device software version"
          },
          "InstallationDate": {
            "type": "string",
            "description": "Reduced device software installation date"
          },
          "SoftwareType": {
            "type": "string",
            "description": "Indicates the software type of the reduced device software"
          },
          "DeviceDescription": {
            "type": "string",
            "description": "Reduced device software description"
          }
        }
      },
      "ApplicationInfoModel": {
        "type": "object",
        "properties": {
          "OperationTypeId": {
            "type": "integer",
            "description": "ID of operation type.",
            "format": "int32"
          },
          "Vendor": {
            "type": "string",
            "description": "Vendor Information."
          },
          "Name": {
            "type": "string",
            "description": "Name of the application."
          },
          "InstallDate": {
            "type": "string",
            "description": "Installation date.",
            "format": "date-time"
          },
          "Branding": {
            "type": "string",
            "description": "Branding information."
          },
          "OperationStatus": {
            "type": "string",
            "description": "Operation Status."
          },
          "OperationName": {
            "type": "string",
            "description": "Operation name."
          },
          "ManagementUri": {
            "type": "string",
            "description": "Management URI"
          },
          "ConfigTransactionId": {
            "type": "integer",
            "description": "Configuration transaction Id.",
            "format": "int32"
          },
          "BuildNumber": {
            "type": "string",
            "description": "Build number."
          },
          "OperationJobId": {
            "type": "integer",
            "description": "ID of operation job.",
            "format": "int32"
          },
          "Version": {
            "type": "string",
            "description": "Version of application."
          },
          "ProductType": {
            "type": "integer",
            "description": "Product type.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description."
          },
          "Guid": {
            "type": "string",
            "description": "GUID."
          },
          "BuildDate": {
            "type": "string",
            "description": "Build date.",
            "format": "date-time"
          }
        }
      },
      "IpAddressDetail": {
        "type": "object",
        "properties": {
          "IpAddress": {
            "type": "string",
            "description": "List of IP address of the compute"
          }
        }
      },
      "AlertTypeModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of alert type."
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert type.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name of alert type."
          }
        }
      },
      "DeviceStatusModel": {
        "required": [
          "GlobalStatus"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Device description name"
          },
          "Name": {
            "type": "string",
            "description": "Device status name"
          },
          "GlobalStatus": {
            "type": "integer",
            "description": "Device status id",
            "format": "int64"
          }
        }
      },
      "RollbackSoftwaresResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "RollbackSoftwares": {
            "items": {
              "$ref": "#/components/schemas/RollbackSoftwaresModel"
            },
            "type": "array"
          }
        }
      },
      "GroupDAOAttributeValidation": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "EnumValidation": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidationEnum"
            },
            "type": "array",
            "description": "Indicates the enum associated to the group DAO attribute validation type",
            "maxItems": 1
          },
          "ValidationTypeName": {
            "type": "string",
            "description": "Group DAO attribute validation type name"
          },
          "DecimalRangeValidation": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidationDecimal"
            },
            "type": "array",
            "description": "Indicates the decimal range associated to the group DAO attribute validation type",
            "maxItems": 1
          },
          "IdValidationType": {
            "type": "integer",
            "description": "Group DAO attribute validation validation type",
            "format": "int32"
          },
          "ValidationType": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/ValidationTypeEnum"
            },
            "type": "array",
            "description": "Indicates the group validation type",
            "maxItems": 1
          },
          "Units": {
            "type": "string",
            "description": "Units associated to the group DAO attribute validation"
          },
          "IdAttributeType": {
            "type": "integer",
            "description": "Group DAO attribute validation attribute type",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation id",
            "format": "int32"
          },
          "IntegerRangeValidation": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidationInteger"
            },
            "type": "array",
            "description": "Indicates the integer range associated to the group DAO attribute validation type",
            "maxItems": 1
          },
          "RegexValidation": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidationRegex"
            },
            "type": "array",
            "description": "Indicates the group regular expression validation type",
            "maxItems": 1
          }
        }
      },
      "FcSettings": {
        "type": "object",
        "properties": {
          "Wwpn": {
            "description": "World Wide Port Name (WWPN) settings",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/WwnSettings"
              }
            ]
          },
          "Wwnn": {
            "description": "World Wide Node Name (WWNN) settings",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/WwnSettings"
              }
            ]
          }
        }
      },
      "AlertSourceMetaDataModel": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string",
            "description": "Value."
          },
          "Key": {
            "type": "string",
            "description": "Key."
          }
        }
      },
      "SubsystemRollupStatusModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the subsystem rollup status",
            "format": "int32"
          },
          "SubsystemName": {
            "type": "string",
            "description": "Subsystem rollup status name"
          },
          "Id": {
            "type": "integer",
            "description": "Subsystem rollup status id",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated to the subsystem rollup status",
            "format": "int32"
          }
        }
      },
      "GetScopeResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Scope": {
            "items": {
              "$ref": "#/components/schemas/UserScope"
            },
            "type": "array"
          }
        },
        "title": "GetScopeResponseModel"
      },
      "ComponentComplianceReport": {
        "type": "object",
        "properties": {
          "PrerequisiteInfo": {
            "type": "string",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Criticality": {
            "type": "string",
            "nullable": true
          },
          "ComplianceStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ],
            "nullable": true
          },
          "UpdateAction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UpdateAction"
              }
            ],
            "nullable": true
          },
          "ComplianceDependencies": {
            "items": {
              "$ref": "#/components/schemas/ComplianceDependency"
            },
            "type": "array"
          },
          "Uri": {
            "type": "string",
            "nullable": true
          },
          "UniqueIdentifier": {
            "type": "string",
            "nullable": true
          },
          "ComponentType": {
            "type": "string",
            "nullable": true
          },
          "SourceName": {
            "type": "string",
            "nullable": true
          },
          "CurrentVersion": {
            "type": "string",
            "nullable": true
          },
          "TargetIdentifier": {
            "type": "string",
            "nullable": true
          },
          "ImpactAssessment": {
            "type": "string",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "nullable": true
          },
          "RebootRequired": {
            "type": "boolean",
            "nullable": true
          },
          "DependencyUpgradeRequired": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "ComponentComplianceReport"
      },
      "OMEDependencyCriteria": {
        "type": "object",
        "properties": {
          "OMEVersionMinimum": {
            "type": "string"
          },
          "OMEVersionMaximum": {
            "type": "string"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "Locked": {
            "default": false,
            "type": "boolean",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Roles": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Roles"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "UserTypeId": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "RoleId": {
            "type": "string"
          },
          "DirectoryServiceId": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Enabled": {
            "default": true,
            "type": "boolean"
          },
          "Permissions": {
            "items": {
              "$ref": "#/components/schemas/Permission"
            },
            "type": "array"
          },
          "IsVisible": {
            "default": true,
            "type": "boolean",
            "nullable": true
          },
          "IsBuiltin": {
            "default": false,
            "type": "boolean",
            "nullable": true
          },
          "Password": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string"
          },
          "Scope": {
            "items": {
              "$ref": "#/components/schemas/UserScope"
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Account"
      },
      "DeviceFru": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "nullable": true
          },
          "SerialNumber": {
            "type": "string",
            "nullable": true
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "PartNumber": {
            "type": "string",
            "nullable": true
          },
          "Revision": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Manufacturer": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceFru"
      },
      "AlertCommonAttributesModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of alert attribute."
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert attribute.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of alert attribute."
          }
        }
      },
      "ADAccountProvider": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "SearchTimeOut": {
            "type": "integer",
            "format": "int64"
          },
          "DnsServer": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ServerName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ServerType": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/serverType"
              }
            ]
          },
          "CertificateValidation": {
            "type": "boolean"
          },
          "NetworkTimeOut": {
            "type": "integer",
            "format": "int64"
          },
          "GroupDomain": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "CertificateFile": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ConfiguredResources": {
        "type": "object",
        "properties": {
          "Disk": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Valid": {
            "type": "boolean",
            "nullable": true
          },
          "CPU": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Memory": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          }
        },
        "title": "ConfiguredResources"
      },
      "SyslogFacility": {
        "type": "object",
        "properties": {},
        "title": "SyslogFacility"
      },
      "RecentActivityModel": {
        "type": "object",
        "properties": {
          "ExecutionHistoryId": {
            "type": "integer",
            "format": "int32"
          },
          "StartTime": {
            "type": "string"
          },
          "JobStatus": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobStatusModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "BaseEntityId": {
            "type": "integer",
            "format": "int32"
          },
          "TaskId": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "Key": {
            "type": "string"
          },
          "TaskType": {
            "type": "integer",
            "format": "int32"
          },
          "Progress": {
            "type": "string"
          },
          "TaskStatusId": {
            "type": "integer",
            "format": "int32"
          },
          "EndTime": {
            "type": "string"
          },
          "TaskName": {
            "type": "string"
          }
        }
      },
      "DeviceSubscription": {
        "type": "object",
        "properties": {
          "IsValid": {
            "type": "boolean",
            "nullable": true
          },
          "SubscriptionId": {
            "type": "string",
            "nullable": true
          },
          "InactiveDuration": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DeviceSubscription"
      },
      "FabricDesignApplicableNodeModel": {
        "type": "object",
        "properties": {
          "Slot": {
            "type": "string",
            "description": "IOM slot"
          },
          "ServiceTag": {
            "type": "string",
            "description": "IOM service tag"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Chassis service tag"
          },
          "ChassisName": {
            "type": "string",
            "description": "Chassis name"
          }
        }
      },
      "IdentityState": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Reserved - Assigned to a profile; deployment pending  | Assigned - Assigned to a profile and provisioned on device."
          }
        }
      },
      "ServerPowerSupplyModel": {
        "type": "object",
        "properties": {
          "Range1MaxInputPowerWatts": {
            "type": "integer",
            "description": "Maximum input power watts.",
            "format": "int32"
          },
          "AcOutput": {
            "type": "boolean",
            "description": "Indicates if AC output of server power supply."
          },
          "Name": {
            "type": "string",
            "description": "Name of server power supply."
          },
          "RequestedState": {
            "type": "integer",
            "description": "Requested state of server power supply.",
            "format": "int32"
          },
          "RedundancyStateString": {
            "type": "string",
            "description": "Redundancy state string of server power supply."
          },
          "SerialNumber": {
            "type": "string",
            "description": "Serial number of server power supply."
          },
          "RatedMaxOutputPower": {
            "type": "integer",
            "description": "Rated maximum output power.",
            "format": "int32"
          },
          "State": {
            "type": "string",
            "description": "State of server power supply."
          },
          "Location": {
            "type": "string",
            "description": "Location of server power supply."
          },
          "Model": {
            "type": "string",
            "description": "Model of server power supply."
          },
          "SwitchingSupply": {
            "type": "boolean",
            "description": "Indicates if switching supply of server power supply."
          },
          "Status": {
            "type": "integer",
            "description": "Status of server power supply.",
            "format": "int32"
          },
          "InputPowerUnits": {
            "type": "string",
            "description": "Input power units."
          },
          "AcInput": {
            "type": "boolean",
            "description": "Indicates if AC input of server power supply."
          },
          "OutputWatts": {
            "type": "integer",
            "description": "Output watts of server power supply.",
            "format": "int32"
          },
          "FirmwareVersion": {
            "type": "string",
            "description": "Firmware version of server power supply."
          },
          "OperationalStatus": {
            "type": "string",
            "description": "ID of server operating system."
          },
          "StatusString": {
            "type": "string",
            "description": "Status string of server power supply."
          },
          "Range1MaxInputVoltageHighMilliVolts": {
            "type": "integer",
            "description": "Operational status of server power supply.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "PowerSupplyType": {
            "type": "integer",
            "description": "Type of server power supply.",
            "format": "int32"
          },
          "InputVoltage": {
            "type": "integer",
            "description": "Input voltage of server power supply.",
            "format": "int32"
          },
          "RedundancyState": {
            "type": "string",
            "description": "Redundancy state of server power supply."
          },
          "PowerSupplyTypeString": {
            "type": "string",
            "description": "Indicates string value of Power Supply Type."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server power supply.",
            "format": "int32"
          },
          "ActiveInputVoltage": {
            "type": "string",
            "description": "Active input voltage of server power supply."
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer of server power supply."
          }
        }
      },
      "Forwarders": {
        "type": "object",
        "properties": {
          "DataSyncHistory": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DataSyncHistory"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "GroupSummary": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GroupSummary"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "ManagedDevicesSummary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ManagedDevicesSummary"
              }
            ],
            "nullable": true
          },
          "ManagedDevices": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ManagedDevices"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Enabled": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ForwarderConfigurations": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ForwarderConfigurations"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "CategoryIds": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "DataSyncConfigurations": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DataSyncConfigurations"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "Forwarders"
      },
      "ServerInterfaceUntaggedVlanTemplateModel": {
        "required": [
          "Id",
          "NativeVLAN"
        ],
        "type": "object",
        "properties": {
          "NativeVLAN": {
            "type": "integer",
            "description": "untagged VLANs",
            "format": "int32"
          },
          "Id": {
            "type": "string",
            "description": "Unique identifier"
          }
        }
      },
      "DeleteTemplateRequest": {
        "type": "object",
        "properties": {
          "TemplateIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          }
        }
      },
      "ForwarderConfigurationModel": {
        "type": "object",
        "properties": {
          "ConfigurationName": {
            "type": "string",
            "description": "Name of the configuration."
          },
          "ConfigurationValue": {
            "type": "string",
            "description": "Value of the configuration."
          }
        }
      },
      "AlertType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "AlertType"
      },
      "InventoryInfo": {
        "type": "object",
        "title": "InventoryInfo"
      },
      "NodeResponseModel": {
        "type": "object",
        "properties": {
          "Nodes": {
            "items": {
              "$ref": "#/components/schemas/NodeModel"
            },
            "type": "array",
            "description": "Node details"
          }
        }
      },
      "AuditLogCategoryEnum": {
        "type": "object",
        "properties": {},
        "title": "AuditLogCategoryEnum"
      },
      "DataSyncHistory": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "type": "string",
            "nullable": true
          },
          "TimeStamp": {
            "type": "string",
            "nullable": true
          },
          "DataSyncEndTime": {
            "type": "string",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "nullable": true
          },
          "DataSyncStartTime": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AdditionalDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AdditionalDetails"
              }
            ],
            "nullable": true
          }
        },
        "title": "DataSyncHistory"
      },
      "ServerFcCardModel": {
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string",
            "description": "Name of device."
          },
          "DeviceDescription": {
            "type": "string",
            "description": "Description of device."
          },
          "Fqdd": {
            "type": "string",
            "description": "FQDD of server FC card."
          },
          "SecondFctargetLun": {
            "type": "string",
            "description": "Second FC target LUN."
          },
          "PortSpeed": {
            "type": "string",
            "description": "Port speed of server FC card."
          },
          "SecondFctargetWwpn": {
            "type": "string",
            "description": "Second FC target WWPN."
          },
          "VendorName": {
            "type": "string",
            "description": "Vendor name of server FC card."
          },
          "FirstFctargetWwpn": {
            "type": "string",
            "description": "First FC target WWPN."
          },
          "PortNumber": {
            "type": "integer",
            "description": "Port number of server FC card.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "VirtualWwn": {
            "type": "string",
            "description": "Virtual WWN of server FC card."
          },
          "Wwpn": {
            "type": "string",
            "description": "WWPN of server FC card."
          },
          "FirstFctargetLun": {
            "type": "string",
            "description": "First FC target LUN."
          },
          "Wwn": {
            "type": "string",
            "description": "WWN of server FC card."
          },
          "LinkStatus": {
            "type": "string",
            "description": "Link status of server FC card."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server FC card.",
            "format": "int32"
          },
          "VirtualWwpn": {
            "type": "string",
            "description": "Virtual WWPN of server FC card."
          }
        }
      },
      "SortOrder": {
        "type": "object",
        "properties": {},
        "title": "SortOrder"
      },
      "ReportService": {
        "type": "object",
        "properties": {
          "ReportDefs": {
            "items": {
              "$ref": "#/components/schemas/ReportDef"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "ReportResults": {
            "items": {
              "$ref": "#/components/schemas/ReportResult"
            },
            "type": "array"
          },
          "ResultRows": {
            "items": {
              "$ref": "#/components/schemas/ReportResultRow"
            },
            "type": "array"
          }
        },
        "title": "ReportService"
      },
      "VLanNetworkInterface": {
        "type": "object",
        "properties": {
          "VLANEnable": {
            "type": "boolean",
            "description": "Indicates if VLAN is enabled."
          },
          "Id": {
            "type": "string",
            "description": "ID VLAN network interface."
          },
          "VLANId": {
            "items": {
              "$ref": "#/components/schemas/VLANId"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "Name of VLAN network interface."
          }
        }
      },
      "SNMPConfiguration": {
        "type": "object",
        "properties": {
          "DestinationAddress": {
            "type": "string",
            "description": "Destination address."
          },
          "Version": {
            "type": "string",
            "description": "Version of SNMP configuration."
          },
          "snmpV3Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV3Credential"
            },
            "type": "array"
          },
          "snmpV1V2Credential": {
            "items": {
              "$ref": "#/components/schemas/snmpV1V2Credential"
            },
            "type": "array"
          },
          "Enabled": {
            "type": "boolean",
            "description": "Enable SNMP Configuration."
          },
          "Id": {
            "type": "integer",
            "description": "ID of SNMP Configuration.",
            "format": "int32"
          }
        }
      },
      "GroupSummary": {
        "type": "object",
        "properties": {
          "DeviceCount": {
            "type": "integer",
            "description": " Total devices associated with the group.",
            "format": "int32"
          },
          "GroupName": {
            "type": "string",
            "description": "Name of the group."
          },
          "PowerStatus": {
            "description": "Power Status summary of the Group Devices",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PowerStatus"
              }
            ]
          },
          "ConnectedStatus": {
            "description": "Connection Status summary of the Group Devices",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ConnectedStatus"
              }
            ]
          },
          "GlobalHealth": {
            "description": "Health Status summary of the Group Devices",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/GlobalHealth"
              }
            ]
          },
          "GroupId": {
            "type": "integer",
            "description": "Group identifier id for the group.",
            "format": "int32"
          }
        }
      },
      "AlertActionRequestFiltersModel": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "integer",
            "description": "Category of alerts.",
            "format": "int32"
          },
          "StartDate": {
            "type": "string",
            "description": "Start date and time when the alerts were raised."
          },
          "EndDate": {
            "type": "string",
            "description": "End date and time when the alerts were raised."
          },
          "Severity": {
            "type": "integer",
            "description": "ID of severity.",
            "format": "int32"
          },
          "SourceName": {
            "type": "string",
            "description": "Source of the alert."
          },
          "DeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of IDs of devices."
          },
          "DeviceType": {
            "type": "integer",
            "description": "Device type ID.",
            "format": "int32"
          },
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of IDs of groups."
          },
          "Message": {
            "type": "string",
            "description": "Id of alerts."
          },
          "StatusType": {
            "type": "integer",
            "description": "ID of status type.",
            "format": "int32"
          },
          "SubCategory": {
            "type": "integer",
            "description": "Id of alerts.",
            "format": "int32"
          }
        }
      },
      "ReportResultModel": {
        "type": "object",
        "properties": {
          "TaskId": {
            "type": "integer",
            "format": "int32"
          },
          "ResultRowColumns": {
            "items": {
              "$ref": "#/components/schemas/ReportResultColModel"
            },
            "type": "array"
          },
          "Title": {
            "type": "string",
            "description": "Report title"
          },
          "Report_def_id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report result model ID",
            "format": "int32"
          },
          "ResultRows": {
            "items": {
              "$ref": "#/components/schemas/ReportResultRowModel"
            },
            "type": "array"
          }
        }
      },
      "ConnectivityStatus": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "nullable": true
          },
          "ConnectionCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Since": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ConnectivityStatus"
      },
      "ManagedDevices": {
        "type": "object",
        "properties": {
          "Status": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "PowerState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ConnectedState": {
            "type": "boolean",
            "nullable": true
          },
          "ServiceTag": {
            "type": "string",
            "nullable": true
          },
          "IpAddress": {
            "type": "string",
            "nullable": true
          },
          "DeviceManagement": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DeviceManagementModel"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ConnectionStateReason": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Groups": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "Model": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "ManagedDevices"
      },
      "EventCategory": {
        "type": "object",
        "properties": {
          "EventCategoryName": {
            "type": "string"
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "EventCategory"
      },
      "AlertSnmpEventOidToSeverityModel": {
        "type": "object",
        "properties": {
          "AlertSeverity": {
            "description": "The associated alert severity for the OID key value.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertSeverityModel"
              }
            ]
          },
          "OwnerId": {
            "type": "integer",
            "description": "The owner for the SNMP event oid.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Id of the SNMP event oid to severity.",
            "format": "int32"
          },
          "Key": {
            "type": "string",
            "description": "The severity OID value."
          },
          "IdSnmpEventForSeverity": {
            "type": "integer",
            "description": "The SNMP event for severity MAP.",
            "format": "int32"
          }
        }
      },
      "IdentityPoolAddUpdReply": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the Identity Pool that got created.",
            "format": "int32"
          },
          "IsSuccessful": {
            "type": "boolean"
          },
          "Issues": {
            "items": {
              "$ref": "#/components/schemas/IdentityPoolAddUpdIssue"
            },
            "type": "array"
          }
        }
      },
      "HealthModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Fabric health status"
          },
          "Issues": {
            "items": {
              "$ref": "#/components/schemas/MessageModel"
            },
            "type": "array"
          }
        }
      },
      "InfrastructureGroupHierarchyModel": {
        "required": [
          "GroupId",
          "GroupParentId",
          "IdOwner"
        ],
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "The owner id associated to the group hierarchy",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "description": "Child group id",
            "format": "int32"
          },
          "GroupParentId": {
            "type": "integer",
            "description": "Parent group id",
            "format": "int32"
          }
        }
      },
      "AlertDestination": {
        "type": "object",
        "properties": {
          "DefaultSMTPPort": {
            "type": "integer",
            "description": "Default SMTP Port.",
            "format": "int32"
          },
          "DefaultSyslogPort": {
            "type": "integer",
            "description": "Default SyslogPort.",
            "format": "int32"
          },
          "DefaultSNMPPort": {
            "type": "integer",
            "description": "Default SNMP Port.",
            "format": "int32"
          }
        }
      },
      "JobActionRequestPayloadModel": {
        "type": "object",
        "properties": {
          "JobIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of job ids"
          },
          "Filters": {
            "description": "Optional filters to specify when allJobs is true",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobActionRequestFilterModel"
              }
            ]
          },
          "AllJobs": {
            "type": "boolean",
            "description": "Selects all the jobs"
          }
        }
      },
      "ExecutionHistoryDetail": {
        "type": "object",
        "properties": {
          "ExecutionHistoryId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Key": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "ElapsedTime": {
            "type": "string",
            "nullable": true
          },
          "JobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "StartTime": {
            "type": "string"
          },
          "Progress": {
            "type": "string"
          },
          "EndTime": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "IdBaseEntity": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "ExecutionHistoryDetail"
      },
      "AlertSeverity": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "AlertSeverity"
      },
      "ProfileStates": {
        "type": "object",
        "title": "ProfileStates"
      },
      "DeviceLicense": {
        "type": "object",
        "properties": {
          "StartDate": {
            "format": "date-time",
            "type": "string",
            "example": "2017-04-13T15:51:04Z",
            "nullable": true
          },
          "LicenseType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LicensingType"
              }
            ],
            "nullable": true
          },
          "EntitlementId": {
            "type": "string",
            "nullable": true
          },
          "InfrastructureDevice": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EvalTimeRemaining": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AssignedDevices": {
            "type": "string",
            "nullable": true
          },
          "SoldDate": {
            "format": "date-time",
            "type": "string",
            "example": "2017-04-13T15:51:04Z",
            "nullable": true
          },
          "SoftwareType": {
            "type": "string",
            "nullable": true
          },
          "LicenseBound": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Expiration": {
            "format": "date-time",
            "type": "string",
            "example": "2017-04-13T15:51:04Z",
            "nullable": true
          },
          "LicenseStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LicenseTypeDetails": {
            "type": "string",
            "nullable": true
          },
          "LicenseDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceLicense"
      },
      "DeviceLocation": {
        "type": "object",
        "properties": {
          "Aisle": {
            "type": "string"
          },
          "Rackslot": {
            "type": "string"
          },
          "Datacenter": {
            "type": "string"
          }
        }
      },
      "AddressModel": {
        "type": "object",
        "properties": {
          "Exclude": {
            "type": "boolean",
            "description": "File contains exclude list or not."
          },
          "NetworkAddress": {
            "type": "string",
            "description": "Network address specified in file."
          },
          "Subnet": {
            "type": "string",
            "description": "Subnet for network address to be discovered."
          }
        }
      },
      "Schedule": {
        "type": "object",
        "properties": {
          "Cron": {
            "type": "string",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Schedule"
      },
      "SingleUpdateReportPayload": {
        "required": [
          "SingleUpdateReportFileToken"
        ],
        "type": "object",
        "properties": {
          "SingleUpdateReportGroup": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "set of devices present for a group."
          },
          "SingleUpdateReportTargets": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Device Ids comma seperated."
          },
          "SingleUpdateReportFileToken": {
            "type": "string",
            "description": "File Token generated when uploading Dell Update Package (DUP) using the API /UpdateService/Actions/UpdateService.UploadFile"
          },
          "SingleUpdateReportBaseline": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Set of devices present for a baseline."
          }
        }
      },
      "UserPrivilegeRequest": {
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "description": "User privilege request mac address"
          },
          "UserId": {
            "type": "string",
            "description": "User privilege request user Id"
          }
        }
      },
      "BaselineActionRequestPayloadModel": {
        "type": "object",
        "properties": {
          "BaselineIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Array of baseline ids. Make a GET call to /UpdateService/Baselines to get all the baseline Ids"
          },
          "AllBaselines": {
            "type": "boolean"
          }
        }
      },
      "PhysicalDevice": {
        "required": [
          "Id",
          "Size"
        ],
        "type": "object",
        "properties": {
          "EstimatedMaxPower": {
            "type": "integer",
            "description": "EstimatedMaxPower",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Id",
            "format": "int32"
          },
          "Size": {
            "type": "integer",
            "description": "Size",
            "format": "int32"
          }
        }
      },
      "ManagedDevicesPowerSummaryModel": {
        "type": "object",
        "properties": {
          "OnCount": {
            "type": "integer",
            "description": "On Power Status count of the managed devices.",
            "format": "int32"
          },
          "OffCount": {
            "type": "integer",
            "description": "Off Power Status count of the managed devices.",
            "format": "int32"
          },
          "UnknownCount": {
            "type": "integer",
            "description": "Unknown Power Status count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "DiscoverableDeviceTypeModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DiscoverableDeviceTypeModel"
      },
      "DownloadReportResponse": {
        "type": "object",
        "properties": {
          "FilePath": {
            "type": "string",
            "description": "Location of the report"
          }
        }
      },
      "IPv4AddressOrigin": {
        "type": "object",
        "properties": {},
        "title": "IPv4AddressOrigin"
      },
      "ReplicableChassisSettingsRequestModel": {
        "required": [
          "ReplicateChassisTime",
          "ReplicateChassisAlertDestination"
        ],
        "type": "object",
        "properties": {
          "ReplicateChassisTime": {
            "type": "boolean",
            "description": "Replication Chassis time Flag."
          },
          "ReplicateChassisAlertDestination": {
            "type": "boolean",
            "description": "Replication Chassis alert Flag."
          }
        }
      },
      "NTPSettings": {
        "type": "object",
        "properties": {
          "Source": {
            "description": "NTP source information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NTPSource"
              }
            ]
          },
          "State": {
            "description": "NTP Setting State information.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NTPState"
              }
            ]
          },
          "Servers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of servers."
          }
        }
      },
      "ValidationTypeEnum": {
        "enum": [
          "INTEGER",
          "DECIMAL",
          "REGEX",
          "ENUM"
        ],
        "type": "string",
        "title": "ValidationTypeEnum"
      },
      "JobParam": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "string",
            "nullable": true
          },
          "Key": {
            "type": "string"
          },
          "JobId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "JobParam"
      },
      "TemplateAttributesUpdateModel": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ReducedAttributeModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "GlobalExclusionValidationResponse": {
        "type": "object",
        "properties": {
          "NetworkAddress": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of network address."
          }
        }
      },
      "GraphicInfoModel": {
        "type": "object",
        "properties": {
          "Svg": {
            "type": "string",
            "description": "Indicates the scalable vector graphic value"
          }
        }
      },
      "MetricsDeviceModel": {
        "type": "object",
        "properties": {
          "DeviceIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of device ids"
          }
        }
      },
      "OIDCAuthorizationServerIds": {
        "type": "object",
        "properties": {
          "IncludeAllIds": {
            "type": "boolean",
            "description": "When this value is set to true, oidcServerIds will not be used."
          },
          "OidcServerIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "IDs Of the OpenID Providers"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "EventId": {
            "type": "string"
          },
          "Severity": {
            "type": "string",
            "nullable": true
          },
          "EventType": {
            "type": "string",
            "nullable": true
          },
          "MemberId": {
            "type": "string",
            "nullable": true
          },
          "messageArgs": {
            "items": {
              "type": "string",
              "nullable": true
            },
            "type": "array"
          },
          "OriginOfCondition": {
            "type": "string",
            "nullable": true
          },
          "EventTimestamp": {
            "type": "string",
            "nullable": true
          },
          "MessageId": {
            "type": "string",
            "nullable": true
          },
          "Context": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Event"
      },
      "SubEntityType": {
        "type": "object",
        "properties": {},
        "title": "SubEntityType"
      },
      "Weekly": {
        "type": "object",
        "properties": {
          "Day": {
            "type": "string",
            "description": "Days of week on which job executes."
          },
          "Time": {
            "description": "Time at which job executes.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/Time"
              }
            ]
          }
        }
      },
      "NetworkTypeModel": {
        "type": "object",
        "properties": {
          "VendorCode": {
            "type": "string",
            "description": "The vendor code for each network type."
          },
          "Description": {
            "type": "string",
            "description": "Description of the network type."
          },
          "QosType": {
            "type": "integer",
            "description": "The type of quality-of-service (QoS).",
            "format": "int32"
          },
          "NetworkTrafficType": {
            "type": "string",
            "description": "Network traffic types. Possible values are Ethernet and FCoE"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the network.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the network type."
          }
        }
      },
      "ValidationActionMetadata": {
        "type": "object",
        "properties": {
          "ConfigFile": {
            "type": "string",
            "description": "Indicates the validation configuration file"
          },
          "Value": {
            "description": "List of validation actions",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ValidationActions"
              }
            ]
          },
          "JarFile": {
            "type": "string",
            "description": "Indicates the validation jar file"
          }
        }
      },
      "Network": {
        "type": "object",
        "properties": {
          "UpdatedTime": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "VlanMaximum": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "CreationTime": {
            "type": "string",
            "nullable": true
          },
          "VlanMinimum": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "InternalRefNWUUId": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "Type": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Network"
      },
      "ManagementType": {
        "type": "object",
        "properties": {
          "ManagementType": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "SaveCategoryPayload": {
        "required": [
          "EventCategoryName"
        ],
        "type": "object",
        "properties": {
          "EventCategoryName": {
            "type": "string",
            "description": "Name of the event category which will be created."
          }
        }
      },
      "ResourceConfig": {
        "type": "object",
        "properties": {
          "Vcpu": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Mem": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Storage": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          }
        },
        "title": "ResourceConfig"
      },
      "CurrentNetworkSettings": {
        "type": "object",
        "properties": {
          "CurrentNetworkDetails": {
            "type": "string",
            "description": "Current network details."
          },
          "ReturnValue": {
            "type": "integer",
            "description": "Return value of current network settings.",
            "format": "int32"
          }
        }
      },
      "GetReservedIdentitiesRequest": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "BaseEntityId": {
            "type": "integer",
            "description": "This is the device or slot used to get the target inventory template.",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "PowerStatus": {
        "type": "object",
        "properties": {
          "PoweringOnCount": {
            "type": "integer",
            "description": "PoweringOn state count of the managed devices.",
            "format": "int32"
          },
          "UnknownCount": {
            "type": "integer",
            "description": "Unknown state count of the managed devices.",
            "format": "int32"
          },
          "OffCount": {
            "type": "integer",
            "description": "Off Power state count of the managed devices.",
            "format": "int32"
          },
          "PoweringOffCount": {
            "type": "integer",
            "description": "PoweringOff state count of the managed devices.",
            "format": "int32"
          },
          "OnCount": {
            "type": "integer",
            "description": "On Power Status count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "Permission": {
        "type": "object",
        "properties": {
          "RoleId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UserId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Entities": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "Permission"
      },
      "ReportResultRow": {
        "type": "object",
        "title": "ReportResultRow"
      },
      "GroupDevicesSummary": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupDevicesStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/GroupDevicesStatusSummary"
            },
            "type": "array"
          }
        },
        "title": "GroupDevicesSummary"
      },
      "InitiatorConfig": {
        "required": [
          "IqnPrefix"
        ],
        "type": "object",
        "properties": {
          "IqnPrefix": {
            "type": "string",
            "description": "IQN prefix of iSCSI identity pool - The length of the IQN prefix is a maximum of 200 characters."
          }
        }
      },
      "PolicyDocumentModel": {
        "type": "object",
        "properties": {
          "CustomTags": {
            "type": "string"
          },
          "PlcyEnb": {
            "type": "string"
          },
          "TypCat": {
            "type": "string"
          },
          "PlcyId": {
            "type": "string"
          },
          "OwnerUserId": {
            "type": "string"
          },
          "PlcyNm": {
            "type": "string"
          },
          "PlcyTrgts": {
            "type": "string"
          },
          "PlcyDesc": {
            "type": "string"
          }
        }
      },
      "Job": {
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string",
            "nullable": true
          },
          "JobType": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobType"
              }
            ],
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "Schedule": {
            "type": "string",
            "nullable": true
          },
          "LastRunStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobStatus"
              }
            ],
            "nullable": true
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/Target"
            },
            "type": "array"
          },
          "Editable": {
            "type": "boolean",
            "nullable": true
          },
          "NextRun": {
            "type": "string",
            "nullable": true
          },
          "JobStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/JobStatus"
              }
            ],
            "nullable": true
          },
          "JobName": {
            "type": "string",
            "nullable": true
          },
          "ExecutionHistories": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistory"
            },
            "type": "array"
          },
          "Visible": {
            "type": "boolean",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "JobDescription": {
            "type": "string",
            "nullable": true
          },
          "Params": {
            "items": {
              "$ref": "#/components/schemas/JobParam"
            },
            "type": "array"
          },
          "UserGenerated": {
            "type": "boolean",
            "nullable": true
          },
          "StartTime": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Builtin": {
            "type": "boolean",
            "nullable": true
          }
        },
        "title": "Job"
      },
      "DeviceComplianceReportModel": {
        "type": "object",
        "properties": {
          "ServiceTag": {
            "type": "string",
            "description": "Service Tag of the device"
          },
          "DeviceName": {
            "type": "string",
            "description": "Name of the device, such as IDRAC-xxxx"
          },
          "DeviceModel": {
            "type": "string",
            "description": "Model of the device."
          },
          "ComplianceStatus": {
            "description": "Shows the compliance status, such as 'OK'",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ]
          },
          "FirmwareStatus": {
            "type": "string",
            "description": "Shows if firmware is Compliant or not."
          },
          "DeviceTypeId": {
            "type": "integer",
            "description": "Numeric value for the device type such as server(1000)",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Identifier for the device in the appliance",
            "format": "int32"
          },
          "RebootRequired": {
            "type": "boolean",
            "description": "Indicates if a reboot is required to make the device compliant."
          },
          "ComponentComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/ComponentComplianceReportModel"
            },
            "type": "array",
            "description": "Link to the component compliance report, identifying the software components on the device and if they match up against the catalog."
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceTypeName": {
            "type": "string",
            "description": "Type of device, such as SERVER or CHASSIS."
          }
        }
      },
      "FabricReplaceSwitchModel": {
        "required": [
          "OldSwitchServiceTag",
          "NewSwitchServiceTag"
        ],
        "type": "object",
        "properties": {
          "NewSwitchServiceTag": {
            "type": "string",
            "description": "Identifier of the switch, which       will be replaced with faulty switch."
          },
          "OldSwitchServiceTag": {
            "type": "string",
            "description": "Identifier of the faulty switch"
          }
        }
      },
      "UpdateCriteria": {
        "type": "object",
        "properties": {
          "VersionMaximum": {
            "type": "string"
          },
          "Notes": {
            "type": "string"
          },
          "DirectUpgradeSupported": {
            "type": "boolean"
          },
          "VersionMinimum": {
            "type": "string"
          }
        }
      },
      "ResetConfiguration": {
        "type": "object",
        "properties": {
          "ForceReset": {
            "type": "boolean",
            "description": "Indicates if force reset."
          },
          "ResetType": {
            "description": "Reset type.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ResetType"
              }
            ]
          }
        }
      },
      "WarrantyModel": {
        "type": "object",
        "properties": {
          "DeviceIdentifier": {
            "type": "string",
            "description": "Filter by device identifier"
          },
          "DeviceModel": {
            "type": "string",
            "description": "Filter by device model - default 0"
          },
          "StartDate": {
            "type": "string",
            "description": "Filter by startDate"
          },
          "IsWarrantyItemRenewed": {
            "type": "boolean",
            "description": "Filter by isWarrantyItemRenewed"
          },
          "MaxEndDateForServiceCode": {
            "type": "string",
            "description": "Filter by maxEndDateForServiceCode"
          },
          "State": {
            "type": "string",
            "description": "Filter by state"
          },
          "DeviceType": {
            "type": "integer",
            "description": "Filter by device type - default 0",
            "format": "int64"
          },
          "CustomerNumber": {
            "type": "integer",
            "description": "Filter by customerNumber",
            "format": "int64"
          },
          "ServiceLevelGroup": {
            "type": "integer",
            "description": "Filter by serviceLevelGroup",
            "format": "int64"
          },
          "DeviceName": {
            "type": "string",
            "description": "Filter by device name"
          },
          "EndDate": {
            "type": "string",
            "description": "Filter by endDate"
          },
          "OrderNumber": {
            "type": "integer",
            "description": "Filter by orderNumber",
            "format": "int64"
          },
          "ServiceProvider": {
            "type": "string",
            "description": "Filter by serviceProvider"
          },
          "LocalChannel": {
            "type": "string",
            "description": "Filter by localChannel"
          },
          "SystemShipDate": {
            "type": "string",
            "description": "Filter by systemShipDate"
          },
          "CountryLookupCode": {
            "type": "string",
            "description": "Filter by countryLookupCode"
          },
          "ServiceLevelCode": {
            "type": "string",
            "description": "Filter by serviceLevelCode"
          },
          "ServiceLevelDescription": {
            "type": "string",
            "description": "Filter by serviceLevelDescription"
          },
          "ItemNumber": {
            "type": "string",
            "description": "Filter by itemNumber"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Filter by device id - default 0",
            "format": "int32"
          },
          "Timestamp": {
            "type": "string",
            "description": "Filter by timestamp"
          },
          "DaysRemaining": {
            "type": "integer",
            "description": "Filter by remaining days for warranty expiry",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Filter by event id - default 0",
            "format": "int32"
          }
        }
      },
      "DiscoveryConfigGroup": {
        "type": "object",
        "properties": {
          "DiscoveryConfigDiscoveredDeviceCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Schedule": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ],
            "nullable": true
          },
          "UseAllProfiles": {
            "type": "boolean",
            "nullable": true
          },
          "DiscoveryConfigGroupName": {
            "type": "string",
            "nullable": true
          },
          "DiscoveryConfigExpectedDeviceCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DiscoveryConfigModels": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigModel"
            },
            "type": "array"
          },
          "DiscoveryConfigGroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DiscoveryJobStatusModel": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DiscoveryJobStatusModel"
              }
            ],
            "nullable": true
          },
          "DiscoveryStatusEmailRecipient": {
            "type": "string",
            "nullable": true
          },
          "CreateGroup": {
            "type": "boolean",
            "nullable": true
          },
          "CommunityString": {
            "type": "boolean",
            "nullable": true
          },
          "TrapDestination": {
            "type": "boolean",
            "nullable": true
          }
        },
        "title": "DiscoveryConfigGroup"
      },
      "AttributeViewDetailModel": {
        "type": "object",
        "properties": {
          "TemplateEditInfo": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/TemplateEditInfoModel"
              }
            ]
          },
          "Description": {
            "type": "string"
          },
          "AttributeGroupNames": {
            "items": {
              "$ref": "#/components/schemas/AttributeGroupNameModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "Name of the attribute view - Template Specific/System Specific"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "AttributeGroups": {
            "items": {
              "$ref": "#/components/schemas/AttributeGroupModel"
            },
            "type": "array"
          }
        }
      },
      "DataSyncConfigurationRespModel": {
        "type": "object",
        "properties": {
          "DataSyncConfigurationModel": {
            "items": {
              "$ref": "#/components/schemas/DataSyncConfigurationModel"
            },
            "type": "array"
          }
        }
      },
      "OIDCAuthServerTaskModel": {
        "type": "object",
        "properties": {
          "JobId": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "JobStatus": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "PluginAvailabilityStatus": {
        "type": "object",
        "properties": {
          "DisabledPluginsOnUpgrade": {
            "type": "integer",
            "description": "Disabled plugins from console update",
            "format": "int32"
          },
          "DisabledPluginWithDevices": {
            "type": "integer",
            "description": "Disabled plugin with devices",
            "format": "int32"
          },
          "DownloadedPlugins": {
            "type": "boolean",
            "description": "Indicates if plugin is downloaded"
          },
          "AvailablePlugins": {
            "type": "integer",
            "description": "Available plugin info",
            "format": "int32"
          },
          "UpdatedPlugins": {
            "type": "integer",
            "description": "Updated Plugin info",
            "format": "int32"
          },
          "IncompatibleInstalledAndEnabledPlugins": {
            "type": "integer",
            "description": "The count of incompatible installed enabled plugins.",
            "format": "int32"
          }
        }
      },
      "AlertsODataResponseModel": {
        "type": "object",
        "properties": {
          "Alerts": {
            "items": {
              "$ref": "#/components/schemas/AlertModel"
            },
            "type": "array",
            "description": "List of alerts."
          }
        }
      },
      "CapabilityType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string"
          },
          "CapabilityId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "PluginsActionRequestJobParamModel": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string"
          },
          "PluginId": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "AcceptAllLicenseAgreements": {
            "type": "boolean"
          }
        }
      },
      "SensorHealth": {
        "type": "object",
        "properties": {
          "SubSystemData": {
            "items": {
              "$ref": "#/components/schemas/SubSystem"
            },
            "type": "array",
            "description": "List of subsystem."
          },
          "Reason": {
            "type": "string",
            "description": "Reason."
          },
          "HealthStatus": {
            "type": "string",
            "description": "Health status."
          },
          "Name": {
            "type": "string",
            "description": "Name."
          }
        }
      },
      "Security": {
        "type": "object",
        "properties": {
          "SecurityConfiguration": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FIPSModeConfiguration"
              }
            ],
            "nullable": true
          }
        },
        "title": "Security"
      },
      "GroupTags": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupTag"
            },
            "type": "array",
            "description": "List of group attribute tags"
          }
        }
      },
      "MetricsComponentId": {
        "type": "object",
        "properties": {
          "ComponentName": {
            "type": "string",
            "description": "Component Name of the metrics."
          },
          "ComponentId": {
            "type": "integer",
            "description": "Component Id of the metrics.",
            "format": "int32"
          }
        }
      },
      "DeployRequired": {
        "type": "object",
        "title": "DeployRequired"
      },
      "TopEnergyConsumersResponse": {
        "type": "object",
        "properties": {
          "PluginId": {
            "type": "string"
          }
        },
        "title": "TopEnergyConsumersResponse"
      },
      "DiscoveryConfigTarget": {
        "required": [
          "NetworkAddressDetail",
          "AddressType",
          "Disabled",
          "Exclude"
        ],
        "type": "object",
        "properties": {
          "Disabled": {
            "type": "boolean",
            "description": "If the given target address is disabled or not."
          },
          "NetworkAddressDetail": {
            "type": "string",
            "description": "Network address in which device need to be discovered."
          },
          "AddressType": {
            "type": "integer",
            "description": "Type of the address(IPv4/IPv6/Hostname) provided for discovery.",
            "format": "int32"
          },
          "DiscoveryConfigTargetId": {
            "type": "integer",
            "description": "ID of the Discovery configuration target.",
            "format": "int32"
          },
          "SubnetMask": {
            "type": "string",
            "description": "Subnet mask of network in which device need to be discovered."
          },
          "Exclude": {
            "type": "boolean",
            "description": "An address need to be excluded or not"
          }
        }
      },
      "Ipv6Setting": {
        "type": "object",
        "properties": {
          "CurrentLinkLocalAddress": {
            "type": "string",
            "description": "Local address."
          },
          "CurrentIPAddress": {
            "type": "string",
            "description": "IP address."
          },
          "Enable": {
            "type": "boolean",
            "description": "Enable IPv6 setting."
          },
          "CurrentPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS server."
          },
          "UseDHCPForDNSServerNames": {
            "type": "boolean",
            "description": "Use DHCP for DNS server names."
          },
          "CurrentGateway": {
            "type": "string",
            "description": "Gateway."
          },
          "CurrentAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS server."
          },
          "EnableAutoConfiguration": {
            "type": "boolean",
            "description": "Enable auto configuration."
          }
        }
      },
      "DiscoveryConfigModelError": {
        "type": "object",
        "properties": {
          "DiscoveryConfigDescription": {
            "type": "string",
            "description": "Discovery configuration description."
          },
          "HasError": {
            "type": "boolean",
            "description": "True if there is any error in request data."
          },
          "ErrorMessage": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of errors in discovery configuration request data."
          },
          "DiscoveryConfigId": {
            "type": "integer",
            "description": "Discovery configuration ID.",
            "format": "int32"
          }
        }
      },
      "PluginActionCompatibilityResponseModel": {
        "type": "object",
        "properties": {
          "Compatible": {
            "type": "boolean",
            "description": "Indicates if plugin is compatible"
          },
          "Messages": {
            "items": {
              "$ref": "#/components/schemas/LocalizedMessage"
            },
            "type": "array",
            "description": "Localized message"
          },
          "Id": {
            "type": "string",
            "description": "Plugin id"
          }
        }
      },
      "ComplianceAttribute": {
        "type": "object",
        "properties": {
          "DisplayName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "ComplianceStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "AttributeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ExpectedValue": {
            "type": "string",
            "nullable": true
          },
          "CustomId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ComplianceReason": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ComplianceAttribute"
      },
      "CachedDataModel": {
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer",
            "description": "Indicates the max entries that can be cached",
            "format": "int32"
          }
        }
      },
      "CatalogBaselinesAssociationModel": {
        "type": "object",
        "properties": {
          "Id": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Catalog Ids comma separated"
          }
        }
      },
      "RunReportRequest": {
        "required": [
          "ReportDefId"
        ],
        "type": "object",
        "properties": {
          "FilterGroupId": {
            "type": "integer",
            "description": "Filter group ID",
            "format": "int32"
          },
          "ReportDefId": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "RollbackSoftwares": {
        "type": "object",
        "properties": {
          "VendorId": {
            "type": "string",
            "nullable": true
          },
          "SoftwareType": {
            "type": "string",
            "nullable": true
          },
          "DeviceDescription": {
            "type": "string",
            "nullable": true
          },
          "PCIDeviceId": {
            "type": "string",
            "nullable": true
          },
          "InstanceId": {
            "type": "string",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "nullable": true
          },
          "SubDeviceId": {
            "type": "string",
            "nullable": true
          },
          "CurrentVersion": {
            "type": "string",
            "nullable": true
          },
          "InstallationDate": {
            "type": "string",
            "nullable": true
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "RollbackVersion": {
            "type": "string",
            "nullable": true
          },
          "CatalogId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SubVendorId": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "RollbackSource": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "RollbackSoftwares"
      },
      "AlertSNMPEventModel": {
        "type": "object",
        "properties": {
          "GenericTrapId": {
            "type": "integer",
            "description": "Generic TrapId of alert.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of alert."
          },
          "SpecificTrapId": {
            "type": "integer",
            "description": "Specific Trap Id of alert.",
            "format": "int32"
          },
          "EnterpriseOid": {
            "type": "string",
            "description": "Enterprise OID of alert."
          },
          "EventDefinition": {
            "description": "Event Definition.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertDefinitionModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "Id of alert.",
            "format": "int64"
          },
          "FormatString": {
            "type": "string",
            "description": "Formatted string."
          },
          "Description": {
            "type": "string",
            "description": "Description of alert."
          }
        }
      },
      "AccountListModel": {
        "type": "object",
        "properties": {
          "AccountIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Account Ids"
          }
        }
      },
      "LicenseType": {
        "type": "object",
        "properties": {
          "LicenseId": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AlertActionRequestPayload": {
        "type": "object",
        "properties": {
          "AlertIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          },
          "AllAlerts": {
            "type": "boolean",
            "nullable": true
          },
          "Filters": {
            "items": {
              "$ref": "#/components/schemas/AlertActionRequestFilterPayload"
            },
            "type": "array"
          }
        },
        "title": "AlertActionRequestPayload"
      },
      "PluginsCompatibilityResponse": {
        "type": "object",
        "properties": {
          "Plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginsResModel"
            },
            "type": "array",
            "description": "List of plugins response model"
          }
        }
      },
      "GroupAttributeReduced": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Group attribute reduced id",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Indicates the group attribute reduced value(s)"
          }
        }
      },
      "MIBEventSeverity": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of the event severity.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the severity."
          },
          "Name": {
            "type": "string",
            "description": "Unknown|Info|Normal|Warning|Critical"
          }
        }
      },
      "NewAddressConfiguration": {
        "type": "object",
        "properties": {
          "SettingChanges": {
            "type": "string",
            "description": "Settings information."
          },
          "AddressConfiguration": {
            "items": {
              "$ref": "#/components/schemas/AddressConfiguration"
            },
            "type": "array"
          }
        }
      },
      "GroupDAOAttributeValidationInteger": {
        "type": "object",
        "properties": {
          "Max": {
            "type": "integer",
            "description": "Indicates the max integer range for the validation",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute validation integer id",
            "format": "int32"
          },
          "Min": {
            "type": "integer",
            "description": "Indicates the min integer range for the validation",
            "format": "int32"
          }
        }
      },
      "WarrantiesResponseModel": {
        "type": "object",
        "properties": {
          "Warranties": {
            "items": {
              "$ref": "#/components/schemas/WarrantyModel"
            },
            "type": "array"
          }
        }
      },
      "GroupTag": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Group tag description"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Group tag owner",
            "format": "int32"
          },
          "ParentTagId": {
            "type": "integer",
            "description": "Indicates the parent tag id for the group tag",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Group tag id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Group tag name"
          }
        }
      },
      "RepositoryModel": {
        "required": [
          "Name",
          "RepositoryType"
        ],
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "Username to access the share containing the catalog (CIFS/HTTPS)"
          },
          "Source": {
            "type": "string",
            "description": "URL or IP or FQDN of the repository host"
          },
          "Description": {
            "type": "string",
            "description": "Description of the repository "
          },
          "DomainName": {
            "type": "string",
            "description": "Domain Name for user credentials "
          },
          "RepositoryType": {
            "description": "NFS/CIFS/HTTP/HTTPS/DELL_ONLINE",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/RepositoryModelType"
              }
            ]
          },
          "Password": {
            "type": "string",
            "description": "Password to access the share containing the catalog (CIFS/HTTPS)"
          },
          "CheckCertificate": {
            "type": "boolean",
            "description": "If certificate check must be done for HTTPS repository"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the repository. The name must be unique for each repository that is created"
          }
        }
      },
      "CatalogsModel": {
        "required": [
          "BaseLocation",
          "Repository"
        ],
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of creating the catalog."
          },
          "ManifestVersion": {
            "type": "string",
            "description": "Catalog manifest version."
          },
          "ReleaseIdentifier": {
            "type": "string",
            "description": "Catalog release identifier."
          },
          "Repository": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/RepositoryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Schedule": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "ManifestIdentifier": {
            "type": "string",
            "description": "Catalog manifest identifier."
          },
          "NextUpdate": {
            "type": "string"
          },
          "LastUpdated": {
            "type": "string",
            "description": "Date time when the catalog instance was updated in the appliance."
          },
          "Filename": {
            "type": "string",
            "description": "File name of the catalog"
          },
          "SourcePath": {
            "type": "string",
            "description": "Repository source-Full path including     subfolders to where the catalog file is located. For example-downloads.dell.com/catalog/catalog.gz"
          },
          "BundlesCount": {
            "type": "integer",
            "description": "Number of bundles referenced in the catalog",
            "format": "int32"
          },
          "AssociatedBaselines": {
            "items": {
              "$ref": "#/components/schemas/AssociatedBaselineModel"
            },
            "type": "array",
            "description": "The baselines that are associated with the catalog. This is an array."
          },
          "TaskId": {
            "type": "integer",
            "description": "The identifier of the task or job that is created to download the catalog.",
            "format": "int64"
          },
          "CreatedDate": {
            "type": "string",
            "description": "Catalog release date."
          },
          "PredecessorIdentifier": {
            "type": "string",
            "description": "Identifier for the catalog version that was published before the current catalog."
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "BaseLocation": {
            "type": "string",
            "description": "The repository location for the catalog (for example for online catalogs, the location is downloads.dell.com)"
          }
        }
      },
      "DeviceDetailsRequest": {
        "type": "object",
        "properties": {
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/PhysicalDevice"
            },
            "type": "array"
          }
        }
      },
      "DeviceModelListItem": {
        "type": "object",
        "properties": {
          "DeviceTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "IdentityCounts": {
        "type": "object",
        "properties": {
          "IdentityTypeId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "TotalRequested": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "TotalDeployed": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "TotalReserved": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "IdentityCounts"
      },
      "DeviceService": {
        "type": "object",
        "properties": {
          "DeviceSettingsMetadata": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/DeviceSettingsMetadata"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "DeviceSlotType": {
            "items": {
              "$ref": "#/components/schemas/DeviceSlotType"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "DeviceStatuses": {
            "items": {
              "$ref": "#/components/schemas/DeviceStatus"
            },
            "type": "array"
          },
          "DeviceSummary": {
            "items": {
              "$ref": "#/components/schemas/DeviceSummary"
            },
            "type": "array"
          },
          "PowerStates": {
            "items": {
              "$ref": "#/components/schemas/PowerState"
            },
            "type": "array"
          },
          "DeviceType": {
            "items": {
              "$ref": "#/components/schemas/DeviceType"
            },
            "type": "array"
          },
          "Devices": {
            "items": {
              "$ref": "#/components/schemas/Device"
            },
            "type": "array"
          },
          "ConnectionStateReasons": {
            "items": {
              "$ref": "#/components/schemas/ConnectionStateReason"
            },
            "type": "array"
          }
        },
        "title": "DeviceService"
      },
      "FileError": {
        "type": "object",
        "properties": {
          "ErrorCode": {
            "description": "Specific error code for the occurred error.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkAddressErrorCode"
              }
            ]
          },
          "Line": {
            "type": "string",
            "description": "Line which is creating error."
          },
          "LineNumber": {
            "type": "integer",
            "description": "Line number in file which is creating error.",
            "format": "int32"
          }
        }
      },
      "PluginsActionRequest": {
        "type": "object",
        "properties": {
          "Plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginsActionRequestModel"
            },
            "type": "array"
          }
        }
      },
      "SMTPSettings": {
        "type": "object",
        "properties": {
          "UseSSL": {
            "type": "boolean",
            "description": "Use SSL."
          },
          "Credential": {
            "items": {
              "$ref": "#/components/schemas/Credential"
            },
            "type": "array"
          },
          "UseCredentials": {
            "type": "boolean",
            "description": "Use credentials."
          },
          "Id": {
            "type": "integer",
            "description": "SMTP Setting Id.",
            "format": "int64"
          },
          "Server": {
            "type": "string",
            "description": "Server information."
          }
        }
      },
      "ShareDetail": {
        "type": "object",
        "properties": {
          "ShareName": {
            "type": "string",
            "description": "Name of the network share."
          },
          "Password": {
            "type": "string",
            "description": "Password to access the network share."
          },
          "IpAddress": {
            "type": "string",
            "description": "IP address of the network share."
          },
          "WorkGroup": {
            "type": "string",
            "description": "Workgroup of the network share (if applicable)."
          },
          "User": {
            "type": "string",
            "description": "Username to access the network share."
          }
        }
      },
      "DiscoveryConfigGroupModel": {
        "required": [
          "DiscoveryConfigGroupName",
          "DiscoveryConfigModels",
          "Schedule"
        ],
        "type": "object",
        "properties": {
          "DiscoveryConfigParentGroupId": {
            "type": "integer",
            "description": "Parent group ID of the Discovery Configuration Group.",
            "format": "int64"
          },
          "UseAllProfiles": {
            "type": "boolean",
            "description": "Flag used internally to determine if all profiles will be exercised during discovery."
          },
          "Schedule": {
            "description": "Schedule of job execution .",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "DiscoveryConfigTaskParam": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigTaskParam"
            },
            "type": "array",
            "description": "List of discovery configuration job parameters."
          },
          "DiscoveryConfigGroupName": {
            "type": "string",
            "description": "Name of the Discovery Configuration Group."
          },
          "DiscoveryConfigModels": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigModel"
            },
            "type": "array",
            "description": "List of discovery configuration details."
          },
          "DiscoveryConfigGroupId": {
            "type": "integer",
            "description": "ID of the Discovery Configuration Group.",
            "format": "int64"
          },
          "DiscoveryStatusEmailRecipient": {
            "type": "string",
            "description": "Recipient email ID to whom status after completion of the discovery configuration job will be sent."
          },
          "DiscoveryConfigGroupDescription": {
            "type": "string",
            "description": "Description of the Discovery Configuration Group."
          },
          "CreateGroup": {
            "type": "boolean",
            "description": "Tells to create/not create Discovery Configuration Group job in case it doesn't exists already."
          },
          "CommunityString": {
            "type": "boolean",
            "description": "Flag to specify if Community String for trap destination is set or not from Application Settings."
          },
          "ChassisIdentifier": {
            "type": "string",
            "description": "Chassis Identification details."
          },
          "TrapDestination": {
            "type": "boolean",
            "description": "Flag to specify the discovery of OME–Modular to be done using OpenManage Enterprise with trap destination."
          },
          "DiscoveryConfigTasks": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigJobModel"
            },
            "type": "array",
            "description": "List of discovery configuration jobs and its details."
          }
        }
      },
      "GroupService": {
        "type": "object",
        "properties": {
          "GroupTypes": {
            "items": {
              "$ref": "#/components/schemas/GroupType"
            },
            "type": "array"
          },
          "Groups": {
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "GroupAudits": {
            "items": {
              "$ref": "#/components/schemas/GroupAudit"
            },
            "type": "array"
          },
          "ChassisDiscoveryGroup": {
            "items": {
              "$ref": "#/components/schemas/ChassisDiscoveryGroupModel"
            },
            "type": "array"
          },
          "AllGroupsHierarchy": {
            "items": {
              "$ref": "#/components/schemas/GroupHierarchy"
            },
            "type": "array"
          },
          "MembershipTypes": {
            "items": {
              "$ref": "#/components/schemas/MembershipType"
            },
            "type": "array"
          }
        },
        "title": "GroupService"
      },
      "ComponentComplianceReportModel": {
        "type": "object",
        "properties": {
          "PrerequisiteInfo": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "Criticality": {
            "type": "string"
          },
          "ComplianceStatus": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ]
          },
          "SourceName": {
            "type": "string"
          },
          "CategoryCode": {
            "type": "string"
          },
          "ComplianceDependencies": {
            "items": {
              "$ref": "#/components/schemas/ComplianceDependenciesModel"
            },
            "type": "array"
          },
          "Uri": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ComponentType": {
            "type": "string"
          },
          "CurrentVersion": {
            "type": "string"
          },
          "DcmComponentType": {
            "type": "string"
          },
          "TargetIdentifier": {
            "type": "string"
          },
          "ImpactAssessment": {
            "type": "string"
          },
          "Path": {
            "type": "string"
          },
          "RebootRequired": {
            "type": "boolean"
          },
          "DependencyUpgradeRequired": {
            "type": "boolean"
          },
          "UpdateAction": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/UpdateAction"
              }
            ]
          },
          "UniqueIdentifier": {
            "type": "string"
          }
        }
      },
      "PowerStateModel": {
        "required": [
          "PowerState"
        ],
        "type": "object",
        "properties": {
          "PowerState": {
            "type": "integer",
            "description": "Power state id",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Power state name"
          },
          "Description": {
            "type": "string",
            "description": "Power state description"
          }
        }
      },
      "ExecutionHistoriesResponseModel": {
        "type": "object",
        "properties": {
          "ExecutionHistories": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistoryModel"
            },
            "type": "array"
          }
        }
      },
      "AttributeView": {
        "type": "object",
        "properties": {
          "DeviceAttributeViewDetails": {
            "items": {
              "$ref": "#/components/schemas/DeviceAttributeView"
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AttributeViewDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TemplateAttributeViewDetail"
              }
            ],
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AttributeView"
      },
      "VersionInfo": {
        "type": "object",
        "properties": {
          "PackageSize": {
            "type": "string",
            "description": "Package size"
          },
          "Downloaded": {
            "type": "boolean",
            "description": "Indicates if plugin is downloaded"
          },
          "Version": {
            "type": "string",
            "description": "Version"
          },
          "ReleaseNoteURL": {
            "type": "string",
            "description": "URL release notes"
          },
          "Description": {
            "type": "string",
            "description": "Description"
          },
          "DownloadProgress": {
            "type": "string",
            "description": "Download progress"
          },
          "MinimumOmeVersionRequired": {
            "type": "string",
            "description": "Minimum OME version required"
          }
        }
      },
      "ComponentComplianceReportResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "ComponentComplianceReportModels": {
            "items": {
              "$ref": "#/components/schemas/ComponentComplianceReportModel"
            },
            "type": "array"
          }
        }
      },
      "ServerUntaggedVlanUpdateModel": {
        "type": "object",
        "properties": {
          "ServerProfile": {
            "description": "Server profiles",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ServerUntaggedVlanUpdateTemplateModel"
              }
            ]
          },
          "ServersServiceTag": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of compute service tags to add untagged VLANs"
          }
        }
      },
      "ServerNetworkInterfacePartition": {
        "type": "object",
        "properties": {
          "VirtualFipMacAddress": {
            "type": "string"
          },
          "PartitionId": {
            "type": "integer",
            "format": "int32"
          },
          "PortId": {
            "type": "integer",
            "format": "int32"
          },
          "Fqdd": {
            "type": "string"
          },
          "LocatorName": {
            "type": "string"
          },
          "ClassName": {
            "type": "string"
          },
          "SlotId": {
            "type": "string"
          },
          "NicMode": {
            "type": "string"
          },
          "VirtualIscsiMacAddress": {
            "type": "string"
          },
          "VirtualMacAddress": {
            "type": "string"
          },
          "MaxBandwidth": {
            "type": "integer",
            "format": "int32"
          },
          "PermanentMacAddress": {
            "type": "string"
          },
          "IscsiMode": {
            "type": "string"
          },
          "CurrentMacAddress": {
            "type": "string"
          },
          "FcoeMode": {
            "type": "string"
          },
          "MinBandwidth": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AlertCategoryModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "ID of alert category.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of alert category."
          }
        }
      },
      "AlertRedfishEventModel": {
        "type": "object",
        "properties": {
          "VendorId": {
            "type": "string",
            "description": "Vendor Id."
          },
          "VendorArgs": {
            "type": "string",
            "description": "Vendor arguments."
          },
          "EventDefinition": {
            "description": "Alert Definition.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertDefinitionModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "description": "ID of alert.",
            "format": "int32"
          },
          "MessageDefinition": {
            "description": "Alert Message Definition.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AlertMessageDefinitionModel"
              }
            ]
          }
        }
      },
      "SortField": {
        "type": "object",
        "properties": {
          "FieldId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SortDir": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "SortField"
      },
      "ResourceRequirementsError": {
        "type": "object",
        "properties": {
          "Claimed": {
            "type": "string",
            "nullable": true
          },
          "Message": {
            "type": "string",
            "nullable": true
          },
          "Required": {
            "type": "string",
            "nullable": true
          },
          "Configured": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ResourceRequirementsError"
      },
      "Field": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "TableId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "FieldTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EnumOpts": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnumOpt"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "StrMaxLen": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Field"
      },
      "DiscoveryConfigService": {
        "type": "object",
        "properties": {
          "Jobs": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryJob"
            },
            "type": "array"
          },
          "ProtocolToDeviceType": {
            "items": {
              "$ref": "#/components/schemas/ProtocolToDeviceTypeModel"
            },
            "type": "array"
          },
          "GlobalExcludes": {
            "items": {
              "$ref": "#/components/schemas/GlobalExcludeAddress"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "DiscoveryConfigGroups": {
            "items": {
              "$ref": "#/components/schemas/DiscoveryConfigGroup"
            },
            "type": "array"
          },
          "DiscoverableDeviceTypes": {
            "items": {
              "$ref": "#/components/schemas/DiscoverableDeviceTypeModel"
            },
            "type": "array"
          },
          "Protocols": {
            "items": {
              "$ref": "#/components/schemas/ProtocolModel"
            },
            "type": "array"
          }
        },
        "title": "DiscoveryConfigService"
      },
      "DeviceUnitSizeSupportedRequest": {
        "type": "object",
        "properties": {
          "MemberDevices": {
            "items": {
              "$ref": "#/components/schemas/DeviceUnitSizeSupported"
            },
            "type": "array"
          }
        }
      },
      "TimeZone": {
        "type": "object",
        "properties": {
          "LinuxFormat": {
            "type": "string"
          },
          "WindowsFormat": {
            "type": "string"
          },
          "GmtOffset": {
            "type": "string"
          }
        }
      },
      "ReportResultRowOdataModel": {
        "type": "object",
        "properties": {
          "Response": {
            "items": {
              "type": "object"
            },
            "type": "array"
          }
        }
      },
      "GetProfileTargetSpecificAttributesRequest": {
        "required": [
          "ProfileId"
        ],
        "type": "object",
        "properties": {
          "ProfileId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ComputeIpModel": {
        "type": "object",
        "properties": {}
      },
      "GroupDAOAttributes": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttribute"
            },
            "type": "array",
            "description": "List of group DAO attribute(s)"
          }
        }
      },
      "ThresholdOffenderResponse": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/ThresholdOffender"
            },
            "type": "array",
            "description": "List of threshold offenders information"
          }
        }
      },
      "serverType": {
        "type": "object",
        "properties": {},
        "title": "serverType"
      },
      "ManagementProfileOdataResponseModel": {
        "required": [
          "ManagementProfileId"
        ],
        "type": "object",
        "properties": {
          "ManagementProfileId": {
            "type": "integer",
            "description": "Management profile id",
            "format": "int64"
          },
          "Status": {
            "type": "integer",
            "description": "Indicates the status of the management profile",
            "format": "int64"
          },
          "StatusDateTime": {
            "type": "string",
            "description": "The management profile status time"
          },
          "Version": {
            "type": "string",
            "description": "Management profile version information"
          },
          "ManagementURL": {
            "type": "string",
            "description": "Indicates the management URL for the management profile"
          },
          "ProfileId": {
            "type": "string",
            "description": "Indicates the profile id associated with the management profile"
          },
          "AgentName": {
            "type": "string",
            "description": "Management profile agent name information"
          },
          "HasCreds": {
            "type": "integer",
            "description": "Indicates the the management profile has credentials",
            "format": "int32"
          }
        }
      },
      "SessionUserModel": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "The session user name."
          },
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The session user privileges."
          },
          "Roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "The session user roles."
          }
        }
      },
      "SyslogSettings": {
        "type": "object",
        "properties": {
          "SyslogDirective": {
            "items": {
              "$ref": "#/components/schemas/SyslogDirective"
            },
            "type": "array"
          },
          "State": {
            "type": "boolean",
            "description": "Boolean if syslog settings are enabled."
          }
        }
      },
      "PrivacyModelType": {
        "type": "object",
        "properties": {},
        "title": "PrivacyModelType"
      },
      "BrandInfoModel": {
        "type": "object",
        "properties": {
          "LicenseInfo": {
            "type": "string",
            "description": "License Info"
          },
          "ProductDescription": {
            "type": "string",
            "description": "Product description"
          },
          "BrowserTitle": {
            "type": "string",
            "description": "Title to be shown on the browser"
          },
          "Copyright": {
            "type": "string",
            "description": "copyright"
          },
          "LoginIconPath": {
            "type": "string",
            "description": "login icon path"
          },
          "MastheadIconPath": {
            "type": "string",
            "description": "Icon path"
          },
          "ManagementURI": {
            "type": "string",
            "description": "Management URI"
          },
          "ProductName": {
            "type": "string",
            "description": "Product name"
          },
          "Theme": {
            "type": "string",
            "description": "Theme"
          },
          "BrandName": {
            "type": "string",
            "description": "Brand Name"
          },
          "OpenSourceLicenseInfo": {
            "type": "string",
            "description": "Open Source License description"
          },
          "ProductLogo": {
            "type": "string",
            "description": "Product Logo"
          },
          "SupportURI": {
            "type": "string",
            "description": "Support URI"
          },
          "ConsoleTitle": {
            "type": "string",
            "description": "Console title"
          },
          "ConsoleName": {
            "type": "string",
            "description": "Console name"
          },
          "CompanyLogo": {
            "type": "string",
            "description": "Company Logo"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer"
          }
        }
      },
      "PluginCatalogLocations": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/PluginCatalogLocation"
            },
            "type": "array",
            "description": "List of plugin catalog location"
          }
        }
      },
      "ServerVirtualFlash": {
        "type": "object",
        "properties": {
          "VirtualFlashIndex": {
            "type": "integer",
            "format": "int32"
          },
          "AvailableSize": {
            "type": "integer",
            "format": "int64"
          },
          "Capacity": {
            "type": "integer",
            "format": "int64"
          },
          "InitializedState": {
            "type": "string"
          },
          "ComponentName": {
            "type": "string"
          },
          "EnabledState": {
            "type": "boolean"
          },
          "WriteProtected": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Licensed": {
            "type": "boolean"
          }
        }
      },
      "CertificateDetails": {
        "type": "object",
        "properties": {
          "ValidTo": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "ValidFrom": {
            "type": "string"
          },
          "SubjectCN": {
            "type": "string"
          },
          "IssuerCN": {
            "type": "string"
          }
        }
      },
      "GroupModel": {
        "required": [
          "Id",
          "TypeId",
          "MembershipTypeId",
          "GlobalStatus"
        ],
        "type": "object",
        "properties": {
          "TypeId": {
            "type": "integer",
            "description": "Indicates the group type",
            "format": "int32"
          },
          "GroupAttributes": {
            "items": {
              "$ref": "#/components/schemas/GroupAttributeReduced"
            },
            "type": "array",
            "description": "List the attributes associated to the group"
          },
          "Description": {
            "type": "string",
            "description": "Description of the group"
          },
          "HasAttributes": {
            "type": "boolean",
            "description": "Indicates whether the group has attributes"
          },
          "GlobalStatus": {
            "type": "integer",
            "description": "Health status associated to the group",
            "format": "int64"
          },
          "Editable": {
            "type": "boolean",
            "description": "Indicates whether the group can be edited"
          },
          "UpdatedBy": {
            "type": "string",
            "description": "User who updated the group"
          },
          "CreationTime": {
            "type": "string",
            "description": "The date/time in which the group was created"
          },
          "IsAccessAllowed": {
            "type": "boolean",
            "description": "Indicates whether the group access is allowed for the current user"
          },
          "MembershipTypeId": {
            "type": "integer",
            "description": "Indicates the group membership type",
            "format": "int32"
          },
          "DefinitionId": {
            "type": "integer",
            "description": "The group definition id",
            "format": "int32"
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether the group is visible"
          },
          "DefinitionDescription": {
            "type": "string",
            "description": "Group definition description"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner for the group",
            "format": "int32"
          },
          "GroupAttributeTypeValues": {
            "items": {
              "$ref": "#/components/schemas/GroupAttributeTypeValue"
            },
            "type": "array",
            "description": "List the group attributes values"
          },
          "CreatedBy": {
            "type": "string",
            "description": "User who created the group"
          },
          "ParentId": {
            "type": "integer",
            "description": "Indicates the parent group of the current group",
            "format": "int32"
          },
          "UpdatedTime": {
            "type": "string",
            "description": "The date/time in which the group was updated"
          },
          "GroupTags": {
            "items": {
              "$ref": "#/components/schemas/GroupTagReduced"
            },
            "type": "array",
            "description": "Indicates the group tags associated to the group"
          },
          "Id": {
            "type": "integer",
            "description": "Id of the Group",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group"
          }
        }
      },
      "ApplianceLocales": {
        "type": "object",
        "properties": {
          "ApplianceLocale": {
            "items": {
              "$ref": "#/components/schemas/ApplianceLocale"
            },
            "type": "array"
          }
        }
      },
      "Multicast": {
        "type": "object",
        "properties": {
          "MldVersion": {
            "type": "string",
            "description": "MLD version for MutlicastNetworks. "
          },
          "IgmpVersion": {
            "type": "string",
            "description": "IGMP version for MutlicastNetworks."
          },
          "FloodRestrict": {
            "type": "boolean",
            "description": "Flood restrict version for MutlicastNetworks."
          }
        }
      },
      "JobService": {
        "type": "object",
        "properties": {
          "JobTypes": {
            "items": {
              "$ref": "#/components/schemas/JobType"
            },
            "type": "array"
          },
          "JobStatuses": {
            "items": {
              "$ref": "#/components/schemas/JobStatus"
            },
            "type": "array"
          },
          "Jobs": {
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          }
        },
        "title": "JobService"
      },
      "ForwardersModel": {
        "type": "object",
        "properties": {
          "CategoryIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Category Ids associated to the forwarder."
          },
          "Enabled": {
            "type": "boolean",
            "description": "Enable status of the sforwarder."
          },
          "Id": {
            "type": "integer",
            "description": "Unique identifier of the forwarder.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the forwarder."
          }
        }
      },
      "DnsConfiguration": {
        "type": "object",
        "properties": {
          "IPv6CurrentAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS Server for IPV6."
          },
          "IPv6CurrentPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS Server for IPV6."
          },
          "RegisterWithDNS": {
            "type": "boolean",
            "description": "Register with DNS."
          },
          "UseDHCPForDNSDomainName": {
            "type": "boolean",
            "description": "Use DHCP for DNS Domain name."
          },
          "DnsDomainName": {
            "type": "string",
            "description": "DNS Domain name."
          },
          "IPv4CurrentPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS Server for IPV4."
          },
          "FQDNDomainName": {
            "type": "string",
            "description": "FQDN Domain name."
          },
          "IPv4CurrentAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS Server for IPV4."
          },
          "DnsName": {
            "type": "string",
            "description": "DNS name."
          }
        }
      },
      "SessionCredentialModel": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "The Session user name."
          },
          "Password": {
            "type": "string",
            "description": "The session user password."
          },
          "SessionContext": {
            "type": "string",
            "description": "The session context information."
          },
          "SessionType": {
            "type": "string",
            "description": "The type of session being created."
          }
        }
      },
      "MetricsQueryData": {
        "type": "object",
        "properties": {}
      },
      "ArchivedDocumentModel": {
        "type": "object",
        "properties": {
          "TypCat": {
            "type": "string"
          },
          "ArchDocContent": {
            "type": "string"
          },
          "ArchDocNm": {
            "type": "string"
          }
        }
      },
      "GroupAttributeType": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Group attribute type tag name"
          },
          "IsEditable": {
            "type": "boolean",
            "description": "Indicate if group attribute type is editable"
          },
          "IdAttributeCategory": {
            "type": "integer",
            "description": "Indicates the attribute category for the group attribute type",
            "format": "int32"
          },
          "IsRequired": {
            "type": "boolean",
            "description": "Indicate if group attribute type is required"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicate the owner associated to the group attribute type",
            "format": "int32"
          },
          "IdAttributeUnits": {
            "type": "integer",
            "description": "Indicate the attribute units for the group attribute type",
            "format": "int32"
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Indicate if group attribute type is visible"
          },
          "TagIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group attribute type tag ids"
          },
          "AttributeValidationIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "List of attribute validations for the group attribute type"
          },
          "Id": {
            "type": "integer",
            "description": "Group attribute type id",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Group attribute type tag description"
          }
        }
      },
      "DiscoveryConfigurationGroupJobDetail": {
        "type": "object",
        "properties": {
          "DiscoveryConfigGroupId": {
            "type": "integer",
            "format": "int64"
          },
          "DiscoveryJobStatusModel": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DiscoveryJobStatusModel"
              }
            ]
          },
          "DiscoveryConfigEmailRecipient": {
            "type": "string"
          },
          "DiscoveryConfigDiscoveredDeviceCount": {
            "type": "integer",
            "format": "int64"
          },
          "DiscoveredDevicesByType": {
            "items": {
              "$ref": "#/components/schemas/discoveredDevicesByType"
            },
            "type": "array"
          },
          "DiscoveryConfigGroupName": {
            "type": "string"
          },
          "DiscoveryConfigExpectedDeviceCount": {
            "type": "integer",
            "format": "int32"
          },
          "DiscoveryConfigGroupDescription": {
            "type": "string"
          }
        }
      },
      "Actions": {
        "type": "object",
        "title": "Actions"
      },
      "MetricsQueryDataByRange": {
        "type": "object",
        "properties": {}
      },
      "AssignProfileAutoDeployRequest": {
        "required": [
          "Id",
          "Identifier"
        ],
        "type": "object",
        "properties": {
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ProfileReducedAttributeModel"
            },
            "type": "array"
          },
          "Identifier": {
            "type": "string",
            "description": "(Required) When a device with this identifier (service tag/node ID) is discovered, deploy the profile to that device."
          },
          "NetworkBootToIso": {
            "description": "(Optional) If network boot from ISO settings are wanted for the new profiles, they are specified in this element.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "description": "(Optional) After discovery, the device will be added to this static group.",
            "format": "int32"
          }
        }
      },
      "AutoDeployTargetModel": {
        "type": "object",
        "properties": {
          "ShareIp": {
            "type": "string",
            "description": "Share IP address"
          },
          "IsoPath": {
            "type": "string",
            "description": "Network path to ISO to boot from."
          },
          "TemplateName": {
            "type": "string",
            "description": "Template name"
          },
          "ShareType": {
            "type": "string",
            "description": "Type of network share (CIFS/NFS)."
          },
          "CreatedOn": {
            "type": "string"
          },
          "AutoDeployDeviceId": {
            "type": "integer",
            "description": "AutoDeploy device ID",
            "format": "int32"
          },
          "GroupName": {
            "type": "string",
            "description": "Group name"
          },
          "TemplateTypeId": {
            "type": "integer",
            "description": "Template type ID",
            "format": "int32"
          },
          "IsBootToNetworkIso": {
            "type": "boolean",
            "description": "Indicates whether or not network boot from ISO is wanted."
          },
          "TaskId": {
            "type": "integer",
            "description": "Job ID associated with the AutoDeploy job.",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "description": "ID of the template which is being used for deployment",
            "format": "int32"
          },
          "TaskLastRunStatusId": {
            "type": "integer",
            "description": "Status of the last AutoDeploy job",
            "format": "int32"
          },
          "CreatedBy": {
            "type": "string"
          },
          "Identifier": {
            "type": "string",
            "description": "Target identifier (service tag or node ID)"
          }
        }
      },
      "GroupDAOAttributeType": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "Group DAO attribute type name"
          },
          "IsEditable": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type is editable"
          },
          "IdAttributeCategory": {
            "type": "integer",
            "description": "Group DAO attribute type category",
            "format": "int32"
          },
          "IdTag": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Group DAO attribute type tag id"
          },
          "IdAttributeValidation": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "IsRequired": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type is required"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner associated with the group DAO attribute type",
            "format": "int32"
          },
          "IdAttributeUnits": {
            "type": "integer",
            "description": "Indicates teh attribute units for the group DAO attribute type",
            "format": "int32"
          },
          "IsVisible": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type is visible"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute type id",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Group DAO attribute type description"
          }
        }
      },
      "ChassisPowerSupplyModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "HealthState": {
            "type": "integer",
            "description": "Indicates the health state of the chassis power supply",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Chassis power supply name"
          },
          "SparePartNumber": {
            "type": "string",
            "description": "Chassis power supply spare part number"
          },
          "InputVoltage": {
            "type": "integer",
            "description": "Chassis power supply input voltage",
            "format": "int64"
          },
          "EnableState": {
            "type": "string",
            "description": "Chassis power supply enabled state"
          },
          "PowerStatus": {
            "type": "string",
            "description": "Indicates the power status for the chassis power supply"
          },
          "MemberId": {
            "type": "string",
            "description": "Indicates the member id associated with the chassis power supply"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated with the power supply",
            "format": "int32"
          },
          "InputCurrent": {
            "type": "string",
            "description": "Indicate the input current"
          },
          "StateStr": {
            "type": "string",
            "description": "Chassis power supply state in a readable string"
          },
          "PowerSupplyType": {
            "type": "string",
            "description": "Chassis power supply type"
          },
          "PartNumber": {
            "type": "string",
            "description": "Chassis power supply part number"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis power supply id",
            "format": "int64"
          },
          "CapacityWatts": {
            "type": "integer",
            "description": "Chassis power supply capacity in Watts",
            "format": "int64"
          }
        }
      },
      "SearchGroups": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "CommonName": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Type": {
            "type": "string"
          },
          "DirectoryServerId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CurrentAddressConfiguration": {
        "type": "object",
        "properties": {
          "Ipv4Setting": {
            "items": {
              "$ref": "#/components/schemas/Ipv4Setting"
            },
            "type": "array"
          },
          "DnsSetting": {
            "items": {
              "$ref": "#/components/schemas/DnsSetting"
            },
            "type": "array"
          },
          "Ipv6Setting": {
            "items": {
              "$ref": "#/components/schemas/Ipv6Setting"
            },
            "type": "array"
          }
        }
      },
      "VLANId": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0,
            "type": "integer",
            "maximum": 4094
          }
        },
        "title": "VLANId"
      },
      "Role": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "OemPrivileges": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "IsScopeSupported": {
            "default": false,
            "type": "boolean"
          },
          "AssignedPrivileges": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "Id": {
            "type": "string"
          },
          "IsPredefined": {
            "default": false,
            "type": "boolean"
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Role"
      },
      "PowerHoardersValueSet": {
        "type": "object",
        "properties": {
          "PowerConsumption": {
            "type": "string",
            "description": "The total power consumption."
          },
          "EntityId": {
            "type": "integer",
            "description": "The entity id which can be a device or group id.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "The entity name, either the device name or group name."
          },
          "Description": {
            "type": "string",
            "description": "Description associated to the entity. It can be device GUID or group description."
          }
        }
      },
      "ProcessorSummary": {
        "type": "object",
        "properties": {
          "Status": {
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "type": "array"
          },
          "Model": {
            "type": "string",
            "description": "Model of processor."
          }
        }
      },
      "GroupDAOTags": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOTag"
            },
            "type": "array",
            "description": "List of group DAO tag(s)"
          }
        }
      },
      "ManagedDevicesStatusSummaryModel": {
        "type": "object",
        "properties": {
          "WarningCount": {
            "type": "integer",
            "description": "Warning Health Status count of the managed devices.",
            "format": "int32"
          },
          "UnknownCount": {
            "type": "integer",
            "description": " Unknown Health Status count of the managed devices.",
            "format": "int32"
          },
          "NormalCount": {
            "type": "integer",
            "description": "Normal Health Status count of the managed devices.",
            "format": "int32"
          },
          "CriticalCount": {
            "type": "integer",
            "description": " Critical Health Status count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "ApplicableUplinkNetworksResponseModel": {
        "type": "object",
        "properties": {
          "ApplicableUplinkNetworks": {
            "items": {
              "$ref": "#/components/schemas/NetworkModel"
            },
            "type": "array"
          }
        }
      },
      "Vlan": {
        "type": "object",
        "properties": {
          "Untagged": {
            "type": "integer",
            "format": "int32"
          },
          "Tagged": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "ComponentId": {
            "type": "integer",
            "format": "int64"
          },
          "IsNicBonded": {
            "type": "boolean"
          }
        }
      },
      "ReportResultRowReducedModel": {
        "type": "object",
        "properties": {
          "Values": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "Row values in the report"
          }
        }
      },
      "FabricDesignModel": {
        "type": "object",
        "properties": {
          "NetworkLink": {
            "items": {
              "$ref": "#/components/schemas/NetworkLinkModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "The Fabric design name"
          },
          "FabricDesignNode": {
            "items": {
              "$ref": "#/components/schemas/FabricDesignNodeModel"
            },
            "type": "array"
          }
        }
      },
      "TargetInventoryActionRequestPayloadModel": {
        "type": "object",
        "properties": {
          "DeviceId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "TargetInventoryActionRequestPayloadModel"
      },
      "DownloadInfo": {
        "type": "object",
        "properties": {
          "SizeInBytes": {
            "type": "integer",
            "description": "Plugin size in bytes",
            "format": "int64"
          },
          "PluginId": {
            "type": "string",
            "description": "Plugin id"
          },
          "Version": {
            "type": "string",
            "description": "Plugin version"
          },
          "DownloadSizeInBytes": {
            "type": "integer",
            "description": "Plugin downloaded size in bytes",
            "format": "int64"
          },
          "Progress": {
            "type": "string",
            "description": "Plugin download progress"
          },
          "DownloadComplete": {
            "type": "boolean",
            "description": "Indicates if plugin download is complete"
          }
        }
      },
      "SingleUpdateResponseModel": {
        "type": "object",
        "properties": {
          "RequiresReboot": {
            "type": "boolean"
          },
          "PackageType": {
            "type": "string"
          },
          "DellVersion": {
            "type": "string"
          },
          "ReleaseDate": {
            "type": "string"
          },
          "ReleaseId": {
            "type": "string"
          },
          "ComponentType": {
            "type": "string"
          },
          "VendorVersion": {
            "type": "string"
          },
          "PackageId": {
            "type": "string"
          },
          "Date": {
            "type": "string"
          },
          "SchemaVersion": {
            "type": "string"
          },
          "XmlGenVersion": {
            "type": "string"
          }
        }
      },
      "AlertCategoriesExtendedModel": {
        "type": "object",
        "properties": {
          "IsBuiltIn": {
            "type": "boolean",
            "description": "Boolean value if category is built-in."
          },
          "Name": {
            "type": "string",
            "description": "Name of the catalog for the category."
          },
          "CategoriesDetails": {
            "items": {
              "$ref": "#/components/schemas/AlertCategoryExtendedModel"
            },
            "type": "array",
            "description": "List of alert categories."
          }
        }
      },
      "SSHSecurityMessageModel": {
        "type": "object",
        "properties": {
          "SshSecurityMessage": {
            "type": "string",
            "description": "Security message displayed on the SSH login screen"
          }
        }
      },
      "GetTrapsPayload": {
        "type": "object",
        "properties": {
          "GenericTrapId": {
            "type": "integer",
            "description": "Generic trap number",
            "format": "int32"
          },
          "SnmpEventId": {
            "type": "integer",
            "description": "Unique identifier for trap in the application",
            "format": "int64"
          },
          "SpecificTrapId": {
            "type": "integer",
            "description": "Specific trap number",
            "format": "int32"
          },
          "EnterpriseOid": {
            "type": "string",
            "description": "Unique object identifier for the trap"
          },
          "EventDefinition": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/MIBEventDefinition"
              }
            ]
          },
          "FormatString": {
            "type": "string",
            "description": "Trap message"
          }
        }
      },
      "JobModel": {
        "required": [
          "JobName",
          "Schedule",
          "State",
          "JobType",
          "Targets"
        ],
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string",
            "description": "The last time when the job was executed."
          },
          "StartTime": {
            "type": "string",
            "description": "Start time of the job"
          },
          "Schedule": {
            "type": "string",
            "description": "Job Schedule (cron string)"
          },
          "LastRunStatus": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/JobStatusModel"
            },
            "type": "array",
            "description": "Indicates the status of the last instance of the job execution.",
            "maxItems": 1
          },
          "IdUserOwner": {
            "type": "integer",
            "description": "Indicates the owner of the job.",
            "format": "int32"
          },
          "Builtin": {
            "type": "boolean",
            "description": "Indicates if the job is internal."
          },
          "Editable": {
            "type": "boolean",
            "description": "Indicates whether the job can be edited."
          },
          "NextRun": {
            "type": "string",
            "description": "The next time when the job will be executed."
          },
          "JobStatus": {
            "minItems": 0,
            "items": {
              "$ref": "#/components/schemas/JobStatusModel"
            },
            "type": "array",
            "description": "Job completion status where 2020 is Scheduled, 2030 is Queued, 2040 is Starting, 2050 is Running, 2060 is Completed, 2070 is Failed, 2080 is New, 2090 is Warning, 2100 is Aborted, 2101 is Paused, 2102 is Stopped,2103 is Canceled",
            "maxItems": 1
          },
          "JobName": {
            "type": "string",
            "description": "Name of the job"
          },
          "Visible": {
            "type": "boolean",
            "description": "Indicates whether the job is visible."
          },
          "State": {
            "type": "string",
            "description": "Indicates whether the job is enabled or disabled"
          },
          "JobDescription": {
            "type": "string",
            "description": "Description of the job"
          },
          "Params": {
            "items": {
              "$ref": "#/components/schemas/JobParamsModel"
            },
            "type": "array",
            "description": "Parameters for the job."
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/JobTargetModel"
            },
            "type": "array",
            "description": "Job targets."
          },
          "CreatedBy": {
            "type": "string",
            "description": "User who created the job."
          },
          "UpdatedBy": {
            "type": "string",
            "description": "User who updated the job."
          },
          "EndTime": {
            "type": "string",
            "description": "End time of the job"
          },
          "Id": {
            "type": "integer",
            "description": "Id of the job",
            "format": "int32"
          },
          "JobType": {
            "description": "Type of the job",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobTypeModel"
              }
            ]
          },
          "UserGenerated": {
            "type": "boolean",
            "description": "Indicates if the job is user generated"
          }
        }
      },
      "LicensingType": {
        "type": "object",
        "properties": {
          "LicenseId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "LicensingType"
      },
      "EnumerationDefinitionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "description": "Unique identifier",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Enumerations name"
          }
        }
      },
      "GroupType": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "GroupType"
      },
      "MACAddress": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})",
            "type": "string"
          }
        },
        "title": "MACAddress"
      },
      "GetTargetSpecificAttributesRequest": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "BaseEntityId": {
            "type": "integer",
            "description": "This is the device or slot used to get the target inventory template.",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TemplateService": {
        "type": "object",
        "properties": {
          "Templates": {
            "items": {
              "$ref": "#/components/schemas/Template"
            },
            "type": "array"
          },
          "ProfileUsage": {
            "items": {
              "$ref": "#/components/schemas/ProfileUsage"
            },
            "type": "array"
          },
          "AttributeRegistryDetail": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TemplateEditInfo"
              }
            ],
            "nullable": true
          },
          "TemplateViewTypes": {
            "items": {
              "$ref": "#/components/schemas/TemplateViewTypeModel"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "ProfileState": {
            "items": {
              "$ref": "#/components/schemas/ProfileState"
            },
            "type": "array"
          },
          "Profiles": {
            "items": {
              "$ref": "#/components/schemas/Profile"
            },
            "type": "array"
          },
          "TemplateTypes": {
            "items": {
              "$ref": "#/components/schemas/TemplateTypeModel"
            },
            "type": "array"
          },
          "Baselines": {
            "items": {
              "$ref": "#/components/schemas/Baseline"
            },
            "type": "array"
          }
        },
        "title": "TemplateService"
      },
      "GroupDevicesStatusSummaryModel": {
        "type": "object",
        "properties": {
          "StatusType": {
            "type": "integer",
            "description": "Indicates the status type for teh group",
            "format": "int32"
          }
        }
      },
      "ServerSupportedPowerStateModel": {
        "type": "object",
        "properties": {
          "PowerState": {
            "type": "integer",
            "description": "Power state.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server supported power state.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          }
        }
      },
      "DataSyncConfigurations": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "nullable": true
          },
          "AlertSeverityTypes": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "DeviceTypes": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "Schedule": {
            "type": "string",
            "nullable": true
          },
          "IsEnabled": {
            "type": "string",
            "nullable": true
          },
          "FullSyncIterationNumber": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "GroupIds": {
            "items": {
              "format": "int64",
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "DataSyncConfigurations"
      },
      "ApplianceConfigurationTypes": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/ApplianceConfigurationType"
            },
            "type": "array",
            "description": "Appliance configuration types definition"
          }
        }
      },
      "TargetType": {
        "type": "object",
        "properties": {
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "TargetType"
      },
      "MetricsComponentIdResult": {
        "type": "object",
        "properties": {}
      },
      "ConfigurationSectionModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ReplicableChassisSettingsResponseModel": {
        "type": "object",
        "properties": {
          "ReplicateChassisTime": {
            "type": "boolean",
            "description": "Replication Chassis time Flag."
          },
          "ReplicateChassisAlertDestination": {
            "type": "boolean",
            "description": "Replication Chassis alert Flag."
          }
        }
      },
      "SyncProfilesRequest": {
        "type": "object",
        "properties": {
          "SelectAll": {
            "type": "boolean"
          },
          "ShutdownType": {
            "type": "integer",
            "format": "int32"
          },
          "Filters": {
            "type": "string"
          },
          "Schedule": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "ProfileIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "DeltaDeploy": {
            "type": "boolean",
            "description": "True indicates deploy only attributes that have changed since the last deployment. False indicates deploy all profile attributes."
          }
        }
      },
      "ServerProcessorModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Status of server processor.",
            "format": "int64"
          },
          "MaxSpeed": {
            "type": "integer",
            "description": "Max speed of server processor.",
            "format": "int32"
          },
          "SlotNumber": {
            "type": "string",
            "description": "Slot number of server processor."
          },
          "Family": {
            "type": "string",
            "description": "Family of server processor."
          },
          "SteppingName": {
            "type": "string",
            "description": "Stepping name of server processor."
          },
          "InstanceId": {
            "type": "string",
            "description": "Instance Id of server processor."
          },
          "ModelName": {
            "type": "string",
            "description": "Model name of server processor."
          },
          "NumberOfCores": {
            "type": "integer",
            "description": "Number of cores of server processor.",
            "format": "int32"
          },
          "BrandName": {
            "type": "string",
            "description": "Brand name of server processor."
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "NumberOfEnabledCores": {
            "type": "integer",
            "description": "Number of enabled cores of server processor.",
            "format": "int32"
          },
          "CurrentSpeed": {
            "type": "integer",
            "description": "Current speed of server processor.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server processor.",
            "format": "int32"
          },
          "Voltage": {
            "type": "string",
            "description": "Voltage of server processor."
          }
        }
      },
      "PowerHoardersResponse": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/PowerHoardersValueSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "PowerHoardersResponse"
      },
      "DataSyncCategoryTypeRespModel": {
        "type": "object",
        "title": "DataSyncCategoryTypeRespModel"
      },
      "ManagedStateModel": {
        "required": [
          "ManagedState"
        ],
        "type": "object",
        "properties": {
          "ManagedState": {
            "type": "integer",
            "description": "Managed state id",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Managed state name"
          },
          "Description": {
            "type": "string",
            "description": "Managed state description"
          }
        }
      },
      "AssignIdentitiesRequest": {
        "required": [
          "TemplateId"
        ],
        "type": "object",
        "properties": {
          "BaseEntityIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Devices or slots used to get the target inventory template."
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "IdentityPoolService": {
        "type": "object",
        "properties": {
          "IdentityStates": {
            "items": {
              "$ref": "#/components/schemas/IdentityState"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "IdentityPools": {
            "items": {
              "$ref": "#/components/schemas/IdentityPool"
            },
            "type": "array"
          }
        },
        "title": "IdentityPoolService"
      },
      "ReportResultColModel": {
        "type": "object",
        "properties": {
          "Width": {
            "type": "integer",
            "description": "Column width",
            "format": "int32"
          },
          "Report_result_id": {
            "type": "integer",
            "description": "Report result ID",
            "format": "int32"
          },
          "Sequence": {
            "type": "integer",
            "description": "Column sequence in the report",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report result column ID",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Column name"
          }
        }
      },
      "LogModel": {
        "type": "object",
        "properties": {
          "LogId": {
            "type": "string",
            "description": "Log id"
          },
          "LogTimestamp": {
            "type": "string",
            "description": "Log timestamp"
          },
          "LogSeverity": {
            "type": "integer",
            "description": "Log severity",
            "format": "int32"
          },
          "LogCategory": {
            "type": "string",
            "description": "Log associated category"
          },
          "DateFormat": {
            "type": "string",
            "description": "Log date format"
          },
          "LogMessageId": {
            "type": "string",
            "description": "Log associated message id"
          },
          "LogMessage": {
            "type": "string",
            "description": "Log message"
          },
          "LogSequenceNumber": {
            "type": "integer",
            "description": "Log sequence number",
            "format": "int64"
          },
          "RecommendedAction": {
            "type": "string",
            "description": "Log recommended action"
          },
          "LogComment": {
            "type": "string",
            "description": "Log additional comments"
          }
        }
      },
      "DeviceTypeResponseModel": {
        "type": "object",
        "properties": {
          "DeviceType": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device types"
          }
        }
      },
      "VersionDetail": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "DownloadProgress": {
            "type": "string",
            "nullable": true
          },
          "LicenseAgreements": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/LicenseAgreement"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "PackageSize": {
            "type": "string",
            "nullable": true
          },
          "Downloaded": {
            "type": "boolean"
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "ReleaseNoteURL": {
            "type": "string",
            "nullable": true
          },
          "MinimumOmeVersionRequired": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "VersionDetail"
      },
      "LDAPAccountProvider": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "BindDN": {
            "type": "string"
          },
          "DnsServer": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "BindPassword": {
            "type": "string"
          },
          "AttributeGroupMembership": {
            "type": "string"
          },
          "BaseDistinguishedName": {
            "type": "string"
          },
          "ServerName": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "ServerType": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/serverType"
              }
            ]
          },
          "SearchFilter": {
            "type": "string"
          },
          "CertificateValidation": {
            "type": "boolean"
          },
          "AttributeUserLogin": {
            "type": "string"
          },
          "NetworkTimeOut": {
            "type": "integer",
            "format": "int64"
          },
          "Password": {
            "type": "string"
          },
          "CertificateFile": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "SearchTimeOut": {
            "type": "integer",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "Target": {
        "type": "object",
        "properties": {
          "Type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TargetType"
              }
            ],
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "Target"
      },
      "JobStatus": {
        "type": "object",
        "properties": {
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "JobStatus"
      },
      "ChassisDeviceModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InfrastructureDeviceModel"
          },
          {
            "type": "object",
            "properties": {
              "Servicetag": {
                "type": "string",
                "description": "The device service tag"
              },
              "ChassisPorts": {
                "items": {
                  "$ref": "#/components/schemas/ChassisPortsModel"
                },
                "type": "array",
                "description": "Indicates the chassis device port(s) model(s)"
              },
              "HardwareVersion": {
                "type": "string",
                "description": "The device hardware version"
              },
              "PowerCap": {
                "type": "string",
                "description": "Indicates the device power cap"
              },
              "PowerRedundancy": {
                "type": "string",
                "description": "Indicates the device power redundancy"
              },
              "NewElement5": {
                "type": "string"
              },
              "NewElement4": {
                "type": "string"
              },
              "ChassisTemperatureSensors": {
                "items": {
                  "$ref": "#/components/schemas/ChassisTemperatureSensorModel"
                },
                "type": "array",
                "description": "Indicates the chassis device provided temperature sensors"
              },
              "ChassisIOModules": {
                "items": {
                  "$ref": "#/components/schemas/ChassisIOModuleModel"
                },
                "type": "array",
                "description": "Indicates the chassis device IO Module(s) Model(s)"
              },
              "ChassisPciDevices": {
                "items": {
                  "$ref": "#/components/schemas/ChassisPciDeviceModel"
                },
                "type": "array",
                "description": "Indicates the chassis device PCI model"
              },
              "ChassisControllers": {
                "items": {
                  "$ref": "#/components/schemas/ChassisControllerModel"
                },
                "type": "array",
                "description": "Indicates the chassis device controller model"
              },
              "FaceplatePower": {
                "type": "integer",
                "description": "Indicates the device faceplate power",
                "format": "int32"
              },
              "ChassisSlots": {
                "items": {
                  "$ref": "#/components/schemas/ChassisSlotsModel"
                },
                "type": "array",
                "description": "Indicates the chassis device slot model"
              },
              "Expressservicecode": {
                "type": "string",
                "description": "The device express service code"
              },
              "ChassisFans": {
                "items": {
                  "$ref": "#/components/schemas/ChassisFanModel"
                },
                "type": "array",
                "description": "Indicates the chassis device fan(S) model(s)"
              },
              "Dnsname": {
                "type": "string",
                "description": "The device dns address"
              },
              "ChassisDeviceAssosiation": {
                "items": {
                  "$ref": "#/components/schemas/ChassisDeviceAssociationModel"
                },
                "type": "array",
                "description": "Indicates the chassis device association(s)"
              },
              "Location": {
                "type": "string",
                "description": "The device location"
              },
              "ChassisType": {
                "type": "string",
                "description": "Indicate the type of chassis"
              },
              "ChassisPowerSupply": {
                "items": {
                  "$ref": "#/components/schemas/ChassisPowerSupplyModel"
                },
                "type": "array",
                "description": "Indicates the chassis device power supply model details"
              },
              "Name": {
                "type": "string",
                "description": "The device name"
              }
            }
          }
        ]
      },
      "ServerMemoryDeviceModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "description": "Status of server memory device.",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "description": "Name of server memory device."
          },
          "BankName": {
            "type": "string",
            "description": "Bank name of server memory device."
          },
          "FailureMode": {
            "type": "integer",
            "description": "Failure mode of server memory device.",
            "format": "int32"
          },
          "SerialNumber": {
            "type": "string",
            "description": "Serial number of server memory device."
          },
          "DeviceDescription": {
            "type": "string",
            "description": "Description of server memory device."
          },
          "Rank": {
            "type": "string",
            "description": "Rank of server memory device."
          },
          "TypeDetails": {
            "type": "string",
            "description": "Type details of server memory device."
          },
          "MemoryDeviceFormFactor": {
            "type": "string",
            "description": "Memory device form factor."
          },
          "InstanceId": {
            "type": "string",
            "description": "Instance ID of server memory device."
          },
          "CurrentOperatingSpeed": {
            "type": "integer",
            "description": "Current operating speed of server memory device.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "ManufacturerDate": {
            "type": "string",
            "description": "Date of manufacturer."
          },
          "PartNumber": {
            "type": "string",
            "description": "Part number of server memory device."
          },
          "Size": {
            "type": "integer",
            "description": "Size of server memory device.",
            "format": "int64"
          },
          "Speed": {
            "type": "integer",
            "description": "Speed of server memory device.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of server memory device.",
            "format": "int32"
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer of server memory device."
          }
        }
      },
      "DeviceConnectionStatesResponseModel": {
        "type": "object",
        "properties": {
          "DeviceConnectionStates": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of available device connection state(s)."
          }
        }
      },
      "MetricsComponentIdQuery": {
        "type": "object",
        "properties": {
          "PluginId": {
            "type": "string",
            "description": "The plugin id associated with the request (GUID)."
          },
          "Value": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of component names"
          }
        }
      },
      "MetricsResult": {
        "type": "object",
        "properties": {
          "EntityId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Value": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/MetricsValueSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "MetricsResult"
      },
      "EnergyConsumptionResult": {
        "type": "object",
        "properties": {
          "TotalEnergy": {
            "type": "string",
            "nullable": true
          },
          "ComponentId": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "EnergyConsumptionResult"
      },
      "GroupDAOAttributeValidationObjects": {
        "type": "object",
        "properties": {
          "Members": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidationObject"
            },
            "type": "array",
            "description": "List of group DAO attribute validation object(s)"
          }
        }
      },
      "ExecutionHistoryDetailsResponseModel": {
        "type": "object",
        "properties": {
          "ExecutionHistoryDetails": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistoryDetailModel"
            },
            "type": "array",
            "description": "The list of execution history details"
          }
        }
      },
      "SingleUpdateReportResponse": {
        "type": "object",
        "properties": {
          "DeviceReport": {
            "items": {
              "$ref": "#/components/schemas/SingleUpdateReportContentsResponse"
            },
            "type": "array"
          },
          "DeviceId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "SingleUpdateReportResponse"
      },
      "AlertMessageDefinitionResponseModel": {
        "type": "object",
        "properties": {
          "MessageDefinitions": {
            "items": {
              "$ref": "#/components/schemas/AlertMessageDefinitionModel"
            },
            "type": "array",
            "description": "List of alert message definitions."
          }
        }
      },
      "PowerState": {
        "type": "object",
        "properties": {
          "PowerState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "PowerState"
      },
      "ApplianceTimeZone": {
        "type": "object",
        "properties": {
          "WindowsFormat": {
            "type": "string"
          },
          "LinuxFormat": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Utcoffsetminutes": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "AlertSubCategory": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AlertSubCategory"
      },
      "DeviceLicenseModel": {
        "type": "object",
        "properties": {
          "StartDate": {
            "type": "string",
            "description": "Indicates the start date of the device license"
          },
          "LicenseType": {
            "description": "Indicates the type of device license",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/LicensingTypeModel"
              }
            ]
          },
          "EntitlementId": {
            "type": "string",
            "description": "Device license entitlement id"
          },
          "LicenseTypeDetails": {
            "type": "string",
            "description": "Device license type details"
          },
          "InfrastructureDevice": {
            "type": "integer",
            "description": "Indicates the associated device to the device license",
            "format": "int64"
          },
          "EvalTimeRemaining": {
            "type": "integer",
            "description": "Indicates the evaluation remaining time of the device license",
            "format": "int32"
          },
          "AssignedDevices": {
            "type": "string",
            "description": "Indicates the assigned devices to the device license"
          },
          "SoldDate": {
            "type": "string",
            "description": "Indicates the sold date of the device license"
          },
          "Expiration": {
            "type": "string",
            "description": "Indicates the expiration of the device license"
          },
          "LicenseStatus": {
            "type": "integer",
            "description": "Indicates the status of the device license",
            "format": "int32"
          },
          "LicenseDescription": {
            "type": "string",
            "description": "Device license description"
          },
          "LicenseBound": {
            "type": "integer",
            "description": "Device license bound type",
            "format": "int64"
          }
        }
      },
      "TemplateRebootResponse": {
        "type": "object",
        "properties": {
          "IsRebootRequired": {
            "type": "boolean"
          }
        }
      },
      "TemplateAttributeViewEditDetail": {
        "type": "object",
        "properties": {
          "AttributeGroupNames": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroupName"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "AttributeGroups": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeGroup"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "TemplateAttributeViewEditDetail"
      },
      "DeviceSummaryModel": {
        "type": "object",
        "properties": {
          "TotalCount": {
            "type": "integer",
            "description": "Indicates the total count of device summaries",
            "format": "int32"
          },
          "DeviceType": {
            "type": "integer",
            "description": "Indicates the device type of the summary",
            "format": "int32"
          },
          "DeviceStatusSummary": {
            "items": {
              "$ref": "#/components/schemas/DeviceStatusSummaryModel"
            },
            "type": "array",
            "description": "Indicates the device summaries statuses"
          }
        }
      },
      "GroupOperationDetails": {
        "type": "object",
        "properties": {
          "ParentGroupIdModified": {
            "type": "boolean"
          },
          "GroupAttributeModified": {
            "type": "boolean"
          },
          "QueryGroup": {
            "type": "boolean"
          },
          "GroupUpdated": {
            "type": "boolean"
          },
          "UpdatedParentGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceMembershipModified": {
            "type": "boolean"
          },
          "GroupClonedFromGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupMembershipUpdateDetails": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/GroupMembershipUpdateDetails"
              }
            ]
          },
          "GroupDeleted": {
            "type": "boolean"
          },
          "GroupCreated": {
            "type": "boolean"
          },
          "OriginalParentGroupId": {
            "type": "integer",
            "format": "int32"
          },
          "GroupId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ServerVirtualFlashModel": {
        "type": "object",
        "properties": {
          "VirtualFlashIndex": {
            "type": "integer",
            "description": "Virtual Flash Index.",
            "format": "int32"
          },
          "AvailableSize": {
            "type": "integer",
            "description": "Available size of virtual flash.",
            "format": "int64"
          },
          "Capacity": {
            "type": "integer",
            "description": "Capacity of virtual flash.",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "InitializedState": {
            "type": "string",
            "description": "Initialized state of virtual flash."
          },
          "ComponentName": {
            "type": "string",
            "description": "Component name."
          },
          "EnabledState": {
            "type": "boolean",
            "description": "Indicates state of virtual flash."
          },
          "WriteProtected": {
            "type": "boolean",
            "description": "Indicated if virtual flash is write protected."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server virtual flash.",
            "format": "int32"
          },
          "Licensed": {
            "type": "boolean",
            "description": "Indicates if virtual flash is licensed."
          }
        }
      },
      "ChassisSlotsModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "PowerState": {
            "type": "integer",
            "description": "Indicates the power state of the occupied slot",
            "format": "int64"
          },
          "SlotName": {
            "type": "string",
            "description": "Chassis slot name"
          },
          "SlotDeviceId": {
            "type": "integer",
            "description": "The id of the device seated in the slot",
            "format": "int32"
          },
          "Type": {
            "type": "integer",
            "description": "Indicates the device type seated in the slot",
            "format": "int64"
          },
          "IsPrimarySlot": {
            "type": "string",
            "description": "Indicates if the slot is primary"
          },
          "SubSlotName": {
            "type": "string",
            "description": "Chassis sub slot name"
          },
          "VlanId": {
            "type": "integer",
            "description": "The vlan associated to the chassis slot",
            "format": "int32"
          },
          "TypeOfSled": {
            "type": "integer",
            "description": "Indicate the type of sled seated in the chassis slot",
            "format": "int32"
          },
          "DnsName": {
            "type": "string",
            "description": "The dns name associated to the device seated in the slot"
          },
          "HealthStatus": {
            "type": "integer",
            "description": "Indicates the health status of the occupied slot",
            "format": "int64"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis slot",
            "format": "int32"
          },
          "SledBlockPowerOn": {
            "type": "string",
            "description": "Indicates if the sled seated in the chassis slot has block the power on"
          },
          "Model": {
            "type": "string",
            "description": "Indicates the model of the device seated in teh slot"
          },
          "SlotIdentifier": {
            "type": "string",
            "description": "Indicates the identifier associated to the slot"
          },
          "Occupied": {
            "type": "string",
            "description": "Indicates the the chassis slot is occupied"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis slot id",
            "format": "int64"
          },
          "SlotNumber": {
            "type": "string",
            "description": "Chassis slot number"
          }
        }
      },
      "UplinkRequestModel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UplinkModel"
          },
          {
            "type": "object",
            "properties": {
              "Ports": {
                "items": {
                  "$ref": "#/components/schemas/PortModel"
                },
                "type": "array"
              },
              "Networks": {
                "items": {
                  "$ref": "#/components/schemas/NetworkModel"
                },
                "type": "array"
              }
            }
          }
        ]
      },
      "ExecutionHistoryRecentActivityDetailsModel": {
        "type": "object",
        "properties": {
          "JobStatus": {
            "description": "Job execution history detail completion status",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/JobStatusModel"
              }
            ]
          },
          "JobDescription": {
            "type": "string"
          },
          "Key": {
            "type": "string",
            "description": "Job execution history details key"
          },
          "StartTime": {
            "type": "string",
            "description": "The start time of job execution"
          },
          "Progress": {
            "type": "string",
            "description": "Percentage of completion"
          },
          "ExecutionHistoryId": {
            "type": "integer",
            "description": "Execution history ID associated with the detail",
            "format": "int32"
          },
          "EndTime": {
            "type": "string",
            "description": "The end time of job execution"
          },
          "Id": {
            "type": "integer",
            "description": "Job execution history detail ID",
            "format": "int32"
          },
          "Value": {
            "type": "string",
            "description": "Job execution history details value"
          },
          "JobName": {
            "type": "string",
            "description": "Name of the job"
          }
        }
      },
      "NetworkAddressErrorCode": {
        "type": "object",
        "properties": {},
        "title": "NetworkAddressErrorCode"
      },
      "WarrantiesGroupModel": {
        "type": "object",
        "properties": {
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "Warranties": {
            "items": {
              "$ref": "#/components/schemas/WarrantyModel"
            },
            "type": "array"
          }
        }
      },
      "Ipv4Configuration": {
        "type": "object",
        "properties": {
          "EnableDHCP": {
            "type": "boolean",
            "description": "Enable DHCP."
          },
          "Enable": {
            "type": "boolean",
            "description": "Enable IPV4 configuration."
          },
          "StaticAlternateDNSServer": {
            "type": "string",
            "description": "Alternate DNS server."
          },
          "StaticGateway": {
            "type": "string",
            "description": "Static gateway."
          },
          "UseDHCPForDNSServerNames": {
            "type": "boolean",
            "description": "Use DHCP for DNS server name."
          },
          "StaticIPAddress": {
            "type": "string",
            "description": "Static IP address."
          },
          "StaticSubnetMask": {
            "type": "string",
            "description": "Static subnet mask."
          },
          "StaticPreferredDNSServer": {
            "type": "string",
            "description": "Preferred DNS server."
          }
        }
      },
      "ProtocolToDeviceTypeModelOdata": {
        "type": "object",
        "properties": {
          "DeviceTypeId": {
            "type": "integer",
            "description": "ID of the device type.",
            "format": "int64"
          },
          "DeviceTypeName": {
            "type": "string",
            "description": "Name of the device type."
          },
          "ProtocolName": {
            "type": "string",
            "description": "Name of the protocol."
          },
          "ProtocolId": {
            "type": "integer",
            "description": "ID of the protocol.",
            "format": "int32"
          },
          "IsSelectedByDefault": {
            "type": "boolean",
            "description": "Is the protocol selected by default for discovery of given device. Highest priority protocol is selected by default."
          },
          "PriorityOrder": {
            "type": "integer",
            "description": "Priority of protocol for that device's discovery among other supported protocols for that device.",
            "format": "int32"
          }
        }
      },
      "CertInfo": {
        "type": "object",
        "properties": {
          "IssuedTo": {
            "$ref": "#/components/schemas/CertDetail"
          },
          "ValidTo": {
            "type": "string"
          },
          "ValidFrom": {
            "type": "string"
          },
          "IssuedBy": {
            "$ref": "#/components/schemas/CertDetail"
          }
        },
        "title": "CertInfo"
      },
      "UserScope": {
        "type": "object",
        "properties": {
          "UserId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Groups": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "UserScope"
      },
      "DeviceDocumentModel": {
        "type": "object",
        "properties": {
          "CustomTags": {
            "type": "string"
          },
          "TypCat": {
            "type": "string"
          },
          "DevMdl": {
            "type": "string"
          },
          "DevAssetTag": {
            "type": "string"
          },
          "InventoryDetails": {
            "items": {
              "$ref": "#/components/schemas/InventoryDetailsModel"
            },
            "type": "array"
          },
          "DevMgmt": {
            "items": {
              "$ref": "#/components/schemas/DeviceManagementModel"
            },
            "type": "array"
          },
          "DevId": {
            "type": "string"
          },
          "DeviceSoftware": {
            "items": {
              "$ref": "#/components/schemas/DeviceSoftwareModel"
            },
            "type": "array"
          },
          "DevPwrStat": {
            "type": "string"
          },
          "DevGlbStat": {
            "type": "string"
          },
          "DevIdent": {
            "type": "string"
          },
          "DevTyp": {
            "type": "string"
          },
          "DevAssocChassisSvcTag": {
            "type": "string"
          },
          "DeviceLicense": {
            "items": {
              "$ref": "#/components/schemas/DeviceLicenseModel"
            },
            "type": "array"
          },
          "DevMgmtId": {
            "type": "string"
          },
          "DeviceLocation": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeviceLocationModel"
              }
            ]
          }
        }
      },
      "JobTargetModel": {
        "required": [
          "Id",
          "TargetType"
        ],
        "type": "object",
        "properties": {
          "TargetType": {
            "description": "Target information",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/TargetTypeModel"
              }
            ]
          },
          "Data": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "description": "Job target Id",
            "format": "int32"
          },
          "JobId": {
            "type": "integer",
            "description": "Id of the job",
            "format": "int32"
          }
        }
      },
      "DeviceType": {
        "type": "object",
        "properties": {
          "DeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceType"
      },
      "NetworkLinkModel": {
        "type": "object",
        "properties": {
          "DestinationInterface": {
            "type": "string",
            "description": "Destination interface for smart fabric"
          },
          "DestinationNode": {
            "type": "string",
            "description": "Destination node for smart fabric"
          },
          "SourceNode": {
            "type": "string",
            "description": "Source node for smart fabric"
          },
          "SourceInterface": {
            "type": "string",
            "description": "Source interface for smart fabirc"
          }
        }
      },
      "ChassisPowerSupply": {
        "type": "object",
        "properties": {
          "HealthState": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "EnableState": {
            "type": "string"
          },
          "PowerStatus": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "InputCurrent": {
            "type": "string"
          },
          "StateStr": {
            "type": "string"
          },
          "PowerSupplyType": {
            "type": "string"
          },
          "InputVoltage": {
            "type": "integer",
            "format": "int64"
          },
          "MemberId": {
            "type": "string"
          },
          "PartNumber": {
            "type": "string"
          },
          "CapacityWatts": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DownloadBundleResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "boolean",
            "description": "Status of Job excecution. True, if job executes successfully."
          },
          "TaskId": {
            "type": "integer",
            "description": "Job Id of task for console update bundle download",
            "format": "int32"
          }
        }
      },
      "PluginsLifecycleActionCompatibilityRequestModel": {
        "type": "object",
        "properties": {
          "Action": {
            "type": "string",
            "description": "Action compatible with  plugin lifecycle"
          },
          "CheckRelatedServices": {
            "type": "boolean",
            "description": "Indicated if related services are checked"
          },
          "Plugins": {
            "items": {
              "$ref": "#/components/schemas/PluginsRequestModel"
            },
            "type": "array",
            "description": "List of plugin request model"
          }
        }
      },
      "DeviceManagementOdataResponseModel": {
        "required": [
          "ManagementId"
        ],
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "description": "Device management MAC address"
          },
          "DnsName": {
            "type": "string",
            "description": "Device management DNS name information"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the device associated with the device management",
            "format": "int32"
          },
          "EndPointAgents": {
            "items": {
              "$ref": "#/components/schemas/ManagementProfileOdataResponseModel"
            },
            "type": "array",
            "description": "Indicates the profile associated with the device management"
          },
          "InstrumentationName": {
            "type": "string",
            "description": "Indicates the instrumentation name for the device management"
          },
          "IpAddress": {
            "type": "string",
            "description": "Device management IP address"
          },
          "ManagementId": {
            "type": "integer",
            "description": "Device management id",
            "format": "int64"
          },
          "ManagementType": {
            "description": "Indicates the management type for the device management",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ManagementTypeModel"
              }
            ]
          }
        }
      },
      "plugin": {
        "type": "object",
        "properties": {
          "Publisher": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "ReleaseNotes": {
            "type": "string"
          },
          "ReleaseHightlights": {
            "type": "string"
          },
          "Id": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ForwarderConfigurations": {
        "type": "object",
        "properties": {
          "ConfigurationName": {
            "type": "string",
            "nullable": true
          },
          "ConfigurationValue": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ForwarderConfigurations"
      },
      "ConnectedStatus": {
        "type": "object",
        "properties": {
          "ConnectedCount": {
            "type": "integer",
            "description": "Connected state count of the managed devices.",
            "format": "int32"
          },
          "DisconnectedCount": {
            "type": "integer",
            "description": "Disconnected state count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "NTPSource": {
        "type": "object",
        "properties": {},
        "title": "NTPSource"
      },
      "MIBEventCatalog": {
        "required": [
          "Name"
        ],
        "type": "object",
        "properties": {
          "EventCatalogId": {
            "type": "integer",
            "description": "ID of the event catalog.",
            "format": "int64"
          },
          "ReleaseVersion": {
            "type": "string",
            "description": "Release version of the catalog."
          },
          "Name": {
            "type": "string",
            "description": "Name of the event catalog."
          }
        }
      },
      "DeviceComplianceReport": {
        "type": "object",
        "properties": {
          "ComplianceStatus": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComplianceStatusType"
              }
            ],
            "nullable": true
          },
          "ServiceTag": {
            "type": "string",
            "nullable": true
          },
          "DeviceTypeName": {
            "type": "string",
            "nullable": true
          },
          "DeviceModel": {
            "type": "string",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "FirmwareStatus": {
            "type": "string",
            "nullable": true
          },
          "DeviceTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceUserFirmwareUpdateCapable": {
            "type": "boolean",
            "nullable": true
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "RebootRequired": {
            "type": "boolean",
            "nullable": true
          },
          "DeviceFirmwareUpdateCapable": {
            "type": "boolean",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ComponentComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/ComponentComplianceReport"
            },
            "type": "array"
          }
        },
        "title": "DeviceComplianceReport"
      },
      "ChassisDiscoveryGroupModel": {
        "required": [
          "Id",
          "Name"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Description of the infrastructure group type"
          },
          "Id": {
            "type": "integer",
            "description": "Group Type Id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of the group type"
          }
        }
      },
      "ServerArrayDiskModel": {
        "type": "object",
        "properties": {
          "FormFactor": {
            "type": "string",
            "description": "Form factor of server disk."
          },
          "SecurityState": {
            "type": "string",
            "description": "Security state of server disk."
          },
          "RemainingReadWriteEndurance": {
            "type": "string",
            "description": "Remaining read write endurance."
          },
          "SerialNumber": {
            "type": "string",
            "description": "Serial number of server disk."
          },
          "RaidStatus": {
            "type": "string",
            "description": "RAID status of server disk."
          },
          "BusType": {
            "type": "string",
            "description": "Bus type of server disk."
          },
          "MediaType": {
            "type": "string",
            "description": "Media type of server disk."
          },
          "EnclosureId": {
            "type": "string",
            "description": "ID of enclosure."
          },
          "ModelNumber": {
            "type": "string",
            "description": "Model number of server disk."
          },
          "PredictiveFailureState": {
            "type": "string",
            "description": "Predictive failure state."
          },
          "ManufacturedDay": {
            "type": "integer",
            "description": "Day of manufacture.",
            "format": "int32"
          },
          "EncryptionAbility": {
            "type": "boolean",
            "description": "Indicates encryption ability."
          },
          "PartNumber": {
            "type": "string",
            "description": "Part number."
          },
          "Id": {
            "type": "integer",
            "description": "ID of server disk.",
            "format": "int32"
          },
          "VendorName": {
            "type": "string",
            "description": "Vendor name of server disk."
          },
          "Channel": {
            "type": "integer",
            "description": "Channel number.",
            "format": "int32"
          },
          "Revision": {
            "type": "string",
            "description": "Revision of server disk."
          },
          "Status": {
            "type": "integer",
            "description": "Status of server array.",
            "format": "int32"
          },
          "FreeSpace": {
            "type": "string",
            "description": "Free space on server disk."
          },
          "UsedSpaceFormatted": {
            "type": "string",
            "description": "Used space formatted."
          },
          "SlotNumber": {
            "type": "integer",
            "description": "Slot number of server disk.",
            "format": "int32"
          },
          "UsedSpace": {
            "type": "string",
            "description": "Used space on server disk."
          },
          "SasAddress": {
            "type": "string",
            "description": "SAS address of server disk."
          },
          "DiskNumber": {
            "type": "string",
            "description": "Disk number."
          },
          "StatusString": {
            "type": "string",
            "description": "Status of server disk."
          },
          "Size": {
            "type": "string",
            "description": "Size of server disk."
          },
          "ManufacturedWeek": {
            "type": "integer",
            "description": "Week of manufacture.",
            "format": "int32"
          },
          "ManufacturedYear": {
            "type": "integer",
            "description": "Year of manufacture.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          }
        }
      },
      "DownloadReportRequest": {
        "required": [
          "ReportDefId",
          "Format"
        ],
        "type": "object",
        "properties": {
          "Format": {
            "type": "string",
            "description": "Report format (e.g. PDF)"
          },
          "ReportDefId": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "RollbackSoftwaresResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "RollbackSoftwares": {
            "items": {
              "$ref": "#/components/schemas/RollbackSoftwares"
            },
            "type": "array"
          }
        },
        "title": "RollbackSoftwaresResponse"
      },
      "DeltaResourceRequirements": {
        "type": "object",
        "properties": {
          "LargeConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResourceConfig"
              }
            ],
            "nullable": true
          },
          "SmallConfig": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ResourceConfig"
              }
            ],
            "nullable": true
          }
        },
        "title": "DeltaResourceRequirements"
      },
      "Profile": {
        "type": "object",
        "properties": {
          "NetworkBootToIso": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ],
            "nullable": true
          },
          "DataSchemaId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TargetTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ProfileDescription": {
            "type": "string",
            "nullable": true
          },
          "TemplateId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeDetails": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProfileAttributeViewEditDetail"
              }
            ],
            "nullable": true
          },
          "LastRunStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TargetId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ProfileState": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TargetName": {
            "type": "string",
            "nullable": true
          },
          "TemplateName": {
            "type": "string",
            "nullable": true
          },
          "ProfileModified": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastEditDate": {
            "type": "string",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "ChassisId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "EditedBy": {
            "type": "string",
            "nullable": true
          },
          "ChassisName": {
            "type": "string",
            "nullable": true
          },
          "DeviceIdInSlot": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeploymentTaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastDeployDate": {
            "type": "string",
            "nullable": true
          },
          "CreatedBy": {
            "type": "string",
            "nullable": true
          },
          "CreatedDate": {
            "type": "string",
            "nullable": true
          },
          "ProfileName": {
            "type": "string",
            "nullable": true
          },
          "GroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Profile"
      },
      "UserContext": {
        "type": "object",
        "properties": {
          "Username": {
            "type": "string",
            "description": "User context username"
          },
          "Privilege": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "User context privilege"
          }
        }
      },
      "ComplianceDependency": {
        "type": "object",
        "properties": {
          "UniqueIdentifier": {
            "type": "string",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "SourceName": {
            "type": "string",
            "nullable": true
          },
          "IsHardDependency": {
            "type": "boolean",
            "nullable": true
          },
          "Uri": {
            "type": "string",
            "nullable": true
          },
          "ComplianceDependencyId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "Path": {
            "type": "string",
            "nullable": true
          },
          "RebootRequired": {
            "type": "boolean",
            "nullable": true
          },
          "UpdateAction": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UpdateAction"
              }
            ],
            "nullable": true
          }
        },
        "title": "ComplianceDependency"
      },
      "AccountResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Accounts": {
            "items": {
              "$ref": "#/components/schemas/AccountBasic"
            },
            "type": "array"
          }
        },
        "title": "AccountResponseModel"
      },
      "AttributeGroupName": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AttributeGroupName"
      },
      "EntityType": {
        "type": "object",
        "properties": {},
        "title": "EntityType"
      },
      "ManagedDevicesRespModel": {
        "type": "object",
        "properties": {
          "ManagedDevicesRespModel": {
            "items": {
              "$ref": "#/components/schemas/ManagedDevicesModel"
            },
            "type": "array",
            "description": "List of of the managed devices."
          }
        }
      },
      "DiscoveredDeviceByTypeModel": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceType": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DiscoveredDeviceByTypeModel"
      },
      "CatalogActionRequestPayloadModel": {
        "type": "object",
        "properties": {
          "CatalogIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Array of catalog ids. Make a GET call to /UpdateService/Catalogs to get all the catalog Ids"
          },
          "AllCatalogs": {
            "type": "boolean"
          }
        }
      },
      "GroupsPrivilegesResponseModel": {
        "type": "object",
        "properties": {
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of privileges names"
          }
        }
      },
      "AuditSubCategory": {
        "type": "object",
        "properties": {
          "Prefix": {
            "type": "string"
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AuditSubCategory"
      },
      "LicenseAgreementFromFile": {
        "type": "object",
        "properties": {
          "Tag": {
            "type": "string",
            "description": "Tag"
          },
          "RestContent": {
            "type": "string",
            "description": "Content"
          },
          "Title": {
            "type": "string",
            "description": "Title"
          }
        }
      },
      "AnnouncedTargetModel": {
        "type": "object",
        "properties": {
          "Ipv4Address": {
            "type": "string",
            "description": "IPv4 address of the server."
          },
          "ServiceTag": {
            "type": "string",
            "description": "Service tag of the server announced to be discovered."
          },
          "HasCredentials": {
            "type": "boolean",
            "description": "True if credentials are available for the server to be discovered."
          },
          "CreatedBy": {
            "type": "string",
            "description": "User who has created discovery task."
          },
          "Ipv6Address": {
            "type": "string",
            "description": "IPv6 address of the server."
          },
          "AnnouncedTime": {
            "type": "string",
            "description": "Time when the servers notify OME of their presence."
          },
          "CreatedOn": {
            "type": "string",
            "description": "Time of discovery job creation."
          },
          "DiscoveryTime": {
            "type": "string",
            "description": "Time when a server got discovered."
          },
          "Status": {
            "type": "integer",
            "description": "Status of the server like Credentials added, Ready for Discovery, Job submitted for discovery, Discovered, etc.",
            "format": "int32"
          },
          "TaskId": {
            "type": "integer",
            "description": "Discovery job ID.",
            "format": "int32"
          },
          "Port": {
            "type": "integer",
            "description": "Port to be used for discovery.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of the announced server in OME.",
            "format": "int32"
          }
        }
      },
      "DeviceStatusResponseModel": {
        "type": "object",
        "properties": {
          "DeviceStatuses": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device statuses"
          }
        }
      },
      "MetricDataModel": {
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "DeviceIdentifier": {
            "type": "string"
          },
          "DeviceAssetTag": {
            "type": "string"
          },
          "Data": {
            "type": "string"
          },
          "DeviceMacAddress": {
            "type": "string"
          },
          "MetricType": {
            "type": "integer",
            "format": "int32"
          },
          "DataName": {
            "type": "string"
          },
          "JobTargetId": {
            "type": "integer",
            "format": "int32"
          },
          "Timestamp": {
            "type": "string"
          },
          "DeviceIpAddress": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Capability": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "CapabilityId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Capability"
      },
      "GroupDAOAttributeTypeReduced": {
        "type": "object",
        "properties": {
          "Required": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type reduced is required"
          },
          "Editable": {
            "type": "boolean",
            "description": "Indicates if the group DAO attribute type reduced is editable"
          },
          "Id": {
            "type": "integer",
            "description": "Group DAO attribute type reduced id",
            "format": "int32"
          }
        }
      },
      "ReducedAttributeModel": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Value": {
            "type": "string"
          },
          "IsIgnored": {
            "type": "boolean",
            "description": "Is the attribute ignored during template deployment and compliance checks."
          }
        }
      },
      "actionDetailElements": {
        "type": "object",
        "properties": {
          "PalAction": {
            "type": "string",
            "description": "PAL Action"
          },
          "Protocol": {
            "type": "string",
            "description": "Protocol information"
          },
          "PalAttribute": {
            "type": "string",
            "description": "PAL attribute"
          }
        }
      },
      "AdditionalDetails": {
        "type": "object",
        "properties": {
          "Content": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AdditionalDetails"
      },
      "SimpleStorageCollectionModel": {
        "type": "object",
        "properties": {
          "SimpleStorageDevices": {
            "items": {
              "$ref": "#/components/schemas/SimpleStorageModel"
            },
            "type": "array",
            "description": "List of simple storage."
          }
        }
      },
      "GroupDAOActions": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAction"
            },
            "type": "array",
            "description": "List of group DAO actions"
          }
        }
      },
      "MembershipTypeModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Group membership type description"
          },
          "Id": {
            "type": "integer",
            "description": "Group membership type id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Group membership type name"
          }
        }
      },
      "ThresholdExceedCount": {
        "type": "object",
        "properties": {
          "ThresholdId": {
            "type": "integer",
            "description": "Threshold Id",
            "format": "int32"
          },
          "PluginId": {
            "type": "string",
            "description": "Plugin Id"
          },
          "Type": {
            "description": "Threshold Type",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ThresholdType"
              }
            ]
          },
          "EntityId": {
            "type": "integer",
            "description": "Entity Id",
            "format": "int32"
          },
          "CountModel": {
            "description": "Count of the records",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ThresholdCountByType"
              }
            ]
          }
        }
      },
      "AlertMessageDefinitionCategoriesResponseModel": {
        "type": "object",
        "properties": {
          "Categories": {
            "items": {
              "$ref": "#/components/schemas/AlertMessageDefinitionCategoriesModel"
            },
            "type": "array",
            "description": "List of alert message definition categories."
          }
        }
      },
      "SyslogOperator": {
        "type": "object",
        "properties": {},
        "title": "SyslogOperator"
      },
      "AnnouncedTargetOdataModel": {
        "type": "object",
        "properties": {
          "AnnouncedTargetModel": {
            "items": {
              "$ref": "#/components/schemas/AnnouncedTargetModel"
            },
            "type": "array",
            "description": "List of servers announced to be discovered by OME."
          }
        }
      },
      "Threshold": {
        "type": "object",
        "properties": {
          "ThresholdId": {
            "type": "integer",
            "description": "Threshold Id",
            "format": "int32"
          },
          "PluginId": {
            "type": "string",
            "description": "Plugin id"
          },
          "UpperCritical": {
            "type": "string",
            "description": "Upper Critical value"
          },
          "LowerWarning": {
            "type": "string",
            "description": "Lower warning value"
          },
          "LowerCritical": {
            "type": "string",
            "description": "Lower critical value"
          },
          "UpperWarning": {
            "type": "string",
            "description": "Upper warning value"
          },
          "EntityId": {
            "type": "integer",
            "description": "Entity id",
            "format": "int32"
          },
          "Type": {
            "type": "string",
            "description": "Threshold Type"
          },
          "State": {
            "type": "string",
            "description": "Threshold state"
          },
          "ValueTypeId": {
            "type": "integer",
            "description": "Value type id",
            "format": "int32"
          }
        }
      },
      "WarrantyDetail": {
        "type": "object",
        "properties": {
          "ActiveCount": {
            "type": "integer",
            "description": "Active count of warranty",
            "format": "int32"
          },
          "WarrantyData": {
            "items": {
              "$ref": "#/components/schemas/WarrantyModel"
            },
            "type": "array",
            "description": "Warranty data"
          },
          "ExpiredCount": {
            "type": "integer",
            "description": "Expired count of warranty",
            "format": "int32"
          },
          "ExpiringSoonCount": {
            "type": "integer",
            "description": "Expiring soon count of warranty",
            "format": "int32"
          }
        }
      },
      "ComputerSystemProcessorModel": {
        "type": "object",
        "properties": {
          "Status": {
            "items": {
              "$ref": "#/components/schemas/StatusModel"
            },
            "type": "array"
          },
          "ProcessorId": {
            "type": "string",
            "description": "Processor id."
          },
          "TotalCores": {
            "type": "integer",
            "description": "Total cores.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of system processor."
          },
          "TotalThreads": {
            "type": "integer",
            "description": "Total threads.",
            "format": "int32"
          },
          "Model": {
            "type": "string",
            "description": "Model of processor."
          },
          "InstructionSet": {
            "type": "string",
            "description": "Instruction set."
          },
          "ProcessorArchitecture": {
            "type": "string",
            "description": "Architecture of processor."
          },
          "ProcessorType": {
            "type": "string",
            "description": "Type of processor."
          },
          "MaxSpeedMHz": {
            "type": "integer",
            "description": "Max speed in MHz.",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of processor."
          },
          "Manufacturer": {
            "type": "string",
            "description": "Manufacturer."
          },
          "Id": {
            "type": "string",
            "description": "ID of system processor."
          },
          "Socket": {
            "type": "string",
            "description": "Socket of processor."
          }
        }
      },
      "DeviceManagementMinModel": {
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "nullable": true
          },
          "NetworkAddress": {
            "type": "string",
            "nullable": true
          },
          "InstrumentationName": {
            "type": "string",
            "nullable": true
          },
          "DeviceId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "ManagementProfile": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ManagementProfileMinModel"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ManagementId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "DeviceManagementMinModel"
      },
      "DeviceManagementReducedModel": {
        "type": "object",
        "properties": {
          "MacAddress": {
            "type": "string",
            "description": "Device management MAC address"
          },
          "DnsName": {
            "type": "string",
            "description": "Device management DNS name information"
          },
          "NetworkAddress": {
            "type": "string",
            "description": "Device management network address"
          },
          "InstrumentationName": {
            "type": "string",
            "description": "Indicates the instrumentation name for the device management"
          },
          "ManagementProfile": {
            "items": {
              "$ref": "#/components/schemas/ManagementProfileModel"
            },
            "type": "array",
            "description": "Indicates the profile associated with the device management"
          },
          "ManagementId": {
            "type": "integer",
            "description": "Device management id",
            "format": "int64"
          },
          "ManagementType": {
            "type": "integer",
            "description": "Indicates the management type for the device management",
            "format": "int64"
          }
        }
      },
      "Baseline": {
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string",
            "nullable": true
          },
          "BaselineTargets": {
            "items": {
              "$ref": "#/components/schemas/BaselineTarget"
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "TemplateName": {
            "type": "string",
            "nullable": true
          },
          "ConfigComplianceSummary": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ComplianceSummary"
              }
            ],
            "nullable": true
          },
          "PercentageComplete": {
            "type": "string",
            "nullable": true
          },
          "TemplateType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TaskId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "TemplateId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "DeviceConfigComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/DeviceConfigComplianceReports"
            },
            "type": "array"
          },
          "TaskStatus": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string"
          }
        },
        "title": "Baseline"
      },
      "UsageCounts": {
        "type": "object",
        "properties": {
          "Counts": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IdentityCounts"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "UsageCounts"
      },
      "SingleUpdateReportContentsResponse": {
        "type": "object",
        "properties": {
          "": {
            "items": {
              "$ref": "#/components/schemas/SingleUpdateReportComponentsResponse"
            },
            "type": "array"
          }
        },
        "title": "SingleUpdateReportContentsResponse"
      },
      "ServerStorageEnclosure": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "Version": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "NumberOfFanPacks": {
            "type": "integer",
            "format": "int32"
          },
          "BackplanePartNum": {
            "type": "string"
          },
          "ChannelNumber": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "SlotCount": {
            "type": "integer",
            "format": "int32"
          },
          "StatusTypeString": {
            "type": "string"
          },
          "RollupStatus": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AuditLogMessages": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "AuditLogMessage": {
            "items": {
              "$ref": "#/components/schemas/AuditLogMessage"
            },
            "type": "array"
          }
        }
      },
      "FileModel": {
        "type": "object",
        "properties": {
          "FileName": {
            "type": "string"
          }
        }
      },
      "VersionDetailModel": {
        "type": "object",
        "properties": {
          "BuildNumber": {
            "type": "integer",
            "description": "Build number.",
            "format": "int32"
          },
          "VersionMinor": {
            "type": "string",
            "description": "Minor version."
          },
          "VersionRelease": {
            "type": "string",
            "description": "Release version."
          },
          "BuildDate": {
            "type": "string",
            "description": "Build date.",
            "format": "date-time"
          },
          "ComponentName": {
            "type": "string",
            "description": "Name of component."
          },
          "VersionMajor": {
            "type": "string",
            "description": "Major version."
          }
        }
      },
      "DeviceSlotTypeModel": {
        "required": [
          "SlotType"
        ],
        "type": "object",
        "properties": {
          "SlotType": {
            "type": "integer",
            "description": "Device slot id",
            "format": "int64"
          },
          "SlotName": {
            "type": "string",
            "description": "Device slot name"
          },
          "Description": {
            "type": "string",
            "description": "Device slot description"
          }
        }
      },
      "UpdateService": {
        "type": "object",
        "properties": {
          "ComplianceStatuses": {
            "items": {
              "$ref": "#/components/schemas/ComplianceStatus"
            },
            "type": "array"
          },
          "Catalogs": {
            "items": {
              "$ref": "#/components/schemas/Catalogs"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "RollbackSoftwares": {
            "items": {
              "$ref": "#/components/schemas/RollbackSoftwares"
            },
            "type": "array"
          },
          "DeviceComponentTypes": {
            "items": {
              "$ref": "#/components/schemas/DeviceComponentTypeModel"
            },
            "type": "array"
          },
          "Baselines": {
            "items": {
              "$ref": "#/components/schemas/Baselines"
            },
            "type": "array"
          }
        },
        "title": "UpdateService"
      },
      "NetworkTypeResponseModel": {
        "type": "object",
        "properties": {
          "NetworkTypes": {
            "items": {
              "$ref": "#/components/schemas/NetworkTypeModel"
            },
            "type": "array",
            "description": "Network type. For more information, see the details of other URIs of this resource."
          }
        }
      },
      "DiscoveryConfigJobModel": {
        "type": "object",
        "properties": {
          "DiscoveryConfigDescription": {
            "type": "string",
            "description": "Description of the Discovery configuration job."
          },
          "DiscoveryConfigEmailRecipient": {
            "type": "string",
            "description": "Email ID of the recipient to whom job completion status will be sent."
          },
          "DiscoveryConfigDiscoveredDeviceCount": {
            "type": "string",
            "description": "Total number of devices discovered."
          },
          "DiscoveryConfigRequestId": {
            "type": "integer",
            "description": "Discovery configuration job ID.",
            "format": "int32"
          },
          "DiscoveryConfigExpectedDeviceCount": {
            "type": "string",
            "description": "Expected number of devices to be found."
          },
          "DiscoveryConfigName": {
            "type": "string",
            "description": "Name of the Discovery configuration job."
          }
        }
      },
      "LifeCycleStatusModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of the operation"
          },
          "Activity": {
            "type": "string",
            "description": "Fabric operation"
          }
        }
      },
      "CredentialProfile": {
        "type": "object",
        "properties": {
          "ProfileType": {
            "type": "string",
            "description": "Profile type."
          },
          "CredentialProfileId": {
            "type": "integer",
            "description": "ID of credential profile.",
            "format": "int32"
          },
          "CredentialProfile": {
            "type": "string",
            "description": "Credential profile object."
          }
        }
      },
      "ServerVirtualDisk": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "WritePolicy": {
            "type": "string"
          },
          "Layout": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "LockStatus": {
            "type": "string"
          },
          "StripeSize": {
            "type": "string"
          },
          "TargetId": {
            "type": "integer",
            "format": "int32"
          },
          "MediaType": {
            "type": "string"
          },
          "ReadPolicy": {
            "type": "string"
          },
          "State": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "RaidControllerId": {
            "type": "integer",
            "format": "int32"
          },
          "Size": {
            "type": "string"
          },
          "RollupStatus": {
            "type": "integer",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "CachePolicy": {
            "type": "string"
          }
        }
      },
      "ServerNetworksUpdateModel": {
        "type": "object",
        "properties": {
          "ServerProfile": {
            "description": "Server profiles",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ServerNetworksUpdateTemplateModel"
              }
            ]
          },
          "ServersServiceTag": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of compute service tags to modify profile interfaces"
          }
        }
      },
      "Update": {
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "nullable": true
          },
          "LastUpdateDateTime": {
            "type": "string",
            "nullable": true
          },
          "Auto": {
            "type": "boolean",
            "nullable": true
          },
          "Version": {
            "type": "string",
            "nullable": true
          },
          "ComponentName": {
            "type": "string",
            "nullable": true
          },
          "Size": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "Update"
      },
      "AlertMessageDefinitionCategory": {
        "type": "object",
        "properties": {
          "Category": {
            "type": "string",
            "nullable": true
          },
          "SubCategoriesDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertMessageDefinitionSubCategories"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "AlertMessageDefinitionCategory"
      },
      "DataForwardingService": {
        "type": "object",
        "properties": {
          "CategoryTypes": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/CategoryType"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Forwarders": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Forwarders"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "DataForwardingService"
      },
      "AddressConfiguration": {
        "type": "object",
        "properties": {
          "ManagementVLAN": {
            "items": {
              "$ref": "#/components/schemas/ManagementVLAN"
            },
            "type": "array"
          },
          "Delay": {
            "type": "integer",
            "description": "The time, in seconds, after which settings are applied asynchronously.",
            "format": "int32"
          },
          "EnableNIC": {
            "type": "boolean",
            "description": "Indicates if NIC is enabled."
          },
          "DnsConfiguration": {
            "items": {
              "$ref": "#/components/schemas/DnsConfiguration"
            },
            "type": "array"
          },
          "Ipv6Configuration": {
            "items": {
              "$ref": "#/components/schemas/Ipv6Configuration"
            },
            "type": "array"
          },
          "Ipv4Configuration": {
            "items": {
              "$ref": "#/components/schemas/Ipv4Configuration"
            },
            "type": "array"
          }
        }
      },
      "BaselinesReducedModel": {
        "type": "object",
        "properties": {
          "LastRun": {
            "type": "string"
          },
          "Description": {
            "type": "string",
            "description": "Description of the baseline"
          },
          "RepositoryType": {
            "type": "string"
          },
          "CatalogId": {
            "type": "integer",
            "description": "ID of the catalog. Users must enumerate all catalogs and match the 'Name' of the repository with the input provided while creating the catalog",
            "format": "int64"
          },
          "RepositoryId": {
            "type": "integer",
            "description": "ID of the repository. Derived from the catalog response",
            "format": "int64"
          },
          "Is64Bit": {
            "type": "boolean",
            "description": "This must always be set to true. The size of the DUP files used is 64 bits."
          },
          "TaskId": {
            "type": "integer",
            "format": "int64"
          },
          "Targets": {
            "items": {
              "$ref": "#/components/schemas/TargetModel"
            },
            "type": "array",
            "description": "The DeviceID, if the baseline is being created for devices or, the GroupID, if the baseline is being created for a group of devices."
          },
          "DowngradeEnabled": {
            "type": "boolean",
            "description": "Indicates if the firmware can be downgraded"
          },
          "RepositoryName": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ComplianceSummary": {
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/ComplianceSummaryModel"
            },
            "type": "array",
            "maxItems": 1
          },
          "Name": {
            "type": "string",
            "description": "Name of the baseline"
          }
        }
      },
      "DeployRequiredResponseModel": {
        "type": "object",
        "properties": {
          "DeployRequired": {
            "type": "boolean",
            "description": "Indicates if deploys is required"
          }
        }
      },
      "ApplianceResource": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "IdConfigType": {
            "type": "integer",
            "description": "Indicates the configuration type - small or large",
            "format": "int32"
          },
          "IdOwner": {
            "type": "integer",
            "description": "Owner id of this resource definition",
            "format": "int32"
          },
          "IdPlugin": {
            "type": "integer",
            "description": "Plugin id (if any) associated with this record",
            "format": "int32"
          },
          "ConfigTypeName": {
            "type": "string",
            "description": "Configuration type name"
          },
          "IdResourceType": {
            "type": "integer",
            "description": "Indicates the resource type",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Primary key",
            "format": "int32"
          },
          "Value": {
            "type": "integer",
            "description": "Value of the resource",
            "format": "int32"
          },
          "ResourceTypeName": {
            "type": "string",
            "description": "Resource type name"
          }
        }
      },
      "TemplateEditInfoModel": {
        "type": "object",
        "properties": {
          "AttributeEditInfos": {
            "items": {
              "$ref": "#/components/schemas/AttributeEditInfoModel"
            },
            "type": "array"
          },
          "AttributeOptions": {
            "items": {
              "$ref": "#/components/schemas/AttributeOptionModel"
            },
            "type": "array"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "AttributeOptionSets": {
            "items": {
              "$ref": "#/components/schemas/AttributeOptionSetModel"
            },
            "type": "array"
          }
        }
      },
      "ServerFCCard": {
        "type": "object",
        "properties": {
          "DeviceName": {
            "type": "string"
          },
          "DeviceDescription": {
            "type": "string"
          },
          "Fqdd": {
            "type": "string"
          },
          "SecondFctargetLun": {
            "type": "string"
          },
          "PortSpeed": {
            "type": "string"
          },
          "SecondFctargetWwpn": {
            "type": "string"
          },
          "VendorName": {
            "type": "string"
          },
          "FirstFctargetWwpn": {
            "type": "string"
          },
          "PortNumber": {
            "type": "integer",
            "format": "int32"
          },
          "VirtualWwn": {
            "type": "string"
          },
          "Wwpn": {
            "type": "string"
          },
          "FirstFctargetLun": {
            "type": "string"
          },
          "Wwn": {
            "type": "string"
          },
          "LinkStatus": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "VirtualWwpn": {
            "type": "string"
          }
        }
      },
      "Warranty": {
        "type": "object",
        "properties": {
          "MaxEndDateForServiceCode": {
            "type": "string",
            "nullable": true
          },
          "State": {
            "type": "string",
            "nullable": true
          },
          "CustomerNumber": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceName": {
            "type": "string",
            "nullable": true
          },
          "EndDate": {
            "type": "string",
            "nullable": true
          },
          "OrderNumber": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Timestamp": {
            "type": "string",
            "nullable": true
          },
          "ItemNumber": {
            "type": "string",
            "nullable": true
          },
          "DaysRemaining": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DeviceIdentifier": {
            "type": "string",
            "nullable": true
          },
          "DeviceModel": {
            "type": "string",
            "nullable": true
          },
          "StartDate": {
            "type": "string",
            "nullable": true
          },
          "IsWarrantyItemRenewed": {
            "type": "boolean",
            "nullable": true
          },
          "GroupName": {
            "type": "string",
            "nullable": true
          },
          "CountryLookupCode": {
            "type": "string",
            "nullable": true
          },
          "DeviceType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ServiceLevelDescription": {
            "type": "string",
            "nullable": true
          },
          "ServiceLevelGroup": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "ServiceProvider": {
            "type": "string",
            "nullable": true
          },
          "LocalChannel": {
            "type": "string",
            "nullable": true
          },
          "SystemShipDate": {
            "type": "string",
            "nullable": true
          },
          "ServiceLevelCode": {
            "type": "string",
            "nullable": true
          },
          "DeviceId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Warranty"
      },
      "ThresholdState": {
        "type": "object",
        "properties": {},
        "title": "ThresholdState"
      },
      "ValidationActions": {
        "type": "object",
        "properties": {
          "Validators": {
            "items": {
              "$ref": "#/components/schemas/ValidationAction"
            },
            "type": "array",
            "description": "List of validation actions"
          }
        }
      },
      "MetricsValueSet": {
        "type": "object",
        "properties": {
          "Timestamp": {
            "type": "string",
            "description": "Metric timestamp"
          },
          "Type": {
            "type": "string",
            "description": "Metric Type"
          },
          "ComponentId": {
            "type": "string",
            "description": "Metric component id"
          },
          "Value": {
            "type": "string",
            "description": "Metric value"
          }
        }
      },
      "AutoDeployTempModel": {
        "type": "object",
        "properties": {
          "TargetIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/DeviceAttributesUpdateModel"
            },
            "type": "array"
          },
          "Options": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeployOptionModel"
              }
            ]
          },
          "BootToIsoId": {
            "type": "integer",
            "format": "int32"
          },
          "TemplateId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AlertSnmpEventOidForSeverityModel": {
        "type": "object",
        "properties": {
          "OwnerId": {
            "type": "integer",
            "description": "The owner for the SNMP event oid.",
            "format": "int32"
          },
          "Oid": {
            "type": "string",
            "description": "The severity OID."
          },
          "SnmpOidToSeverity": {
            "items": {
              "$ref": "#/components/schemas/AlertSnmpEventOidToSeverityModel"
            },
            "type": "array",
            "description": "The translated SNMP OID severity to alert severity."
          },
          "Id": {
            "type": "integer",
            "description": "Id of the SNMP event oid.",
            "format": "int32"
          }
        }
      },
      "ThresholdType": {
        "type": "object",
        "properties": {},
        "title": "ThresholdType"
      },
      "AlertCategories": {
        "type": "object",
        "properties": {
          "IsBuiltIn": {
            "type": "boolean",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "CategoriesDetails": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AlertCategory"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "AlertCategories"
      },
      "Availability": {
        "type": "object",
        "properties": {
          "DisabledPluginsOnUpgrade": {
            "type": "integer",
            "format": "int32"
          },
          "DisabledPluginWithDevices": {
            "type": "integer",
            "format": "int32"
          },
          "DownloadedPlugins": {
            "type": "boolean"
          },
          "AvailablePlugins": {
            "type": "integer",
            "format": "int32"
          },
          "UpdatedPlugins": {
            "type": "integer",
            "format": "int32"
          },
          "IncompatibleInstalledAndEnabledPlugins": {
            "type": "integer",
            "format": "int32"
          }
        },
        "title": "Availability"
      },
      "EventsDaoSummaryModel": {
        "type": "object",
        "properties": {
          "Events": {
            "items": {
              "$ref": "#/components/schemas/EventDaoModel"
            },
            "type": "array"
          }
        }
      },
      "TemplateEditInfo": {
        "type": "object",
        "properties": {
          "AttributeEditInfos": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeEditInfo"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "AttributeOptions": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeOption"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "AttributeOptionSets": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/AttributeOptionSet"
                }
              ],
              "nullable": true
            },
            "type": "array"
          }
        },
        "title": "TemplateEditInfo"
      },
      "WorkingSetResponse": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Status of Adding/Removing Devices or Groups to Monitering List"
          }
        }
      },
      "TemplateViewTypeModel": {
        "type": "object",
        "title": "TemplateViewTypeModel"
      },
      "UsersForOwnershipTransferResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Users": {
            "items": {
              "$ref": "#/components/schemas/UserForOwnershipTransferResponse"
            },
            "type": "array"
          }
        },
        "title": "UsersForOwnershipTransferResponse"
      },
      "TemplateTypeModel": {
        "type": "object",
        "title": "TemplateTypeModel"
      },
      "ChassisStackMember": {
        "type": "object",
        "properties": {
          "LinkSpeed": {
            "type": "string"
          },
          "ServiceTag": {
            "type": "string"
          },
          "NeighborMgmtIPv4": {
            "type": "string"
          },
          "NeighborMgmtIPv6": {
            "type": "string"
          },
          "NeighborChassisMAC": {
            "type": "string"
          },
          "LinkState": {
            "type": "string"
          },
          "ChassisStackmemberId": {
            "type": "integer",
            "format": "int32"
          },
          "ChassisId": {
            "type": "integer",
            "format": "int32"
          },
          "NeighborPortName": {
            "type": "string"
          },
          "SystemID": {
            "type": "string"
          },
          "ChassisName": {
            "type": "string"
          },
          "NeighborChassisId": {
            "type": "string"
          },
          "NeighborChassisType": {
            "type": "string"
          },
          "ChassisModel": {
            "type": "string"
          }
        }
      },
      "NetworkRequestPayloadModel": {
        "type": "object",
        "properties": {
          "NetworkIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Unique identifier of the network."
          }
        }
      },
      "FabricDesignCriterionModel": {
        "type": "object",
        "properties": {
          "ApplicableNodes": {
            "items": {
              "$ref": "#/components/schemas/FabricDesignApplicableNodeModel"
            },
            "type": "array"
          },
          "Criterion": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/FabricDesignNodeModel"
              }
            ]
          }
        }
      },
      "ApplianceLocale": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string"
          }
        }
      },
      "AuditLogCategoryModel": {
        "type": "object",
        "properties": {
          "SubCategoryDetails": {
            "items": {
              "$ref": "#/components/schemas/AuditLogSubCategoryModel"
            },
            "type": "array"
          },
          "CatalogName": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "snmpV3Credential": {
        "type": "object",
        "properties": {
          "AuthenticationPassphrase": {
            "type": "string",
            "description": "Authentication passphrase."
          },
          "SecurityName": {
            "type": "string",
            "description": "Security name."
          },
          "PrivacyProtocol": {
            "description": "Privacy type.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/PrivacyModelType"
              }
            ]
          },
          "AuthenticationProtocol": {
            "description": "Authentication type.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/AuthenticationModelType"
              }
            ]
          },
          "PrivacyPassphrase": {
            "type": "string",
            "description": "Privacy passphrase."
          }
        }
      },
      "OemActions": {
        "type": "object",
        "properties": {}
      },
      "DeviceComplianceReportResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceComplianceReports": {
            "items": {
              "$ref": "#/components/schemas/DeviceComplianceReportModel"
            },
            "type": "array"
          }
        }
      },
      "TargetIdentitiesResponse": {
        "type": "object",
        "properties": {
          "Details": {
            "items": {
              "$ref": "#/components/schemas/UsageDetail"
            },
            "type": "array"
          }
        }
      },
      "IdentityPoolResponse": {
        "type": "object",
        "properties": {
          "Details": {
            "items": {
              "$ref": "#/components/schemas/IdentityPool"
            },
            "type": "array"
          }
        }
      },
      "ProfileModel": {
        "required": [
          "ProfileName"
        ],
        "type": "object",
        "properties": {
          "NetworkBootToIso": {
            "description": "(Optional) If network boot from ISO settings are wanted for the new profiles, they are specified in this element.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ]
          },
          "DataSchemaId": {
            "type": "integer",
            "description": "ID of the data schema associated with the template.",
            "format": "int32"
          },
          "TemplateName": {
            "type": "string",
            "description": "Name of the template from which the profile was created."
          },
          "ProfileModified": {
            "type": "integer",
            "description": "Indicates whether or not profile has been modified since it was last deployed.",
            "format": "int32"
          },
          "ProfileDescription": {
            "type": "string"
          },
          "TargetTypeId": {
            "type": "integer",
            "description": "ID of the target type (Server/Chassis/Identifier/Slot).",
            "format": "int32"
          },
          "GroupName": {
            "type": "string",
            "description": "If targetTypeID is identifier (auto deploy), this is the name of the static group into which the device will be placed when it's discovered."
          },
          "ChassisId": {
            "type": "integer",
            "description": "If targetTypeID is server or slot, this is the ID of the chassis associated with the target.",
            "format": "int32"
          },
          "EditedBy": {
            "type": "string"
          },
          "ChassisName": {
            "type": "string",
            "description": "If targetTypeID is server or slot, this is the name of the chassis associated with the target."
          },
          "TemplateId": {
            "type": "integer",
            "description": "ID of the template from which the profile was created.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceIdInSlot": {
            "type": "integer",
            "description": "ID of the device inserted to a chassis slot. This will be same as targetId for Device profiles",
            "format": "int32"
          },
          "DeploymentTaskId": {
            "type": "integer",
            "description": "ID of the deployment task currently associated with the profile. It will be present only when the profile is deployed or scheduled for deployment.",
            "format": "int32"
          },
          "LastRunStatus": {
            "type": "integer",
            "description": "Status of the current/last task associated with the profile.",
            "format": "int32"
          },
          "TargetId": {
            "type": "integer",
            "description": "ID of the target where the profile is/will be deployed.",
            "format": "int32"
          },
          "ProfileState": {
            "type": "integer",
            "description": "The current state of the profile (Unassigned/Assigned/Deployed).",
            "format": "int32"
          },
          "BootToNetworkIsoId": {
            "type": "integer",
            "description": "This is the ID of the object that contains network boot from ISO settings for the profile.",
            "format": "int32"
          },
          "LastDeployDate": {
            "type": "string"
          },
          "CreatedBy": {
            "type": "string"
          },
          "CreatedDate": {
            "type": "string"
          },
          "ProfileName": {
            "type": "string"
          },
          "LastEditDate": {
            "type": "string"
          },
          "TargetName": {
            "type": "string",
            "description": "Name of the target where the profile is/will be deployed."
          },
          "GroupId": {
            "type": "integer",
            "description": "If targetTypeID is identifier (auto deploy), this is the ID of the static group into which the device will be placed when it's discovered.",
            "format": "int32"
          }
        }
      },
      "DetachProfileModel": {
        "required": [
          "SourceEntityId"
        ],
        "type": "object",
        "properties": {
          "SourceEntityId": {
            "type": "integer",
            "description": "ID of the source device where the profile is currently deployed.",
            "format": "int32"
          },
          "ForceMigrate": {
            "type": "boolean",
            "description": "True indicates deploy to the destination device even if the profile cannot be removed from the source device."
          }
        }
      },
      "AccountService": {
        "type": "object",
        "properties": {
          "Status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Status"
              }
            ],
            "nullable": true
          },
          "ByUserName": {
            "type": "boolean"
          },
          "AccountLockoutThreshold": {
            "format": "int16",
            "type": "integer",
            "nullable": true
          },
          "AuthFailureLoggingThreshold": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "Roles": {
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array"
          },
          "ExternalAccountProvider": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ExternalAccountProvider"
              }
            ],
            "nullable": true
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "EnableIpRangeAddress": {
            "type": "boolean"
          },
          "AccountLockoutCounterResetAfter": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "Accounts": {
            "items": {
              "$ref": "#/components/schemas/Account"
            },
            "type": "array"
          },
          "ServiceEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "ByIPAddress": {
            "type": "boolean"
          },
          "MaxPasswordLength": {
            "format": "int16",
            "type": "integer",
            "nullable": true
          },
          "AccountLockoutDuration": {
            "format": "int32",
            "type": "integer",
            "nullable": true
          },
          "IpRangeAddress": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          },
          "MinPasswordLength": {
            "format": "int16",
            "type": "integer",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AccountService"
      },
      "Partition": {
        "type": "object",
        "properties": {
          "VirtualFipMacAddress": {
            "type": "string",
            "description": "Partition virtual FIP mac address details"
          },
          "Fqdd": {
            "type": "string",
            "description": "Partition FQDD"
          },
          "IscsiMode": {
            "type": "string",
            "description": "Partition ISCSI mode details"
          },
          "NicMode": {
            "type": "string",
            "description": "Partition nic mode"
          },
          "VirtualIscsiMacAddress": {
            "type": "string",
            "description": "Partition virtual ISCSI details"
          },
          "VirtualMacAddress": {
            "type": "string",
            "description": "Partition virtual mac address details"
          },
          "MaxBandwidth": {
            "type": "integer",
            "description": "Indicates the partition max bandwidth",
            "format": "int32"
          },
          "PermanentMacAddress": {
            "type": "string",
            "description": "Partition permanent mac address"
          },
          "PermanentFcoeMacAddress": {
            "type": "string",
            "description": "Partition permanent FCO mac address"
          },
          "Wwpn": {
            "type": "string",
            "description": "Partition WWPN details"
          },
          "CurrentMacAddress": {
            "type": "string",
            "description": "Partition current mac address"
          },
          "PermanentIscsiMacAddress": {
            "type": "string",
            "description": "Partition permanent ISCSI mac address"
          },
          "Wwn": {
            "type": "string",
            "description": "Partition WWN details"
          },
          "FcoeMode": {
            "type": "string",
            "description": "Partition FCOE mode details"
          },
          "VirtualWwn": {
            "type": "string",
            "description": "Partition virtual WWN details"
          },
          "VirtualWwpn": {
            "type": "string",
            "description": "Partition virtual WWPN details"
          },
          "MinBandwidth": {
            "type": "integer",
            "description": "Indicates the partition min bandwidth",
            "format": "int32"
          }
        }
      },
      "UnallocatedSwitchesFilterRequestModel": {
        "type": "object",
        "properties": {
          "Slot": {
            "type": "string",
            "description": "IOM slot"
          },
          "ChassisServiceTag": {
            "type": "string",
            "description": "Chassis service tag"
          }
        }
      },
      "ProfileService": {
        "type": "object",
        "properties": {
          "ProfileStates": {
            "items": {
              "$ref": "#/components/schemas/ProfileStates"
            },
            "type": "array"
          },
          "ProfileUsage": {
            "items": {
              "$ref": "#/components/schemas/ProfileUsage"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Profiles": {
            "items": {
              "$ref": "#/components/schemas/Profile"
            },
            "type": "array"
          }
        },
        "title": "ProfileService"
      },
      "ChassisControllerModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "State": {
            "type": "string",
            "description": "Indicates the state of chassis controller"
          },
          "Health": {
            "type": "integer",
            "description": "Indicates the health of the chassis controller",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Chassis controller name"
          },
          "SlotNumber": {
            "type": "string",
            "description": "Indicates the slot number associated with teh chasis controller"
          },
          "Id": {
            "type": "integer",
            "description": "Chassis controller id",
            "format": "int64"
          },
          "FirmwareVersion": {
            "type": "string",
            "description": "Indicates the firmware version of the chassis controller"
          },
          "DeviceId": {
            "type": "integer",
            "description": "Indicates the associated device to the chassis controller",
            "format": "int32"
          }
        }
      },
      "UpdateReportDefinitionRequest": {
        "type": "object",
        "properties": {
          "ColumnDefs": {
            "items": {
              "$ref": "#/components/schemas/ReportDefColModel"
            },
            "type": "array"
          },
          "Description": {
            "type": "string",
            "description": "Report description"
          },
          "QueryId": {
            "type": "integer",
            "description": "Id of the query report is associated with",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Report name"
          }
        }
      },
      "ComplianceStatusType": {
        "enum": [
          "OK",
          "WARNING",
          "CRITICAL",
          "DOWNGRADE",
          "UNKNOWN"
        ],
        "type": "string",
        "title": "ComplianceStatusType"
      },
      "GetUnallocatedSwitchesRequestModel": {
        "type": "object",
        "properties": {
          "Filters": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/UnallocatedSwitchesFilterRequestModel"
              }
            ]
          }
        }
      },
      "FcoeSettings": {
        "type": "object",
        "properties": {
          "Mac": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MacSettings"
              }
            ],
            "nullable": true
          }
        },
        "title": "FcoeSettings"
      },
      "QueryDuration": {
        "type": "object",
        "properties": {},
        "title": "QueryDuration"
      },
      "ComplianceStatus": {
        "type": "object",
        "properties": {
          "StatusName": {
            "type": "string"
          },
          "StatusId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "ComplianceStatus"
      },
      "NetworkConfigurationService": {
        "type": "object",
        "properties": {
          "NetworkTypes": {
            "items": {
              "$ref": "#/components/schemas/NetworkType"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          },
          "Networks": {
            "items": {
              "$ref": "#/components/schemas/Network"
            },
            "type": "array"
          },
          "QosTypes": {
            "items": {
              "$ref": "#/components/schemas/QosType"
            },
            "type": "array"
          },
          "ReplicableChassisSettings": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ReplicableChassisSettingsResponseModel"
              }
            ],
            "nullable": true
          }
        },
        "title": "NetworkConfigurationService"
      },
      "DiscoveryJobStatusModel": {
        "type": "object",
        "properties": {
          "JobNextRun": {
            "type": "string",
            "nullable": true
          },
          "LastUpdateTime": {
            "type": "string",
            "nullable": true
          },
          "JobStatus": {
            "type": "string",
            "nullable": true
          },
          "JobName": {
            "type": "string",
            "nullable": true
          },
          "JobStartTime": {
            "type": "string",
            "nullable": true
          },
          "JobSchedule": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "JobEndTime": {
            "type": "string",
            "nullable": true
          },
          "JobId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "JobProgress": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DiscoveryJobStatusModel"
      },
      "PrefixLength": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "maximum": 128
          }
        },
        "title": "PrefixLength"
      },
      "SessionModel": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string",
            "description": "The Session user name."
          },
          "DirectoryGroup": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of Directory Groups of the session."
          },
          "Name": {
            "type": "string",
            "description": "Name of the session."
          },
          "Roles": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of roles associated with this session."
          },
          "StartTimeStamp": {
            "type": "string",
            "description": "Session start timestamp."
          },
          "Password": {
            "type": "string",
            "description": "The session user password."
          },
          "IpAddress": {
            "type": "string",
            "description": "IP address of the session."
          },
          "Id": {
            "type": "string",
            "description": "The unique identifier of the SessionService."
          },
          "LastAccessedTimeStamp": {
            "type": "string",
            "description": "Last accessed timestamp of the session."
          },
          "Description": {
            "type": "string",
            "description": "Description for the user session."
          }
        }
      },
      "DeviceSlotTypeResponseModel": {
        "type": "object",
        "properties": {
          "DeviceSlotType": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "List of device slot types"
          }
        }
      },
      "ConsoleUpdateService": {
        "type": "object",
        "properties": {
          "LastUpdateResult": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/LastUpdateResult"
              }
            ],
            "nullable": true
          },
          "UpdateBundleInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UpdateBundleInfo"
              }
            ],
            "nullable": true
          },
          "Updates": {
            "items": {
              "$ref": "#/components/schemas/Update"
            },
            "type": "array"
          },
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          }
        },
        "title": "ConsoleUpdateService"
      },
      "AssignProfileRequest": {
        "required": [
          "Id",
          "Schedule",
          "TargetId"
        ],
        "type": "object",
        "properties": {
          "AttachAndApply": {
            "type": "boolean"
          },
          "NetworkBootToIso": {
            "description": "(Optional) If network boot from ISO settings are wanted for the new profiles, they are specified in this element.",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/NetworkBootToIso"
              }
            ]
          },
          "Schedule": {
            "description": "When to deploy profile - optional, default = runNow",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "Attributes": {
            "items": {
              "$ref": "#/components/schemas/ProfileReducedAttributeModel"
            },
            "type": "array"
          },
          "TargetId": {
            "type": "integer",
            "format": "int32"
          },
          "Options": {
            "description": "Deployment settings",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeployOptionModel"
              }
            ]
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "FaultSummaryModel": {
        "type": "object",
        "properties": {
          "Severity": {
            "type": "string",
            "description": "Indicates the severiry for the fault"
          }
        }
      },
      "AssociatedBaselineModel": {
        "type": "object",
        "properties": {
          "BaselineName": {
            "type": "string",
            "description": "Name of a baseline associated with the catalog."
          },
          "BaselineId": {
            "type": "integer",
            "description": "Identifier of a baseline associated with the catalog.",
            "format": "int32"
          }
        }
      },
      "MIBEventSubCategory": {
        "type": "object",
        "properties": {
          "Prefix": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "description": "Event sub-category ID.",
            "format": "int32"
          },
          "Description": {
            "type": "string",
            "description": "Description of the event sub-category."
          },
          "Name": {
            "type": "string",
            "description": "Name of the event sub-category."
          }
        }
      },
      "GroupIdsList": {
        "type": "object",
        "properties": {
          "IdOwner": {
            "type": "integer",
            "description": "Indicates the owner for the groups",
            "format": "int32"
          },
          "GroupIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Indicates the groups"
          }
        }
      },
      "GroupDAOAttributeValidations": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeValidation"
            },
            "type": "array",
            "description": "List of group DAO attribute validation(s)"
          }
        }
      },
      "QueryModel": {
        "type": "object",
        "properties": {
          "QueryDevices": {
            "items": {
              "$ref": "#/components/schemas/InfrastructureDeviceModel"
            },
            "type": "array",
            "description": "Indicates the devices associated with the query"
          },
          "QueryString": {
            "type": "string",
            "description": "Indicates the query string"
          },
          "Parameters": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "description": "Indicates any additional parameters for the query"
          }
        }
      },
      "AlertCategoryExtendedModel": {
        "type": "object",
        "properties": {
          "SubCategoryDetails": {
            "items": {
              "$ref": "#/components/schemas/AlertSubCategoryModel"
            },
            "type": "array",
            "description": "List of sub category details."
          },
          "CatalogName": {
            "type": "string",
            "description": "Name of the catalog for which the category is associated."
          },
          "Id": {
            "type": "integer",
            "description": "ID of the category associated on the catalog.",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Name of category"
          }
        }
      },
      "QuerySupportService": {
        "type": "object",
        "properties": {
          "OperatorInfo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OperatorInfo"
              }
            ],
            "nullable": true
          },
          "QueryContexts": {
            "items": {
              "$ref": "#/components/schemas/QueryContext"
            },
            "type": "array"
          },
          "QueryContextSummaries": {
            "items": {
              "$ref": "#/components/schemas/QueryContextSummary"
            },
            "type": "array"
          },
          "Filters": {
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "type": "array"
          },
          "Queries": {
            "items": {
              "$ref": "#/components/schemas/Query"
            },
            "type": "array"
          }
        },
        "title": "QuerySupportService"
      },
      "NetworkBootIsoModel": {
        "type": "object",
        "properties": {
          "IsoTimeout": {
            "type": "integer",
            "description": "Timeout in hours to wait for network boot from ISO to complete.",
            "format": "int32"
          },
          "ShareDetail": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ShareDetail"
              }
            ]
          },
          "BootToNetwork": {
            "type": "boolean",
            "description": "Indicates whether or not network boot from ISO is wanted."
          },
          "ShareType": {
            "type": "string",
            "description": "Type of network share (CIFS/NFS)."
          },
          "IsoTimeoutUnit": {
            "type": "integer",
            "description": "ISO timeout unit (1=Hours, 2=Minutes).",
            "format": "int32"
          },
          "IsoPath": {
            "type": "string",
            "description": "Network path to ISO to boot from."
          }
        }
      },
      "Condition": {
        "type": "object",
        "properties": {
          "LogicalOperatorId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "OperatorId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LeftParen": {
            "type": "boolean",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          },
          "RightParen": {
            "type": "boolean",
            "nullable": true
          },
          "FieldId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "Condition"
      },
      "FabricRequestPayloadModel": {
        "type": "object",
        "properties": {
          "FabricIds": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of fabric Ids to delete"
          }
        }
      },
      "CreateTemplateRequest": {
        "required": [
          "Name",
          "SourceDeviceId",
          "Fqdds"
        ],
        "type": "object",
        "properties": {
          "TypeId": {
            "type": "integer",
            "format": "int32"
          },
          "SourceDeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "Name": {
            "type": "string"
          },
          "Fqdds": {
            "type": "string"
          },
          "Options": {
            "type": "string"
          },
          "ViewTypeId": {
            "type": "integer",
            "format": "int32"
          },
          "Description": {
            "type": "string"
          }
        }
      },
      "GroupAttributes": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupAttribute"
            },
            "type": "array",
            "description": "List of group attributes"
          }
        }
      },
      "HostKeyModel": {
        "type": "object",
        "properties": {
          "AssociatedDevice": {
            "type": "integer",
            "description": "Profile type.",
            "format": "int64"
          },
          "Identifier": {
            "type": "string",
            "description": "Identifier."
          },
          "Type": {
            "type": "string",
            "description": "Type of Host key."
          },
          "Id": {
            "type": "integer",
            "description": "ID of host key.",
            "format": "int64"
          },
          "Key": {
            "type": "string",
            "description": "Key."
          }
        }
      },
      "GlobalHealth": {
        "type": "object",
        "properties": {
          "NoStatusCount": {
            "type": "integer",
            "description": "NoStatus Health Status count of the managed devices.",
            "format": "int32"
          },
          "NormalCount": {
            "type": "integer",
            "description": "Normal Health Status count of the managed devices.",
            "format": "int32"
          },
          "UnknownCount": {
            "type": "integer",
            "description": "Unknown Health Status count of the managed devices.",
            "format": "int32"
          },
          "CriticalCount": {
            "type": "integer",
            "description": "Critical Health Status count of the managed devices.",
            "format": "int32"
          },
          "WarningCount": {
            "type": "integer",
            "description": "Warning Health Status count of the managed devices.",
            "format": "int32"
          }
        }
      },
      "ExecutionHistory": {
        "type": "object",
        "properties": {
          "LastUpdateTime": {
            "type": "string",
            "nullable": true
          },
          "ExecutionHistoryDetails": {
            "items": {
              "$ref": "#/components/schemas/ExecutionHistoryDetail"
            },
            "type": "array"
          },
          "JobId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "JobStatus": {
            "$ref": "#/components/schemas/JobStatus"
          },
          "JobName": {
            "type": "string"
          },
          "StartTime": {
            "type": "string",
            "nullable": true
          },
          "Progress": {
            "type": "string"
          },
          "ExecutedBy": {
            "type": "string",
            "nullable": true
          },
          "EndTime": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          }
        },
        "title": "ExecutionHistory"
      },
      "SubSystemHealthModel": {
        "type": "object",
        "properties": {
          "TemperatureRollupStatus": {
            "type": "string",
            "description": "Indicates the temperatur rollup status"
          },
          "MemoryRollupStatus": {
            "type": "string",
            "description": "Indicates the memory rollup status"
          },
          "CurrentRollupStatus": {
            "type": "string",
            "description": "Indicates the current rollup status"
          },
          "LicensingRollupStatus": {
            "type": "string",
            "description": "Indicates the licensing rollup status"
          },
          "CpuRollupStatus": {
            "type": "string",
            "description": "Indicates the cpu rollup status"
          },
          "IntrusionRollupStatus": {
            "type": "string",
            "description": "Indicates the intrusion rollup status"
          },
          "BatteryRollupStatus": {
            "type": "string",
            "description": "Indicates the battery rollup status"
          },
          "VoltRollupStatus": {
            "type": "string",
            "description": "Indicates the voltage rollup status"
          },
          "StorageRollupStatus": {
            "type": "string",
            "description": "Indicates the storage rollup status"
          },
          "SdCardRollupStatus": {
            "type": "string",
            "description": "Indicates the SD card rollup status"
          },
          "IdsdmRollupStatus": {
            "type": "string",
            "description": "Indicates the IDSDM rollup status"
          },
          "PowerSupplyRollupStatus": {
            "type": "string",
            "description": "Indicates the power supply rollup status"
          },
          "FanRollupStatus": {
            "type": "string",
            "description": "Indicates the fan rollup status"
          },
          "TempStatisticsRollupStatus": {
            "type": "string",
            "description": "Indicates the temperature statistics rollup status"
          }
        }
      },
      "UserForOwnershipTransferResponse": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "NumberOfOwnedItems": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UserTypeId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "UserId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "IsValidSource": {
            "type": "boolean",
            "nullable": true
          },
          "IsValidTarget": {
            "type": "boolean",
            "nullable": true
          },
          "IsDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "title": "UserForOwnershipTransferResponse"
      },
      "QueryContext": {
        "type": "object",
        "properties": {
          "Tables": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Table"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "BaseCategoryId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          },
          "Fields": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/Field"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "ReportSettings": {
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/ReportSetting"
                }
              ],
              "nullable": true
            },
            "type": "array"
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "QueryContext"
      },
      "DeviceSoftwareModel": {
        "type": "object",
        "properties": {
          "Status": {
            "type": "string",
            "description": "Indicates the status of the device software"
          },
          "VendorId": {
            "type": "string",
            "description": "Device software vendor id"
          },
          "SoftwareType": {
            "type": "string",
            "description": "Indicates the type of device software"
          },
          "DeviceDescription": {
            "type": "string",
            "description": "Device software additional device description"
          },
          "PciDeviceId": {
            "type": "string",
            "description": "Device software PCI device id"
          },
          "InstanceId": {
            "type": "string",
            "description": "Device software instance identifier"
          },
          "OperatingSystemCode": {
            "type": "string",
            "description": "Device software operating system code information"
          },
          "InfrastructureDevice": {
            "type": "integer",
            "description": "Indicates the associated infrastructure device to the device software",
            "format": "int64"
          },
          "ComponentType": {
            "type": "string",
            "description": "Indicates the type of component of the device software"
          },
          "SubDeviceId": {
            "type": "string",
            "description": "Device software sub device id"
          },
          "Version": {
            "type": "string",
            "description": "Device software version"
          },
          "InstallationDate": {
            "type": "string",
            "description": "Device software installation date"
          },
          "SubVendorId": {
            "type": "string",
            "description": "Device software sub vendor id"
          },
          "ComponentId": {
            "type": "string",
            "description": "Device software component id"
          }
        }
      },
      "ActionGroupsByPrivilegesPayload": {
        "type": "object",
        "properties": {
          "Privileges": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "description": "List of privileges names"
          },
          "IncludeLeafs": {
            "type": "boolean",
            "description": "Indicates if the leafs must be considered in the request"
          }
        }
      },
      "RollbackSoftwaresModel": {
        "type": "object",
        "properties": {
          "VendorId": {
            "type": "string"
          },
          "SoftwareType": {
            "type": "string"
          },
          "DeviceDescription": {
            "type": "string"
          },
          "PciDeviceId": {
            "type": "string"
          },
          "InstanceId": {
            "type": "string"
          },
          "ComponentId": {
            "type": "string"
          },
          "SubDeviceId": {
            "type": "string"
          },
          "CurrentVersion": {
            "type": "string"
          },
          "InstallationDate": {
            "type": "string"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          },
          "RollbackVersion": {
            "type": "string"
          },
          "CatalogId": {
            "type": "integer",
            "format": "int32"
          },
          "SubVendorId": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "RollbackSource": {
            "type": "string"
          }
        }
      },
      "ConfigurationSection": {
        "type": "object",
        "properties": {
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "ConfigurationSection"
      },
      "EventType": {
        "type": "object",
        "properties": {
          "EventTypeId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "format": "int64"
          },
          "Name": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          }
        },
        "title": "EventType"
      },
      "GlobalExcludeAddressModel": {
        "type": "object",
        "properties": {
          "GlobalExcludeAddress": {
            "items": {
              "$ref": "#/components/schemas/GlobalExcludeAddress"
            },
            "type": "array"
          }
        }
      },
      "AlertMessageDefinitionSubCategories": {
        "type": "object",
        "properties": {
          "SubCategory": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "AlertMessageDefinitionSubCategories"
      },
      "BaselineDetail": {
        "type": "object",
        "properties": {
          "BaselineName": {
            "type": "string",
            "description": "Name of baseline."
          },
          "DeviceComplianceStatus": {
            "type": "string",
            "description": "Status of device compliance."
          },
          "BaselineId": {
            "type": "integer",
            "description": "ID of baseline.",
            "format": "int32"
          }
        }
      },
      "CreateReportDefinitionRequest": {
        "type": "object",
        "properties": {
          "QueryDefRequest": {
            "description": "Information on the filters and context of the report",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/QueryDef"
              }
            ]
          },
          "Description": {
            "type": "string",
            "description": "Report description"
          },
          "ColumnNames": {
            "items": {
              "$ref": "#/components/schemas/ReportDefColModel"
            },
            "type": "array"
          },
          "Name": {
            "type": "string",
            "description": "Report name"
          },
          "FilterGroupId": {
            "type": "integer",
            "description": "ID of the filter group in the report",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "AutoDeployDevices": {
        "type": "object",
        "properties": {
          "ResultCode": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "Identifier": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          }
        },
        "title": "AutoDeployDevices"
      },
      "ApplianceResources": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/ApplianceResource"
            },
            "type": "array",
            "description": "The list of the appliance resources required for a given configuration (small or large)"
          }
        }
      },
      "SyslogConfiguration": {
        "type": "object",
        "properties": {
          "DestinationAddress": {
            "type": "string",
            "description": "Destination address."
          },
          "Enabled": {
            "type": "boolean",
            "description": "Boolean value if syslog configuration is enabled."
          },
          "Id": {
            "type": "integer",
            "description": "ID of Syslog Configuration.",
            "format": "int32"
          }
        }
      },
      "ApplicableUplinkPortModel": {
        "type": "object",
        "properties": {
          "NodeServiceTag": {
            "type": "string"
          },
          "Ports": {
            "items": {
              "$ref": "#/components/schemas/PortInformationModel"
            },
            "type": "array"
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "Minutes": {
            "type": "integer",
            "description": "Minutes in range 0-59.",
            "format": "int32"
          },
          "Hour": {
            "type": "integer",
            "description": "Hour in 12hr format.",
            "format": "int32"
          }
        }
      },
      "DownloadBundleRequest": {
        "required": [
          "BundleType"
        ],
        "type": "object",
        "properties": {
          "BundleType": {
            "type": "string",
            "description": "Type of the bundle to be downloaded."
          }
        }
      },
      "AutoDeployModel": {
        "type": "object",
        "properties": {
          "AutoDeployDevices": {
            "items": {
              "$ref": "#/components/schemas/AutoDeployDevicesModel"
            },
            "type": "array"
          },
          "AutoDeployId": {
            "type": "integer",
            "description": "AutoDeploy ID",
            "format": "int32"
          }
        }
      },
      "DeviceSoftware": {
        "type": "object",
        "properties": {
          "Version": {
            "type": "string",
            "nullable": true
          },
          "InstallationDate": {
            "type": "string",
            "nullable": true
          },
          "SoftwareType": {
            "type": "string",
            "nullable": true
          },
          "DeviceDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceSoftware"
      },
      "SingleUpdateReportComponentsResponseModel": {
        "type": "object",
        "properties": {
          "ComponentTargetIdentifier": {
            "type": "string"
          },
          "ComponentSourceName": {
            "type": "string"
          },
          "ComponentUpdateAction": {
            "type": "string"
          },
          "ComponentVersion": {
            "type": "string"
          },
          "ComponentUniqueIdentifier": {
            "type": "string"
          },
          "PrerequisiteInfo": {
            "type": "string"
          },
          "ComponentUriInformation": {
            "type": "string"
          },
          "ComponentType": {
            "type": "string"
          },
          "IsCompliant": {
            "type": "string"
          },
          "ComponentCurrentVersion": {
            "type": "string"
          },
          "ComponentCriticality": {
            "type": "string"
          },
          "ComponentName": {
            "type": "string"
          },
          "ImpactAssessment": {
            "type": "string"
          },
          "ComplianceDependencies": {
            "items": {
              "$ref": "#/components/schemas/ComplianceDependenciesModel"
            },
            "type": "array"
          },
          "DependencyUpgradeRequired": {
            "type": "boolean"
          },
          "ComponentRebootRequired": {
            "type": "string"
          }
        }
      },
      "SettingsValueSet": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "nullable": true
          },
          "Value": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SettingsValueSet"
      },
      "AuditLogsDocumentModel": {
        "type": "object",
        "properties": {
          "TypCat": {
            "type": "string"
          },
          "AudLogMsgIntf": {
            "type": "string"
          },
          "AudLogSeverity": {
            "type": "string"
          },
          "CustomTags": {
            "type": "string"
          },
          "AudLogUsrNm": {
            "type": "string"
          },
          "AudLogIPAdd": {
            "type": "string"
          },
          "AudLogMsg": {
            "type": "string"
          },
          "AudLogId": {
            "type": "string"
          },
          "AudLogCat": {
            "type": "string"
          },
          "AudLogMsgId": {
            "type": "string"
          }
        }
      },
      "SingleUpdatePayloadResponse": {
        "type": "object",
        "properties": {
          "RequiresReboot": {
            "type": "boolean",
            "nullable": true
          },
          "PackageType": {
            "type": "string",
            "nullable": true
          },
          "DellVersion": {
            "type": "string",
            "nullable": true
          },
          "ReleaseDate": {
            "type": "string",
            "nullable": true
          },
          "ReleaseId": {
            "type": "string",
            "nullable": true
          },
          "VendorVersion": {
            "type": "string",
            "nullable": true
          },
          "PackageId": {
            "type": "string",
            "nullable": true
          },
          "SchemaVersion": {
            "type": "string",
            "nullable": true
          },
          "XmlGenVersion": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "SingleUpdatePayloadResponse"
      },
      "GlobalExcludeModel": {
        "type": "object",
        "properties": {
          "Identifier": {
            "type": "string",
            "description": "Identifier of device."
          },
          "DeviceType": {
            "type": "integer",
            "description": "Type of device.",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "ID of device.",
            "format": "int64"
          },
          "GlobalExcludeDetails": {
            "items": {
              "$ref": "#/components/schemas/GlobalExcludeDetailModel"
            },
            "type": "array",
            "description": "List of globally excluded devices."
          }
        }
      },
      "GroupDAOAttributeTypes": {
        "type": "object",
        "properties": {
          "Value": {
            "items": {
              "$ref": "#/components/schemas/GroupDAOAttributeType"
            },
            "type": "array",
            "description": "List of group DAO attributes types"
          }
        }
      },
      "DeviceSlotType": {
        "type": "object",
        "properties": {
          "SlotType": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "SlotName": {
            "type": "string",
            "nullable": true
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DeviceSlotType"
      },
      "CatalogsResponseModel": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int32"
          },
          "Catalogs": {
            "items": {
              "$ref": "#/components/schemas/CatalogsModel"
            },
            "type": "array"
          }
        }
      },
      "ServerInterfaceProfileModel": {
        "required": [
          "Id",
          "NicBonded"
        ],
        "type": "object",
        "properties": {
          "FabricId": {
            "type": "string",
            "description": "The identifier of the fabric"
          },
          "NativeVLAN": {
            "type": "integer",
            "description": "Untagged VLANs configured for the given NIC",
            "format": "int32"
          },
          "Id": {
            "type": "string",
            "description": "The identifier of the profile"
          },
          "OnboardedPort": {
            "type": "string",
            "description": "IOM port that is connected to the NIC that is onboarded"
          },
          "NicBonded": {
            "type": "boolean",
            "description": "Indicates if the given NIC port participates in the NIC teaming. It is a binary attribute"
          }
        }
      },
      "SubnetMask": {
        "type": "object",
        "properties": {
          "id": {
            "pattern": "(\\?:[0-9]{1,3}\\.){3}[0-9]{1,3}",
            "type": "string"
          }
        },
        "title": "SubnetMask"
      },
      "ForwardersResponseModel": {
        "type": "object",
        "properties": {
          "Forwarders": {
            "items": {
              "$ref": "#/components/schemas/ForwardersModel"
            },
            "type": "array"
          }
        }
      },
      "TargetActionRequestPayloadModel": {
        "required": [
          "TargetId"
        ],
        "type": "object",
        "properties": {
          "TargetId": {
            "type": "integer",
            "description": "Value of the target Id",
            "format": "int32"
          }
        }
      },
      "SearchService": {
        "type": "object",
        "properties": {
          "Actions": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Actions"
              }
            ],
            "nullable": true
          }
        },
        "title": "SearchService"
      },
      "BaselineActionRequestByDeviceIdsPayloadModel": {
        "type": "object",
        "properties": {
          "Ids": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array",
            "description": "Array of device Ids"
          }
        }
      },
      "WarrantyCountsModel": {
        "type": "object",
        "properties": {
          "ReportType": {
            "type": "integer",
            "description": "Type of report",
            "format": "int32"
          },
          "NumberOfActiveWarranties": {
            "type": "integer",
            "description": "Number of active warranties",
            "format": "int64"
          },
          "ScoreBoard": {
            "type": "boolean",
            "description": "Scoreboard"
          },
          "NumberOfExpiredWarranties": {
            "type": "integer",
            "description": "Number of expired warranties",
            "format": "int64"
          },
          "NumberOfWarrantiesExpiringSoon": {
            "type": "integer",
            "description": "Number of warranties expiring soon",
            "format": "int64"
          }
        }
      },
      "DeleteIdentityPoolsPayload": {
        "type": "object",
        "properties": {
          "IdentityPoolIds": {
            "items": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ],
              "example": "42",
              "format": "int64"
            },
            "type": "array"
          }
        },
        "title": "DeleteIdentityPoolsPayload"
      },
      "RegistrationStatus": {
        "type": "object",
        "properties": {
          "SiteName": {
            "type": "string",
            "nullable": true
          },
          "SerialNumber": {
            "type": "string",
            "nullable": true
          },
          "SiteId": {
            "type": "string",
            "nullable": true
          },
          "Id": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "RegistrationStatus"
      },
      "ConnectionProfileTypeModel": {
        "required": [
          "Id"
        ],
        "type": "object",
        "properties": {
          "Description": {
            "type": "string",
            "description": "Connection profile type description"
          },
          "ProfileType": {
            "type": "integer",
            "description": "Indicates the profile type",
            "format": "int32"
          },
          "Id": {
            "type": "integer",
            "description": "Connection profile type id",
            "format": "int32"
          },
          "Name": {
            "type": "string",
            "description": "Connection profile type name"
          }
        }
      },
      "Entry": {
        "type": "object",
        "properties": {
          "Value": {
            "type": "object",
            "description": "Slot configuration value"
          },
          "Key": {
            "type": "string",
            "description": "Slot configuration key"
          }
        }
      },
      "InfrastructureGroupModelExtension": {
        "type": "object",
        "properties": {
          "GroupModel": {
            "description": "Group model",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/GroupModel"
              }
            ]
          },
          "GroupModelExtension": {
            "description": "Group model extension",
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/GroupModelExtension"
              }
            ]
          }
        }
      },
      "IPv4Address": {
        "type": "object",
        "properties": {
          "SubnetMask": {
            "items": {
              "$ref": "#/components/schemas/SubnetMask"
            },
            "type": "array"
          },
          "AddressOrigin": {
            "items": {
              "$ref": "#/components/schemas/IPv4AddressOrigin"
            },
            "type": "array"
          },
          "Gateway": {
            "type": "string",
            "description": "Gateway."
          },
          "Oem": {
            "items": {
              "$ref": "#/components/schemas/Oem"
            },
            "type": "array"
          }
        }
      },
      "PluginCatalogLocation": {
        "type": "object",
        "properties": {
          "PluginId": {
            "type": "string",
            "description": "Plugin Id"
          },
          "CatalogLocation": {
            "type": "string",
            "description": "Plugin Catalog location"
          }
        }
      },
      "EmailReportRequest": {
        "required": [
          "ReportDefId",
          "Format",
          "EmailIds"
        ],
        "type": "object",
        "properties": {
          "Format": {
            "type": "string",
            "description": "Report format"
          },
          "EmailIds": {
            "type": "string",
            "description": "Email IDs the report is being sent to"
          },
          "ReportDefId": {
            "type": "integer",
            "description": "Report ID",
            "format": "int32"
          }
        }
      },
      "StoragePhysicalDisk": {
        "type": "object",
        "properties": {
          "SecurityState": {
            "type": "string"
          },
          "RemainingReadWriteEndurance": {
            "type": "string"
          },
          "SerialNumber": {
            "type": "string"
          },
          "RaidStatus": {
            "type": "string"
          },
          "BusType": {
            "type": "string"
          },
          "MediaType": {
            "type": "string"
          },
          "EnclosureId": {
            "type": "string"
          },
          "ModelNumber": {
            "type": "string"
          },
          "PredictiveFailureState": {
            "type": "string"
          },
          "ManufacturedDay": {
            "type": "integer",
            "format": "int32"
          },
          "EncryptionAbility": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "VendorName": {
            "type": "string"
          },
          "Channel": {
            "type": "integer",
            "format": "int32"
          },
          "Revision": {
            "type": "string"
          },
          "Status": {
            "type": "integer",
            "format": "int32"
          },
          "FreeSpace": {
            "type": "string"
          },
          "SlotNumber": {
            "type": "integer",
            "format": "int32"
          },
          "UsedSpace": {
            "type": "string"
          },
          "SasAddress": {
            "type": "string"
          },
          "DiskNumber": {
            "type": "string"
          },
          "StatusString": {
            "type": "string"
          },
          "Size": {
            "type": "string"
          },
          "ManufacturedWeek": {
            "type": "integer",
            "format": "int32"
          },
          "ManufacturedYear": {
            "type": "integer",
            "format": "int32"
          },
          "DeviceId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "QueryDef": {
        "type": "object",
        "title": "QueryDef"
      },
      "DiscoveryJob": {
        "type": "object",
        "properties": {
          "JobEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "JobStatusId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "DiscoveryConfigEmailRecipient": {
            "type": "string",
            "nullable": true
          },
          "DiscoveryConfigDiscoveredDeviceCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "LastUpdateTime": {
            "type": "string",
            "nullable": true
          },
          "DiscoveredDevicesByType": {
            "items": {
              "$ref": "#/components/schemas/DiscoveredDeviceByTypeModel"
            },
            "type": "array"
          },
          "DiscoveryConfigExpectedDeviceCount": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "JobName": {
            "type": "string",
            "nullable": true
          },
          "DiscoveryConfigGroupId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "JobDescription": {
            "type": "string",
            "nullable": true
          },
          "JobStartTime": {
            "type": "string",
            "nullable": true
          },
          "JobSchedule": {
            "type": "string",
            "nullable": true
          },
          "UpdatedBy": {
            "type": "string",
            "nullable": true
          },
          "JobEndTime": {
            "type": "string",
            "nullable": true
          },
          "JobId": {
            "format": "int64",
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "example": "42",
            "nullable": true
          },
          "JobNextRun": {
            "type": "string",
            "nullable": true
          },
          "JobProgress": {
            "type": "string",
            "nullable": true
          }
        },
        "title": "DiscoveryJob"
      },
      "DeviceConfigRemediationRequestPayload": {
        "type": "object",
        "properties": {
          "SelectAll": {
            "type": "boolean"
          },
          "Filters": {
            "type": "string"
          },
          "Schedule": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/ScheduleModel"
              }
            ]
          },
          "DeviceIds": {
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "type": "array"
          },
          "IsStaged": {
            "type": "boolean"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "Options": {
            "allOf": [
              {
                "type": "object"
              },
              {
                "$ref": "#/components/schemas/DeployOptionModel"
              }
            ]
          }
        }
      },
      "OIDCClientInfo": {
        "type": "object",
        "properties": {
          "UserName": {
            "type": "string"
          },
          "ClientSecret": {
            "type": "string"
          },
          "InitialAccessToken": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "RegistrationAccessToken": {
            "type": "string"
          },
          "RegistrationUri": {
            "type": "string"
          },
          "Id": {
            "type": "integer",
            "format": "int32"
          },
          "ClientId": {
            "type": "string"
          }
        }
      },
      "NetworkResponseModel": {
        "type": "object",
        "properties": {
          "Networks": {
            "items": {
              "$ref": "#/components/schemas/NetworkModel"
            },
            "type": "array"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{environment}/api",
      "variables": {
        "environment": {
          "default": "localhost"
        }
      }
    }
  ],
  "tags": [
    {
      "name": "AccountService"
    },
    {
      "name": "AlertService"
    },
    {
      "name": "ApplicationService"
    },
    {
      "name": "AutoDeployService"
    },
    {
      "name": "DataForwardingService"
    },
    {
      "name": "DeviceService"
    },
    {
      "name": "DiscoveryConfigService"
    },
    {
      "name": "IdentityPoolService"
    },
    {
      "name": "JobService"
    },
    {
      "name": "MetricService"
    },
    {
      "name": "MIBImportService"
    },
    {
      "name": "NetworkConfigurationService"
    },
    {
      "name": "PluginService"
    },
    {
      "name": "ProfileService"
    },
    {
      "name": "QuerySupportService"
    },
    {
      "name": "RedfishAccountService"
    },
    {
      "name": "ReportService"
    },
    {
      "name": "SearchService"
    },
    {
      "name": "SessionService"
    },
    {
      "name": "TemplateService"
    },
    {
      "name": "TroubleshootService"
    },
    {
      "name": "WarrantyService"
    }
  ]
}